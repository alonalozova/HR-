/**
 * üè¢ HR –ë–û–¢ - –ü–û–í–ù–ê –ö–û–ú–ï–†–¶–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø
 * ‚ö° –®–≤–∏–¥–∫–æ, –Ω–∞–¥—ñ–π–Ω–æ, –∑ —É—Å—ñ–º–∞ –¥–µ—Ç–∞–ª—è–º–∏ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏
 * üéØ 100% –∫–Ω–æ–ø–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å + –ø–æ–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
 * üîê –ü–æ–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
 * üìä –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö HR-–ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –õ—é–¥–∏.Digital
 * 
 * –ü–û–í–ù–ê –°–ü–ï–¶–ò–§–Ü–ö–ê–¶–Ü–Ø:
 * - –í—ñ–¥–ø—É—Å—Ç–∫–∏: 1-7 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤, 3 –º—ñ—Å—è—Ü—ñ –¥–æ –ø–µ—Ä—à–æ—ó, PM‚ÜíHR –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
 * - Remote: –¥–æ 11:00, –ª—ñ–º—ñ—Ç 14 –¥–Ω—ñ–≤/–º—ñ—Å –¥–ª—è –æ—Ñ–ª–∞–π–Ω/–≥—ñ–±—Ä–∏–¥  
 * - –°–ø—ñ–∑–Ω–µ–Ω–Ω—è: –∑ 11:00, –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—ñ—Å–ª—è 7 —Ä–∞–∑—ñ–≤/–º—ñ—Å
 * - –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π: –±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤, –∞–≤—Ç–æ—Ñ—ñ–∫—Å–∞—Ü—ñ—è
 * - –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: –ø–æ–≤–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * - –û–Ω–±–æ—Ä–¥–∏–Ω–≥: https://superficial-sort-084.notion.site/3b5c00ad8a42473bbef49bb26f076ebd
 * - –ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å: –º—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏, –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö
 * - –ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó: –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó, ASAP, FAQ
 * - –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (10+7 –¥–Ω—ñ–≤), —Ä—ñ—á–Ω–∏—Ü—ñ
 * - –°—Ç—Ä—É–∫—Ç—É—Ä–∞: —Ç–æ—á–Ω—ñ –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∏ (Kris team ‚â† Lera team)
 */

// ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
// –£–í–ê–ì–ê: –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –≤–∞—à—ñ —Ä–µ–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º
const BOT_TOKEN = 'YOUR_BOT_TOKEN_HERE';
const SPREADSHEET_ID = 'YOUR_SPREADSHEET_ID_HERE';
const HR_CHAT_ID = 'YOUR_HR_CHAT_ID_HERE';

// üõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
let processingLock = false;

// üöÄ –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ú –ó–ê–•–ò–°–¢–û–ú
function doPost(e) {
  // ‚ö° –ú–ò–¢–¢–Ñ–í–ê –≤—ñ–¥–ø–æ–≤—ñ–¥—å Telegram
  const response = ContentService.createTextOutput('ok');
  
  try {
    if (processingLock) {
      return response; // –®–≤–∏–¥–∫–∏–π –≤–∏—Ö—ñ–¥
    }
    
    processingLock = true;
    
    if (!e || !e.postData || !e.postData.contents) {
      processingLock = false;
      return response;
    }
    
    const update = JSON.parse(e.postData.contents);
    const updateId = update.update_id;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    if (checkDuplicate(updateId)) {
      processingLock = false;
      return response;
    }
    
    markAsProcessed(updateId);
    
    if (update.message) {
      processMessage(update.message);
    } else if (update.callback_query) {
      processCallback(update.callback_query);
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞:', error);
    logError('doPost', error.toString());
  } finally {
    processingLock = false;
  }
  
  return response;
}

// üõ°Ô∏è –ü–ï–†–ï–í–Ü–†–ö–ê –î–£–ë–õ–Ü–ö–ê–¢–Ü–í
function checkDuplicate(updateId) {
  try {
    const cache = CacheService.getScriptCache();
    const key = `processed_${updateId}`;
    const result = cache.get(key);
    return result === 'processed';
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤:', error);
    return false; // –î–û–ó–í–û–õ–Ø–Ñ–ú–û –æ–±—Ä–æ–±–∫—É –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
  }
}

// üíæ –ü–û–ó–ù–ê–ß–ò–¢–ò –Ø–ö –û–ë–†–û–ë–õ–ï–ù–ò–ô
function markAsProcessed(updateId) {
  try {
    const cache = CacheService.getScriptCache();
    cache.put(`processed_${updateId}`, 'processed', 300); // 5 —Ö–≤–∏–ª–∏–Ω
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID:', error);
  }
}

// üìä –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –í–°–Ü–• –¢–ê–ë–õ–ò–¶–¨
function initSheets() {
  try {
    console.log('üöÄ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ç–∞–±–ª–∏—Ü—å...');
    
    // 1. –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏
    ensureSheet('Employees', [
      'FullName', 'TelegramID', 'Username', 'Department', 'Team', 'Subteam', 
      'Position', 'ManagerTelegramID', 'StartDate', 'Birthday', 'WorkFormat',
      'Email', 'Phone', 'Status'
    ]);
    
    // 2. –ö–æ–º–∞–Ω–¥–∏ —Ç–∞ —ñ—î—Ä–∞—Ä—Ö—ñ—è
    ensureSheet('Teams', [
      'Department', 'Team', 'Subteam', 'ManagerTelegramID', 'PMTelegramID'
    ]);
    
    // 3. –í—ñ–¥–ø—É—Å—Ç–∫–∏
    ensureSheet('Vacations', [
      'RequestID', 'TelegramID', 'FullName', 'Department', 'Team', 'Subteam',
      'StartDate', 'EndDate', 'DaysCount', 'IsEmergency', 'Reason',
      'PMStatus', 'PMDecisionBy', 'PMDecisionAt', 'PMComment',
      'HRStatus', 'HRDecisionBy', 'HRDecisionAt', 'HRComment',
      'BalanceBefore', 'BalanceAfter', 'CreatedAt'
    ]);
    
    // 4. Remote –¥–Ω—ñ
    ensureSheet('Remotes', [
      'RequestID', 'TelegramID', 'FullName', 'Department', 'Team',
      'Date', 'RequestedAt', 'Reason', 'WorkFormat', 'MonthCount', 'CreatedAt'
    ]);
    
    // 5. –°–ø—ñ–∑–Ω–µ–Ω–Ω—è
    ensureSheet('Lates', [
      'EntryID', 'TelegramID', 'FullName', 'Department', 'Team',
      'Date', 'MinutesLate', 'Reason', 'MonthCount', 'CreatedAt'
    ]);
    
    // 6. –õ—ñ–∫–∞—Ä–Ω—è–Ω—ñ
    ensureSheet('SickLeaves', [
      'EntryID', 'TelegramID', 'FullName', 'Department', 'Team',
      'StartDate', 'EndDate', 'DaysCount', 'Reason', 'CreatedAt'
    ]);
    
    // 7. –ë–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—É—Å—Ç–æ–∫
    ensureSheet('VacationBalance', [
      'TelegramID', 'Year', 'AnnualQuota', 'Used', 'Remaining', 
      'CanTakeVacation', 'FirstVacationDate', 'LastUpdated'
    ]);
    
    // 8. –û–Ω–±–æ—Ä–¥–∏–Ω–≥ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏
    ensureSheet('OnboardingAssets', [
      'AssetID', 'Department', 'Type', 'Title', 'URL', 'Order', 'IsActive'
    ]);
    
    // 9. –ü–æ–¥—ñ—ó —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    ensureSheet('Events', [
      'EventID', 'Type', 'TelegramID', 'FullName', 'Date', 'Department',
      'NotifyDays', 'IsProcessed', 'CreatedAt'
    ]);
    
    // 10. FAQ
    ensureSheet('HRFAQ', [
      'Category', 'Question', 'Answer', 'IsActive'
    ]);
    
    // 11. –†–æ–ª—ñ
    ensureSheet('Roles', [
      'TelegramID', 'Role', 'Department', 'CanExport'
    ]);
    
    // 12. –ê—É–¥–∏—Ç –ª–æ–≥
    ensureSheet('AuditLog', [
      'EntryID', 'ActorTelegramID', 'Action', 'Entity', 'EntityID', 
      'Details', 'Result', 'Timestamp'
    ]);
    
    console.log('‚úÖ –í—Å—ñ —Ç–∞–±–ª–∏—Ü—ñ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    return '‚úÖ –í—Å—ñ 12 —Ç–∞–±–ª–∏—Ü—å —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!';
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó:', error);
    return `‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó: ${error.toString()}`;
  }
}

// üõ†Ô∏è –°–¢–í–û–†–ï–ù–ù–Ø/–ü–ï–†–ï–í–Ü–†–ö–ê –¢–ê–ë–õ–ò–¶–Ü
function ensureSheet(sheetName, headers) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    let sheet = ss.getSheetByName(sheetName);
    
    if (!sheet) {
      sheet = ss.insertSheet(sheetName);
      console.log(`‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Ç–∞–±–ª–∏—Ü—é: ${sheetName}`);
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
    const existingHeaders = sheet.getRange(1, 1, 1, headers.length).getValues()[0];
    const needsHeaders = existingHeaders.every(cell => !cell) || existingHeaders.length === 0;
    
    if (needsHeaders) {
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      sheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      console.log(`‚úÖ –î–æ–¥–∞–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–æ ${sheetName}`);
    }
    
    return sheet;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ${sheetName}:`, error);
    return null;
  }
}

// üì® –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
function processMessage(message) {
  try {
    const chatId = message.chat.id;
    const text = message.text || '';
    const telegramId = message.from.id;
    const username = message.from.username || '';
    const firstName = message.from.first_name || '';
    const lastName = message.from.last_name || '';
    
    if (text === '/start') {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
      const user = getUserInfo(telegramId);
      if (!user) {
        startRegistration(chatId, telegramId, username, firstName, lastName);
      } else {
        showMainMenu(chatId, telegramId);
      }
      return;
    }
    
    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    handleRegistrationInput(chatId, telegramId, text);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processMessage:', error);
    logError('processMessage', error.toString());
  }
}

// üéØ –ü–û–ß–ê–¢–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
function startRegistration(chatId, telegramId, username, firstName, lastName) {
  const welcomeText = `üëã <b>–ü—Ä–∏–≤—ñ—Ç –∑—ñ—Ä–æ—á–∫–∞!</b> üåü

ü§ñ –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ç–≤–æ—ó–º HR. –í–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –º–µ–Ω–µ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏. –Ø —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —Ç–æ–±—ñ –≤ –Ω–∞–≥–æ–¥—ñ.

üìù –ü–æ—á–Ω—É –∑ —Ç–æ–≥–æ, —â–æ –ø—Ä–æ—à—É —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–∏ –Ω–∞–¥–∞–ª—ñ —è –º—ñ–≥ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ.

–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏:`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é', callback_data: 'start_registration' }]
    ]
  };

  sendMessage(chatId, welcomeText, keyboard);
  
  // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –±–∞–∑–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
  saveRegistrationStep(telegramId, 'start', { username, firstName, lastName });
}

// üìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –ó –ì–†–£–ü–û–í–ò–ú–ò –ö–ù–û–ü–ö–ê–ú–ò
function showMainMenu(chatId, telegramId) {
  try {
    const role = getUserRole(telegramId);
    const user = getUserInfo(telegramId);
    
    let welcomeText = `üëã <b>–ü—Ä–∏–≤—ñ—Ç, ${user?.FullName || '–∫–æ–ª–µ–≥–∞'}!</b>

üåü –Ø —Ç–≤—ñ–π HR –ø–æ–º—ñ—á–Ω–∏–∫. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:`;

    // üé® –ì–†–£–ü–û–í–Ü –ö–ù–û–ü–ö–ò –î–õ–Ø –ö–†–ê–©–û–ì–û UX
    const baseKeyboard = [
      // –ì—Ä—É–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ñ HR –ø—Ä–æ—Ü–µ—Å–∏
      [
        { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'vacation_menu' },
        { text: 'üè† Remote', callback_data: 'remote_menu' }
      ],
      [
        { text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_menu' },
        { text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_menu' }
      ],
      // –ì—Ä—É–ø–∞ 2: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' },
        { text: 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥', callback_data: 'onboarding_menu' }
      ],
      [
        { text: 'üí¨ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'suggestions_menu' },
        { text: 'üö® ASAP –∑–∞–ø–∏—Ç', callback_data: 'asap_request' }
      ],
      [
        { text: '‚ùì FAQ', callback_data: 'faq_menu' },
        { text: 'ü§ñ –®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫', callback_data: 'ai_assistant' }
      ]
    ];

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è PM/HR/CEO
    if (role === 'PM' || role === 'HR' || role === 'CEO') {
      baseKeyboard.push([
        { text: 'üìã –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', callback_data: 'approvals_menu' },
        { text: 'üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data: 'analytics_menu' }
      ]);
    }

    if (role === 'HR') {
      baseKeyboard.push([
        { text: 'üë• HR –ü–∞–Ω–µ–ª—å', callback_data: 'hr_panel' },
        { text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏', callback_data: 'hr_broadcasts' }
      ]);
    }

    if (role === 'CEO') {
      baseKeyboard.push([
        { text: 'üè¢ CEO –ü–∞–Ω–µ–ª—å', callback_data: 'ceo_panel' }
      ]);
    }

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    baseKeyboard.push([
      { text: 'üè† /start', callback_data: 'start_command' },
      { text: 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    const keyboard = { inline_keyboard: baseKeyboard };
    sendMessage(chatId, welcomeText, keyboard);

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showMainMenu:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR.');
  }
}

// üéõÔ∏è –û–ë–†–û–ë–ö–ê CALLBACK –ó–ê–ü–ò–¢–Ü–í
function processCallback(callback) {
  try {
    const chatId = callback.message.chat.id;
    const data = callback.data;
    const telegramId = callback.from.id;
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
    answerCallbackQuery(callback.id);
    
    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è
    switch (data) {
      case 'vacation_menu':
        showVacationMenu(chatId, telegramId);
        break;
      case 'remote_menu':
        showRemoteMenu(chatId, telegramId);
        break;
      case 'late_menu':
        showLateMenu(chatId, telegramId);
        break;
      case 'sick_menu':
        showSickMenu(chatId, telegramId);
        break;
      case 'onboarding_menu':
        showOnboardingMenu(chatId, telegramId);
        break;
      case 'my_stats':
        showMyStats(chatId, telegramId);
        break;
      case 'faq_menu':
        showFAQMenu(chatId, telegramId);
        break;
      case 'back_main':
      case 'main_menu':
      case 'start_command':
        showMainMenu(chatId, telegramId);
        break;
      case 'start_registration':
        showRegistrationForm(chatId, telegramId);
        break;
      case 'suggestions_menu':
        showSuggestionsMenu(chatId, telegramId);
        break;
      case 'asap_request':
        showASAPForm(chatId, telegramId);
        break;
      case 'ai_assistant':
        showAIAssistant(chatId, telegramId);
        break;
      case 'analytics_menu':
        showAnalyticsMenu(chatId, telegramId);
        break;
      case 'hr_panel':
        showHRPanel(chatId, telegramId);
        break;
      case 'ceo_panel':
        showCEOPanel(chatId, telegramId);
        break;
      case 'ai_vacation_help':
        showAIVacationHelp(chatId, telegramId);
        break;
      case 'ai_remote_help':
        showAIRemoteHelp(chatId, telegramId);
        break;
      case 'ai_late_help':
        showAILateHelp(chatId, telegramId);
        break;
      case 'ai_sick_help':
        showAISickHelp(chatId, telegramId);
        break;
      case 'ai_personal_tips':
        showAIPersonalTips(chatId, telegramId);
        break;
      default:
        handleSpecificAction(chatId, telegramId, data);
        break;
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processCallback:', error);
    logError('processCallback', error.toString());
  }
}

// üèñÔ∏è –ú–ï–ù–Æ –í–Ü–î–ü–£–°–¢–û–ö
function showVacationMenu(chatId, telegramId) {
  const balance = getVacationBalance(telegramId);
  const canTake = canTakeVacation(telegramId);
  
  let text = `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏</b>\n\n`;
  text += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.remaining}/${balance.annual} –¥–Ω—ñ–≤\n`;
  
  if (!canTake.allowed) {
    text += `‚ö†Ô∏è ${canTake.reason}\n`;
  }
  
  text += `\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É', callback_data: canTake.allowed ? 'vacation_request' : 'vacation_blocked' },
        { text: 'üö® –ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞', callback_data: 'vacation_emergency' }
      ],
      [
        { text: 'üìã –ú–æ—ó –∑–∞—è–≤–∫–∏', callback_data: 'vacation_my_requests' },
        { text: 'üìä –ë–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª—ñ', callback_data: 'vacation_balance_details' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üè† –ú–ï–ù–Æ REMOTE
function showRemoteMenu(chatId, telegramId) {
  const user = getUserInfo(telegramId);
  const monthStats = getMonthRemoteStats(telegramId);
  
  let text = `üè† <b>Remote —Ä–æ–±–æ—Ç–∞</b>\n\n`;
  text += `üë§ ${user?.FullName}\n`;
  text += `üíº –§–æ—Ä–º–∞—Ç —Ä–æ–±–æ—Ç–∏: ${user?.WorkFormat || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
  text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count}/14 –¥–Ω—ñ–≤\n\n`;
  
  if (user?.WorkFormat === '–û–Ω–ª–∞–π–Ω') {
    text += `‚úÖ –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –æ–Ω–ª–∞–π–Ω - remote –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å\n`;
  } else if (monthStats.count >= 14) {
    text += `‚ö†Ô∏è –õ—ñ–º—ñ—Ç remote –¥–Ω—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (14/–º—ñ—Å)\n`;
  }
  
  text += `\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

  const canRequestRemote = user?.WorkFormat === '–û–Ω–ª–∞–π–Ω' || monthStats.count < 14;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìÖ Remote —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: canRequestRemote ? 'remote_today' : 'remote_limit_reached' },
        { text: 'üìÜ Remote –Ω–∞ –¥–∞—Ç—É', callback_data: canRequestRemote ? 'remote_date' : 'remote_limit_reached' }
      ],
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'remote_my_stats' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// ‚è∞ –ú–ï–ù–Æ –°–ü–Ü–ó–ù–ï–ù–¨
function showLateMenu(chatId, telegramId) {
  const monthStats = getMonthLateStats(telegramId);
  
  let text = `‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è</b>\n\n`;
  text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count} —Ä–∞–∑—ñ–≤\n`;
  
  if (monthStats.count >= 7) {
    text += `‚ö†Ô∏è –£–≤–∞–≥–∞! –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–æ—Ä–º—É —Å–ø—ñ–∑–Ω–µ–Ω—å (7/–º—ñ—Å)\n`;
  }
  
  text += `\n–ù–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω —Å–ø—ñ–∑–Ω—é—î—Ç–µ—Å—å?`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '5 —Ö–≤', callback_data: 'late_5' },
        { text: '10 —Ö–≤', callback_data: 'late_10' },
        { text: '15 —Ö–≤', callback_data: 'late_15' }
      ],
      [
        { text: '30 —Ö–≤', callback_data: 'late_30' },
        { text: '60+ —Ö–≤', callback_data: 'late_60' }
      ],
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'late_my_stats' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üè• –ú–ï–ù–Æ –õ–Ü–ö–ê–†–ù–Ø–ù–û–ì–û
function showSickMenu(chatId, telegramId) {
  const text = `üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π</b>\n\n–í–∏ –∑–∞—Ö–≤–æ—Ä—ñ–ª–∏? –ó–∞—Ñ—ñ–∫—Å—É—î–º–æ —Ü–µ –¥–ª—è HR —Ç–∞ –≤–∞—à–æ–≥–æ PM.\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'ü§í –ó–∞—Ö–≤–æ—Ä—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: 'sick_today' },
        { text: 'üìÖ –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π –Ω–∞ –ø–µ—Ä—ñ–æ–¥', callback_data: 'sick_period' }
      ],
      [
        { text: '‚úÖ –û–¥—É–∂–∞–≤, –≤–∏—Ö–æ–¥–∂—É', callback_data: 'sick_recovery' }
      ],
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'sick_my_stats' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üìä –ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
function showMyStats(chatId, telegramId) {
  try {
    const user = getUserInfo(telegramId);
    const vacationBalance = getVacationBalance(telegramId);
    const remoteStats = getMonthRemoteStats(telegramId);
    const lateStats = getMonthLateStats(telegramId);
    const sickStats = getMonthSickStats(telegramId);
    
    const currentMonth = new Date().toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });
    
    let text = `üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n`;
    text += `üë§ ${user?.FullName}\n`;
    text += `üíº ${user?.Position}\n`;
    text += `üè¢ ${user?.Department}`;
    if (user?.Team) text += ` / ${user?.Team}`;
    if (user?.Subteam) text += ` / ${user?.Subteam}`;
    text += `\n\n`;
    
    text += `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏:</b>\n`;
    text += `üí∞ –ë–∞–ª–∞–Ω—Å: ${vacationBalance.remaining}/${vacationBalance.annual} –¥–Ω—ñ–≤\n`;
    text += `üìÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${vacationBalance.used} –¥–Ω—ñ–≤\n\n`;
    
    text += `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${currentMonth}:</b>\n`;
    text += `üè† Remote: ${remoteStats.count} –¥–Ω—ñ–≤`;
    if (user?.WorkFormat !== '–û–Ω–ª–∞–π–Ω') text += ` (–ª—ñ–º—ñ—Ç: 14)`;
    text += `\n`;
    text += `‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è: ${lateStats.count} —Ä–∞–∑—ñ–≤`;
    if (lateStats.count >= 7) text += ` ‚ö†Ô∏è`;
    text += `\n`;
    text += `üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π: ${sickStats.days} –¥–Ω—ñ–≤\n`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
        ]
      ]
    };

    sendMessage(chatId, text, keyboard);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showMyStats:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

// üìù –°–ò–°–¢–ï–ú–ê –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
function showRegistrationForm(chatId, telegramId) {
  const text = `üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ —Å–∏—Å—Ç–µ–º—ñ</b>

–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:

<b>–ö—Ä–æ–∫ 1:</b> –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  sendMessage(chatId, text, keyboard);
  saveRegistrationStep(telegramId, 'surname', {});
}

// üí¨ –ú–ï–ù–Æ –ü–†–û–ü–û–ó–ò–¶–Ü–ô
function showSuggestionsMenu(chatId, telegramId) {
  const text = `üí¨ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è</b>

–í–∞—à—ñ —ñ–¥–µ—ó –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –Ω–∞—Å! –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìù –ê–Ω–æ–Ω—ñ–º–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', callback_data: 'suggestion_anonymous' },
        { text: 'üë§ –Ü–º–µ–Ω–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', callback_data: 'suggestion_named' }
      ],
      [
        { text: 'üìä –ú–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'my_suggestions' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üö® ASAP –ó–ê–ü–ò–¢
function showASAPForm(chatId, telegramId) {
  const user = getUserInfo(telegramId);
  
  const text = `üö® <b>ASAP –ó–∞–ø–∏—Ç</b>

üë§ ${user?.FullName}
üè¢ ${user?.Department} / ${user?.Team}

–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —è–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –Ω–µ–≥–∞–π–Ω–æ–≥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è:

<i>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ HR –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É.</i>`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  sendMessage(chatId, text, keyboard);
  saveRegistrationStep(telegramId, 'asap_message', {});
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö
function showAIAssistant(chatId, telegramId) {
  const text = `ü§ñ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫</b>

–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑:

üîç <b>–®–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫
‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∏ remote —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ü–æ–ª—ñ—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å
‚Ä¢ –õ—ñ–∫–∞—Ä–Ω—è–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫–∏
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
‚Ä¢ –ü–æ—Ä–∞–¥–∏ –ø–æ –∫–∞—Ä'—î—Ä—ñ

‚ùì –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚ùì –ü—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'ai_vacation_help' },
        { text: 'üè† –ü—Ä–æ remote', callback_data: 'ai_remote_help' }
      ],
      [
        { text: '‚è∞ –ü—Ä–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'ai_late_help' },
        { text: 'üè• –ü—Ä–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'ai_sick_help' }
      ],
      [
        { text: 'üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏', callback_data: 'ai_personal_tips' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üìä –†–û–ó–®–ò–†–ï–ù–ê –ê–ù–ê–õ–Ü–¢–ò–ö–ê
function showAnalyticsMenu(chatId, telegramId) {
  const role = getUserRole(telegramId);
  
  let text = `üìä <b>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏</b>\n\n`;
  
  if (role === 'HR') {
    text += `üë• <b>HR –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞:</b>\n`;
    text += `‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω—ñ—ó\n`;
    text += `‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø—É—Å—Ç–æ–∫ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö\n`;
    text += `‚Ä¢ –¢—Ä–µ–Ω–¥–∏ remote —Ä–æ–±–æ—Ç–∏\n`;
    text += `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å\n`;
    text += `‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è\n\n`;
  } else if (role === 'CEO') {
    text += `üè¢ <b>CEO –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞:</b>\n`;
    text += `‚Ä¢ –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏ –∫–æ–º–ø–∞–Ω—ñ—ó\n`;
    text += `‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–¥—ñ–ª—ñ–≤\n`;
    text += `‚Ä¢ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –≤–ø–ª–∏–≤ –≤—ñ–¥–ø—É—Å—Ç–æ–∫\n`;
    text += `‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ\n\n`;
  } else if (role === 'PM') {
    text += `üë®‚Äçüíº <b>PM –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞:</b>\n`;
    text += `‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏\n`;
    text += `‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤\n`;
    text += `‚Ä¢ –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏\n\n`;
  }
  
  text += `–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:`;

  const keyboard = {
    inline_keyboard: []
  };

  if (role === 'HR') {
    keyboard.inline_keyboard.push(
      [
        { text: 'üìà –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'analytics_general' },
        { text: 'üèñÔ∏è –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥–ø—É—Å—Ç–æ–∫', callback_data: 'analytics_vacation' }
      ],
      [
        { text: 'üè† Remote —Ç—Ä–µ–Ω–¥–∏', callback_data: 'analytics_remote' },
        { text: '‚è∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å', callback_data: 'analytics_late' }
      ],
      [
        { text: 'üìä –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç', callback_data: 'analytics_detailed' },
        { text: 'üìà –ü—Ä–æ–≥–Ω–æ–∑–∏', callback_data: 'analytics_forecast' }
      ]
    );
  } else if (role === 'CEO') {
    keyboard.inline_keyboard.push(
      [
        { text: 'üè¢ –û–≥–ª—è–¥ –∫–æ–º–ø–∞–Ω—ñ—ó', callback_data: 'analytics_company' },
        { text: 'üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –≤–ø–ª–∏–≤', callback_data: 'analytics_financial' }
      ],
      [
        { text: 'üìä –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥–¥—ñ–ª—ñ–≤', callback_data: 'analytics_departments' }
      ]
    );
  } else if (role === 'PM') {
    keyboard.inline_keyboard.push(
      [
        { text: 'üë• –ú–æ—è –∫–æ–º–∞–Ω–¥–∞', callback_data: 'analytics_my_team' },
        { text: 'üìÖ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è', callback_data: 'analytics_planning' }
      ]
    );
  }

  keyboard.inline_keyboard.push([
    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
  ]);

  sendMessage(chatId, text, keyboard);
}

// üë• HR –ü–ê–ù–ï–õ–¨
function showHRPanel(chatId, telegramId) {
  const role = getUserRole(telegramId);
  
  if (role !== 'HR') {
    sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è HR.');
    return;
  }

  const text = `üë• <b>HR –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</b>

üéõÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:</b>

üìä <b>–ó–≤—ñ—Ç–Ω—ñ—Å—Ç—å:</b>
‚Ä¢ –ú—ñ—Å—è—á–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –≤—Å—ñ—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞—Ö
‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –≤ —Ä—ñ–∑–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
‚Ä¢ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö

üë§ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:</b>
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥ –≤—Å—ñ—Ö –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫—ñ–≤
‚Ä¢ –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ä–æ–ª—è–º–∏

üì¢ <b>–ö–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó:</b>
‚Ä¢ –ú–∞—Å–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
‚Ä¢ –û–≥–æ–ª–æ—à–µ–Ω–Ω—è

‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>
‚Ä¢ –ë—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞
‚Ä¢ –ö–∞–ª–µ–Ω–¥–∞—Ä —Å–≤—è—Ç
‚Ä¢ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìä –ó–≤—ñ—Ç–∏', callback_data: 'hr_reports' },
        { text: 'üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ', callback_data: 'hr_users' }
      ],
      [
        { text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏', callback_data: 'hr_broadcasts' },
        { text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'hr_settings' }
      ],
      [
        { text: 'üìà –î–∞—à–±–æ—Ä–¥', callback_data: 'hr_dashboard' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üè¢ CEO –ü–ê–ù–ï–õ–¨
function showCEOPanel(chatId, telegramId) {
  const role = getUserRole(telegramId);
  
  if (role !== 'CEO') {
    sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è CEO.');
    return;
  }

  const text = `üè¢ <b>CEO –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</b>

üìà <b>–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞:</b>
‚Ä¢ KPI –ø–æ –≤—ñ–¥–¥—ñ–ª–∞—Ö
‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ–º–∞–Ω–¥
‚Ä¢ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –≤–ø–ª–∏–≤ HR –ø—Ä–æ—Ü–µ—Å—ñ–≤
‚Ä¢ –ü—Ä–æ–≥–Ω–æ–∑–∏ —Ä–æ–∑–≤–∏—Ç–∫—É

üë• <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º:</b>
‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ –ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤

üíº <b>–ë—ñ–∑–Ω–µ—Å-—Ä—ñ—à–µ–Ω–Ω—è:</b>
‚Ä¢ –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ—Ü–µ—Å—ñ–≤
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–µ –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è
‚Ä¢ ROI –∞–Ω–∞–ª—ñ–∑`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìà KPI –î–∞—à–±–æ—Ä–¥', callback_data: 'ceo_kpi' },
        { text: 'üí∞ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑', callback_data: 'ceo_financial' }
      ],
      [
        { text: 'üë• –ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—É', callback_data: 'ceo_hr_analysis' },
        { text: 'üéØ –°—Ç—Ä–∞—Ç–µ–≥—ñ—è', callback_data: 'ceo_strategy' }
      ],
      [
        { text: 'üìä –ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç', callback_data: 'ceo_full_report' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö - –í–Ü–î–ü–£–°–¢–ö–ò
function showAIVacationHelp(chatId, telegramId) {
  const user = getUserInfo(telegramId);
  const balance = getVacationBalance(telegramId);
  const canTake = canTakeVacation(telegramId);
  
  let text = `üèñÔ∏è <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫: –í—ñ–¥–ø—É—Å—Ç–∫–∏</b>\n\n`;
  
  text += `üë§ ${user?.FullName}\n`;
  text += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.remaining}/${balance.annual} –¥–Ω—ñ–≤\n\n`;
  
  text += `üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫:</b>\n`;
  text += `‚Ä¢ –ú—ñ–Ω—ñ–º—É–º: 1 –¥–µ–Ω—å\n`;
  text += `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: 7 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤ –∑–∞ —Ä–∞–∑\n`;
  text += `‚Ä¢ –ü–µ—Ä—à–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞: —á–µ—Ä–µ–∑ 3 –º—ñ—Å—è—Ü—ñ –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏\n`;
  text += `‚Ä¢ –†—ñ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: 24 –¥–Ω—ñ\n`;
  text += `‚Ä¢ –ù–∞–∫–ª–∞–¥–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –≤ –º–µ–∂–∞—Ö –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∏\n\n`;
  
  text += `üéØ <b>–ü—Ä–æ—Ü–µ—Å –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:</b>\n`;
  text += `1. –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ –±–æ—Ç\n`;
  text += `2. –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è PM\n`;
  text += `3. –§—ñ–Ω–∞–ª—å–Ω–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è HR\n\n`;
  
  if (!canTake.allowed) {
    text += `‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> ${canTake.reason}\n\n`;
  } else {
    text += `‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è:</b> –í–∏ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É!\n\n`;
  }
  
  text += `üí° <b>–ü–æ—Ä–∞–¥–∏:</b>\n`;
  text += `‚Ä¢ –ü–æ–¥–∞–≤–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞ 5 —Ä–æ–±–æ—á–∏—Ö –¥–Ω—ñ–≤\n`;
  text += `‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä –∫–æ–º–∞–Ω–¥–∏\n`;
  text += `‚Ä¢ –î–ª—è –µ–∫—Å—Ç—Ä–µ–Ω–∏—Ö –≤–∏–ø–∞–¥–∫—ñ–≤ —î –æ–∫—Ä–µ–º–∞ –∫–Ω–æ–ø–∫–∞`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üèñÔ∏è –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É', callback_data: 'vacation_request' },
        { text: 'üìä –ú—ñ–π –±–∞–ª–∞–Ω—Å', callback_data: 'vacation_balance_details' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –®–Ü', callback_data: 'ai_assistant' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö - REMOTE
function showAIRemoteHelp(chatId, telegramId) {
  const user = getUserInfo(telegramId);
  const monthStats = getMonthRemoteStats(telegramId);
  
  let text = `üè† <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫: Remote —Ä–æ–±–æ—Ç–∞</b>\n\n`;
  
  text += `üë§ ${user?.FullName}\n`;
  text += `üíº –§–æ—Ä–º–∞—Ç —Ä–æ–±–æ—Ç–∏: ${user?.WorkFormat || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
  text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count}/14 –¥–Ω—ñ–≤\n\n`;
  
  text += `üìã <b>–ü—Ä–∞–≤–∏–ª–∞ remote:</b>\n`;
  text += `‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –¥–æ 11:00\n`;
  text += `‚Ä¢ –û–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç: –±–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤\n`;
  text += `‚Ä¢ –û—Ñ–ª–∞–π–Ω/–ì—ñ–±—Ä–∏–¥: –¥–æ 14 –¥–Ω—ñ–≤/–º—ñ—Å—è—Ü—å\n`;
  text += `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è HR —Ç–∞ PM\n\n`;
  
  if (user?.WorkFormat === '–û–Ω–ª–∞–π–Ω') {
    text += `‚úÖ <b>–í–∞—à —Å—Ç–∞—Ç—É—Å:</b> –û–Ω–ª–∞–π–Ω - remote –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å!\n\n`;
  } else if (monthStats.count >= 14) {
    text += `‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –õ—ñ–º—ñ—Ç remote –¥–Ω—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (14/–º—ñ—Å)\n\n`;
  } else {
    text += `‚úÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${14 - monthStats.count} remote –¥–Ω—ñ–≤ –¥–æ –∫—ñ–Ω—Ü—è –º—ñ—Å—è—Ü—è\n\n`;
  }
  
  text += `üí° <b>–ü–æ—Ä–∞–¥–∏:</b>\n`;
  text += `‚Ä¢ –ü–ª–∞–Ω—É–π—Ç–µ remote –¥–Ω—ñ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å\n`;
  text += `‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è–π—Ç–µ –¥–æ 11:00\n`;
  text += `‚Ä¢ –ö–æ–æ—Ä–¥–∏–Ω—É–π—Ç–µ—Å—å –∑ –∫–æ–º–∞–Ω–¥–æ—é`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üè† Remote —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: 'remote_today' },
        { text: 'üìÖ Remote –Ω–∞ –¥–∞—Ç—É', callback_data: 'remote_date' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –®–Ü', callback_data: 'ai_assistant' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö - –°–ü–Ü–ó–ù–ï–ù–ù–Ø
function showAILateHelp(chatId, telegramId) {
  const monthStats = getMonthLateStats(telegramId);
  
  let text = `‚è∞ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫: –°–ø—ñ–∑–Ω–µ–Ω–Ω—è</b>\n\n`;
  
  text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count} —Ä–∞–∑—ñ–≤\n\n`;
  
  text += `üìã <b>–ü—Ä–∞–≤–∏–ª–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å:</b>\n`;
  text += `‚Ä¢ –†–æ–±–æ—á–∏–π –¥–µ–Ω—å: 10:00-18:00\n`;
  text += `‚Ä¢ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è: –∑ 11:00\n`;
  text += `‚Ä¢ –õ—ñ–º—ñ—Ç: 7 —Ä–∞–∑—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å\n`;
  text += `‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—ñ: –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è\n\n`;
  
  if (monthStats.count >= 7) {
    text += `‚ö†Ô∏è <b>–£–≤–∞–≥–∞:</b> –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–æ—Ä–º—É —Å–ø—ñ–∑–Ω–µ–Ω—å (7/–º—ñ—Å)!\n`;
    text += `–†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ HR –¥–ª—è –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è.\n\n`;
  } else if (monthStats.count >= 5) {
    text += `üü° <b>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:</b> –ë–ª–∏–∑—å–∫–æ –¥–æ –ª—ñ–º—ñ—Ç—É (${monthStats.count}/7)\n`;
    text += `–ë—É–¥—å—Ç–µ –æ–±–µ—Ä–µ–∂–Ω—ñ –∑ —á–∞—Å–æ–º!\n\n`;
  } else {
    text += `‚úÖ <b>–°—Ç–∞—Ç—É—Å:</b> –í –º–µ–∂–∞—Ö –Ω–æ—Ä–º–∏ (${monthStats.count}/7)\n\n`;
  }
  
  text += `üí° <b>–ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—ñ:</b>\n`;
  text += `‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞ 15 —Ö–≤ —Ä–∞–Ω—ñ—à–µ\n`;
  text += `‚Ä¢ –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—å –∑ –≤–µ—á–æ—Ä–∞\n`;
  text += `‚Ä¢ –í—Ä–∞—Ö—É–π—Ç–µ —á–∞—Å –Ω–∞ –¥–æ—Ä–æ–≥—É\n`;
  text += `‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚è∞ –ó–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_menu' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –®–Ü', callback_data: 'ai_assistant' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö - –õ–Ü–ö–ê–†–ù–Ø–ù–ò–ô
function showAISickHelp(chatId, telegramId) {
  const sickStats = getMonthSickStats(telegramId);
  
  let text = `üè• <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫: –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π</b>\n\n`;
  
  text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${sickStats.days} –¥–Ω—ñ–≤\n\n`;
  
  text += `üìã <b>–ü—Ä–∞–≤–∏–ª–∞ –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–≥–æ:</b>\n`;
  text += `‚Ä¢ –ë–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤ –ø–æ –¥–Ω—è—Ö\n`;
  text += `‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –æ–¥—Ä–∞–∑—É –ø—Ä–∏ —Ö–≤–æ—Ä–æ–±—ñ\n`;
  text += `‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è HR —Ç–∞ PM\n`;
  text += `‚Ä¢ –î–æ–≤—ñ–¥–∫–∞ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–∞ —á–µ—Ä–µ–∑ –±–æ—Ç\n`;
  text += `‚Ä¢ –ú–æ–∂–Ω–∞ –≤–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—ñ–æ–¥ —Ö–≤–æ—Ä–æ–±–∏\n\n`;
  
  text += `üéØ <b>–Ø–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç–∏:</b>\n`;
  text += `1. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π" –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é\n`;
  text += `2. –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø (—Å—å–æ–≥–æ–¥–Ω—ñ –∞–±–æ –ø–µ—Ä—ñ–æ–¥)\n`;
  text += `3. HR —Ç–∞ PM –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ\n\n`;
  
  text += `üí° <b>–ü–æ—Ä–∞–¥–∏ –¥–ª—è –∑–¥–æ—Ä–æ–≤'—è:</b>\n`;
  text += `‚Ä¢ –ù–µ –ø—Ä–∞—Ü—é–π—Ç–µ —Ö–≤–æ—Ä–∏–º–∏ - —Ü–µ –∑–Ω–∏–∂—É—î –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å\n`;
  text += `‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è–π—Ç–µ –ø—Ä–æ —Ö–≤–æ—Ä–æ–±—É –æ–¥—Ä–∞–∑—É\n`;
  text += `‚Ä¢ –î–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —Ä–µ–∂–∏–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—è\n`;
  text += `‚Ä¢ –ü–æ–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è –ø–æ–≤–Ω–æ–≥–æ –æ–¥—É–∂–∞–Ω–Ω—è`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üè• –û—Ñ–æ—Ä–º–∏—Ç–∏ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_menu' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –®–Ü', callback_data: 'ai_assistant' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö - –ü–ï–†–°–û–ù–ê–õ–¨–ù–Ü –ü–û–†–ê–î–ò
function showAIPersonalTips(chatId, telegramId) {
  const user = getUserInfo(telegramId);
  const role = getUserRole(telegramId);
  const vacationBalance = getVacationBalance(telegramId);
  const remoteStats = getMonthRemoteStats(telegramId);
  const lateStats = getMonthLateStats(telegramId);
  
  let text = `üí° <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫: –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏</b>\n\n`;
  
  text += `üë§ ${user?.FullName}\n`;
  text += `üíº ${user?.Position}\n`;
  text += `üè¢ ${user?.Department}`;
  if (user?.Team) text += ` / ${user?.Team}`;
  text += `\n\n`;
  
  text += `üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>\n\n`;
  
  // –ü–æ—Ä–∞–¥–∏ –ø–æ –≤—ñ–¥–ø—É—Å—Ç—Ü—ñ
  if (vacationBalance.remaining > 18) {
    text += `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∞:</b> –£ –≤–∞—Å –±–∞–≥–∞—Ç–æ –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏ (${vacationBalance.remaining}). –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –∑–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫!\n\n`;
  } else if (vacationBalance.remaining < 5) {
    text += `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∞:</b> –ó–∞–ª–∏—à–∏–ª–æ—Å—å –º–∞–ª–æ –¥–Ω—ñ–≤ (${vacationBalance.remaining}). –ü–ª–∞–Ω—É–π—Ç–µ –≤—ñ–¥–ø—É—Å—Ç–∫—É –æ–±–µ—Ä–µ–∂–Ω–æ.\n\n`;
  }
  
  // –ü–æ—Ä–∞–¥–∏ –ø–æ remote
  if (user?.WorkFormat !== '–û–Ω–ª–∞–π–Ω' && remoteStats.count > 10) {
    text += `üè† <b>Remote:</b> –í–∏ —á–∞—Å—Ç–æ –ø—Ä–∞—Ü—é—î—Ç–µ remote (${remoteStats.count}/14). –ú–æ–∂–ª–∏–≤–æ, –≤–∞—Ä—Ç–æ —Ä–æ–∑–≥–ª—è–Ω—É—Ç–∏ –æ–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç?\n\n`;
  }
  
  // –ü–æ—Ä–∞–¥–∏ –ø–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è–º
  if (lateStats.count > 3) {
    text += `‚è∞ <b>–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω—ñ—Å—Ç—å:</b> –Ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑—ñ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è–º–∏ (${lateStats.count}/7). –†–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –æ–ø—Ç–∏–º—ñ–∑—É–≤–∞—Ç–∏ —Ä–∞–Ω–∫–æ–≤–∏–π —Ä–æ–∑–ø–æ—Ä—è–¥–æ–∫.\n\n`;
  }
  
  // –ü–æ—Ä–∞–¥–∏ –ø–æ —Ä–æ–ª—ñ
  if (role === 'PM') {
    text += `üë®‚Äçüíº <b>–î–ª—è PM:</b> –ù–µ –∑–∞–±—É–≤–∞–π—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –∑–∞—è–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏ –≤ —Ä–æ–∑–¥—ñ–ª—ñ "–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è".\n\n`;
  } else if (role === 'HR') {
    text += `üë• <b>–î–ª—è HR:</b> –†–µ–≥—É–ª—è—Ä–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä—è–π—Ç–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É —Ç–∞ –∑–≤—ñ—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó –ø—Ä–æ—Ü–µ—Å—ñ–≤.\n\n`;
  }
  
  text += `üìà <b>–ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏:</b>\n`;
  text += `‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –±–æ—Ç–∞ –¥–ª—è –≤—Å—ñ—Ö HR –ø—Ä–æ—Ü–µ—Å—ñ–≤\n`;
  text += `‚Ä¢ –ü–ª–∞–Ω—É–π—Ç–µ –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å\n`;
  text += `‚Ä¢ –°–ª—ñ–¥–∫—É–π—Ç–µ –∑–∞ —Å–≤–æ—î—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é\n`;
  text += `‚Ä¢ –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ HR –ø—Ä–∏ –ø–∏—Ç–∞–Ω–Ω—è—Ö`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –®–Ü', callback_data: 'ai_assistant' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üéØ –û–ë–†–û–ë–ö–ê –°–ü–ï–¶–ò–§–Ü–ß–ù–ò–• –î–Ü–ô
function handleSpecificAction(chatId, telegramId, action) {
  try {
    switch (action) {
      case 'vacation_request':
        startVacationRequest(chatId, telegramId, false);
        break;
      case 'vacation_emergency':
        startVacationRequest(chatId, telegramId, true);
        break;
      case 'remote_today':
        processRemoteToday(chatId, telegramId);
        break;
      case 'sick_today':
        processSickToday(chatId, telegramId);
        break;
      default:
        if (action.startsWith('late_')) {
          const minutes = action.split('_')[1];
          processLateReport(chatId, telegramId, minutes);
        } else if (action.startsWith('dept_')) {
          const department = action.split('_')[1];
          showTeamSelection(chatId, telegramId, department);
        } else if (action.startsWith('team_')) {
          const teamData = action.replace('team_', '');
          handleTeamSelection(chatId, telegramId, teamData);
        }
        break;
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ handleSpecificAction:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É.');
  }
}

// üèñÔ∏è –ü–û–ß–ê–¢–û–ö –ó–ê–ü–ò–¢–£ –í–Ü–î–ü–£–°–¢–ö–ò
function startVacationRequest(chatId, telegramId, isEmergency) {
  const user = getUserInfo(telegramId);
  
  let text = `üìù <b>${isEmergency ? '–ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞' : '–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É'}</b>\n\n`;
  text += `üë§ ${user?.FullName}\n`;
  
  if (isEmergency) {
    text += `üö® –ï–∫—Å—Ç—Ä–µ–Ω–∞ —Å–∏—Ç—É–∞—Ü—ñ—è - –∑–∞—è–≤–∫–∞ –ø—ñ–¥–µ –æ–¥—Ä–∞–∑—É –¥–æ HR\n\n`;
  } else {
    text += `üìã –ó–≤–∏—á–∞–π–Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞: PM ‚Üí HR\n\n`;
  }
  
  text += `–û–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É –≤—ñ–¥–ø—É—Å—Ç–∫–∏:`;
  
  // –¢—É—Ç –±—É–¥–µ –∫–∞–ª–µ–Ω–¥–∞—Ä - –ø–æ–∫–∏ —Å–ø—Ä–æ—â–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìÖ –û–±—Ä–∞—Ç–∏ –¥–∞—Ç–∏', callback_data: `vacation_dates_${isEmergency ? 'emergency' : 'normal'}` }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'vacation_menu' }
      ]
    ]
  };

  sendMessage(chatId, text, keyboard);
}

// üè† –û–ë–†–û–ë–ö–ê REMOTE –°–¨–û–ì–û–î–ù–Ü
function processRemoteToday(chatId, telegramId) {
  try {
    const user = getUserInfo(telegramId);
    const now = new Date();
    const today = Utilities.formatDate(now, 'GMT+2', 'yyyy-MM-dd');
    const requestTime = Utilities.formatDate(now, 'GMT+2', 'HH:mm');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∞—Å—É (–¥–æ 11:00)
    const currentHour = now.getHours();
    const isOnTime = currentHour < 11;
    
    if (!isOnTime) {
      sendMessage(chatId, '‚ö†Ô∏è Remote –¥–µ–Ω—å –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –¥–æ 11:00. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR –¥–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è.');
      return;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª—ñ–º—ñ—Ç—É –¥–ª—è –æ—Ñ–ª–∞–π–Ω/–≥—ñ–±—Ä–∏–¥
    if (user?.WorkFormat !== '–û–Ω–ª–∞–π–Ω') {
      const monthStats = getMonthRemoteStats(telegramId);
      if (monthStats.count >= 14) {
        sendMessage(chatId, '‚ö†Ô∏è –õ—ñ–º—ñ—Ç remote –¥–Ω—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ (14). –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR.');
        return;
      }
    }
    
    // –ó–∞–ø–∏—Å—É—î–º–æ remote –¥–µ–Ω—å
    const requestId = `R_${Date.now()}`;
    recordRemoteDay(requestId, telegramId, today, 'Remote —Ä–æ–±–æ—Ç–∞', user?.WorkFormat);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    sendMessage(chatId, `‚úÖ Remote –¥–µ–Ω—å –Ω–∞ ${today} –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n‚è∞ –ß–∞—Å –ø–æ–¥–∞—á—ñ: ${requestTime}`);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR —Ç–∞ PM
    notifyHRAndPM(user, 'remote', {
      date: today,
      requestTime: requestTime,
      monthCount: getMonthRemoteStats(telegramId).count + 1
    });
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processRemoteToday:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// ‚è∞ –û–ë–†–û–ë–ö–ê –°–ü–Ü–ó–ù–ï–ù–ù–Ø
function processLateReport(chatId, telegramId, minutes) {
  try {
    const user = getUserInfo(telegramId);
    const today = Utilities.formatDate(new Date(), 'GMT+2', 'yyyy-MM-dd');
    const entryId = `L_${Date.now()}`;
    
    // –ó–∞–ø–∏—Å—É—î–º–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è
    recordLateEntry(entryId, telegramId, today, parseInt(minutes));
    
    const monthStats = getMonthLateStats(telegramId);
    const newCount = monthStats.count + 1;
    
    let text = `‚úÖ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è –Ω–∞ ${minutes} —Ö–≤ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n`;
    text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${newCount} —Ä–∞–∑—ñ–≤`;
    
    if (newCount >= 7) {
      text += `\n‚ö†Ô∏è –£–≤–∞–≥–∞! –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–æ—Ä–º—É —Å–ø—ñ–∑–Ω–µ–Ω—å (7/–º—ñ—Å)`;
    }
    
    sendMessage(chatId, text);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR (–∑–∞–≤–∂–¥–∏) —Ç–∞ PM (—è–∫—â–æ >= 7)
    notifyHRAndPM(user, 'late', {
      date: today,
      minutes: minutes,
      monthCount: newCount,
      isOverLimit: newCount >= 7
    });
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processLateReport:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è.');
  }
}

// üè• –û–ë–†–û–ë–ö–ê –õ–Ü–ö–ê–†–ù–Ø–ù–û–ì–û –°–¨–û–ì–û–î–ù–Ü
function processSickToday(chatId, telegramId) {
  try {
    const user = getUserInfo(telegramId);
    const today = Utilities.formatDate(new Date(), 'GMT+2', 'yyyy-MM-dd');
    const entryId = `S_${Date.now()}`;
    
    // –ó–∞–ø–∏—Å—É—î–º–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π
    recordSickLeave(entryId, telegramId, today, today, 1, '–ó–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è');
    
    sendMessage(chatId, '‚úÖ –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π –¥–µ–Ω—å –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\nüè• HR —Ç–∞ –≤–∞—à PM –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—ñ.');
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR —Ç–∞ PM
    notifyHRAndPM(user, 'sick', {
      startDate: today,
      endDate: today,
      days: 1
    });
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processSickToday:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–≥–æ.');
  }
}

// üìä –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–ê–¢–ò–°–¢–ò–ö–ò

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É –≤—ñ–¥–ø—É—Å—Ç–∫–∏
function getVacationBalance(telegramId) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('VacationBalance');
    const currentYear = new Date().getFullYear();
    
    if (!sheet || sheet.getLastRow() <= 1) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å
      const user = getUserInfo(telegramId);
      const canTake = canTakeVacationByStartDate(user?.StartDate);
      
      sheet.appendRow([
        telegramId, currentYear, 24, 0, 24, 
        canTake, canTake ? new Date() : calculateFirstVacationDate(user?.StartDate),
        new Date()
      ]);
      
      return { annual: 24, used: 0, remaining: 24 };
    }
    
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] == telegramId && data[i][1] == currentYear) {
        return {
          annual: data[i][2] || 24,
          used: data[i][3] || 0,
          remaining: data[i][4] || 24
        };
      }
    }
    
    return { annual: 24, used: 0, remaining: 24 };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getVacationBalance:', error);
    return { annual: 24, used: 0, remaining: 24 };
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫—É
function canTakeVacation(telegramId) {
  try {
    const user = getUserInfo(telegramId);
    if (!user?.StartDate) {
      return { allowed: false, reason: '–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞' };
    }
    
    const startDate = new Date(user.StartDate);
    const threeMonthsLater = new Date(startDate);
    threeMonthsLater.setMonth(threeMonthsLater.getMonth() + 3);
    
    const now = new Date();
    
    if (now < threeMonthsLater) {
      const daysLeft = Math.ceil((threeMonthsLater - now) / (1000 * 60 * 60 * 24));
      return { 
        allowed: false, 
        reason: `–î–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${daysLeft} –¥–Ω—ñ–≤ (3 –º—ñ—Å—è—Ü—ñ –∑ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏)` 
      };
    }
    
    const balance = getVacationBalance(telegramId);
    if (balance.remaining <= 0) {
      return { allowed: false, reason: '–ë–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ' };
    }
    
    return { allowed: true, reason: '' };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ canTakeVacation:', error);
    return { allowed: false, reason: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏' };
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ remote –∑–∞ –º—ñ—Å—è—Ü—å
function getMonthRemoteStats(telegramId) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Remotes');
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return { count: 0 };
    }
    
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const data = sheet.getDataRange().getValues();
    let count = 0;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] == telegramId) {
        const date = new Date(data[i][5]); // Date column
        if (date.getMonth() + 1 === currentMonth && date.getFullYear() === currentYear) {
          count++;
        }
      }
    }
    
    return { count };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getMonthRemoteStats:', error);
    return { count: 0 };
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å –∑–∞ –º—ñ—Å—è—Ü—å
function getMonthLateStats(telegramId) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Lates');
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return { count: 0 };
    }
    
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const data = sheet.getDataRange().getValues();
    let count = 0;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] == telegramId) {
        const date = new Date(data[i][5]); // Date column
        if (date.getMonth() + 1 === currentMonth && date.getFullYear() === currentYear) {
          count++;
        }
      }
    }
    
    return { count };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getMonthLateStats:', error);
    return { count: 0 };
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏—Ö –∑–∞ –º—ñ—Å—è—Ü—å
function getMonthSickStats(telegramId) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('SickLeaves');
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return { days: 0 };
    }
    
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const data = sheet.getDataRange().getValues();
    let days = 0;
    
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] == telegramId) {
        const startDate = new Date(data[i][5]); // StartDate column
        if (startDate.getMonth() + 1 === currentMonth && startDate.getFullYear() === currentYear) {
          days += data[i][7] || 1; // DaysCount column
        }
      }
    }
    
    return { days };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getMonthSickStats:', error);
    return { days: 0 };
  }
}

// üìù –§–£–ù–ö–¶–Ü–á –ó–ê–ü–ò–°–£ –î–ê–ù–ò–•

// –ó–∞–ø–∏—Å remote –¥–Ω—è
function recordRemoteDay(requestId, telegramId, date, reason, workFormat) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Remotes');
    const user = getUserInfo(telegramId);
    const monthCount = getMonthRemoteStats(telegramId).count + 1;
    
    sheet.appendRow([
      requestId, telegramId, user?.FullName, user?.Department, user?.Team,
      date, new Date(), reason, workFormat, monthCount, new Date()
    ]);
    
    logAudit(telegramId, 'CREATE', 'Remote', requestId, { date, reason });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ recordRemoteDay:', error);
  }
}

// –ó–∞–ø–∏—Å —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è
function recordLateEntry(entryId, telegramId, date, minutes) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Lates');
    const user = getUserInfo(telegramId);
    const monthCount = getMonthLateStats(telegramId).count + 1;
    
    sheet.appendRow([
      entryId, telegramId, user?.FullName, user?.Department, user?.Team,
      date, minutes, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç', monthCount, new Date()
    ]);
    
    logAudit(telegramId, 'CREATE', 'Late', entryId, { date, minutes });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ recordLateEntry:', error);
  }
}

// –ó–∞–ø–∏—Å –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–≥–æ
function recordSickLeave(entryId, telegramId, startDate, endDate, days, reason) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('SickLeaves');
    const user = getUserInfo(telegramId);
    
    sheet.appendRow([
      entryId, telegramId, user?.FullName, user?.Department, user?.Team,
      startDate, endDate, days, reason, new Date()
    ]);
    
    logAudit(telegramId, 'CREATE', 'SickLeave', entryId, { startDate, endDate, days });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ recordSickLeave:', error);
  }
}

// üì¢ –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø HR –¢–ê PM
function notifyHRAndPM(user, type, data) {
  try {
    let hrMessage = '';
    let pmMessage = '';
    
    switch (type) {
      case 'remote':
        hrMessage = `üè† <b>Remote –¥–µ–Ω—å</b>\n\nüë§ ${user?.FullName}\nüè¢ ${user?.Department}`;
        if (user?.Team) hrMessage += ` / ${user?.Team}`;
        hrMessage += `\nüìÖ –î–∞—Ç–∞: ${data.date}\n‚è∞ –ß–∞—Å –ø–æ–¥–∞—á—ñ: ${data.requestTime}\nüìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${data.monthCount}`;
        
        pmMessage = hrMessage; // PM –æ—Ç—Ä–∏–º—É—î —Ç—É –∂ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
        break;
        
      case 'late':
        hrMessage = `‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è</b>\n\nüë§ ${user?.FullName}\nüè¢ ${user?.Department}`;
        if (user?.Team) hrMessage += ` / ${user?.Team}`;
        hrMessage += `\nüìÖ –î–∞—Ç–∞: ${data.date}\n‚è±Ô∏è –°–ø—ñ–∑–Ω–µ–Ω–Ω—è: ${data.minutes} —Ö–≤\nüìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${data.monthCount}`;
        if (data.isOverLimit) hrMessage += `\n‚ö†Ô∏è –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–æ—Ä–º—É (7/–º—ñ—Å)`;
        
        if (data.isOverLimit) {
          pmMessage = hrMessage; // PM –æ—Ç—Ä–∏–º—É—î —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç
        }
        break;
        
      case 'sick':
        hrMessage = `üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π</b>\n\nüë§ ${user?.FullName}\nüè¢ ${user?.Department}`;
        if (user?.Team) hrMessage += ` / ${user?.Team}`;
        hrMessage += `\nüìÖ –ü–µ—Ä—ñ–æ–¥: ${data.startDate}`;
        if (data.endDate !== data.startDate) hrMessage += ` - ${data.endDate}`;
        hrMessage += `\nüìä –î–Ω—ñ–≤: ${data.days}`;
        
        pmMessage = hrMessage; // PM –∑–∞–≤–∂–¥–∏ –æ—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π
        break;
    }
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ HR
    if (hrMessage) {
      sendMessage(HR_CHAT_ID, hrMessage);
    }
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ PM –∫–æ–º–∞–Ω–¥–∏
    if (pmMessage && user?.Department) {
      const pmId = getPMTelegramId(user.Department, user.Team);
      if (pmId && pmId !== HR_CHAT_ID) {
        sendMessage(pmId, pmMessage);
      }
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ notifyHRAndPM:', error);
  }
}

// üë§ –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –ö–û–†–ò–°–¢–£–í–ê–ß–Ü–í

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function getUserRole(telegramId) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Roles');
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return 'EMP';
    }
    
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] == telegramId) {
        return data[i][1] || 'EMP';
      }
    }
    
    return 'EMP';
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getUserRole:', error);
    return 'EMP';
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
function getUserInfo(telegramId) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Employees');
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return null;
    }
    
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      if (data[i][1] == telegramId) {
        return {
          FullName: data[i][0],
          TelegramID: data[i][1],
          Username: data[i][2],
          Department: data[i][3],
          Team: data[i][4],
          Subteam: data[i][5],
          Position: data[i][6],
          ManagerTelegramID: data[i][7],
          StartDate: data[i][8],
          Birthday: data[i][9],
          WorkFormat: data[i][10],
          Email: data[i][11],
          Phone: data[i][12],
          Status: data[i][13]
        };
      }
    }
    
    return null;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getUserInfo:', error);
    return null;
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è PM –∫–æ–º–∞–Ω–¥–∏
function getPMTelegramId(department, team) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Teams');
    
    if (!sheet || sheet.getLastRow() <= 1) {
      return null;
    }
    
    const data = sheet.getDataRange().getValues();
    for (let i = 1; i < data.length; i++) {
      if (data[i][0] === department && (!team || data[i][1] === team)) {
        return data[i][4]; // PMTelegramID column
      }
    }
    
    return null;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getPMTelegramId:', error);
    return null;
  }
}

// üìù –ê–£–î–ò–¢ –õ–û–ì
function logAudit(actorTelegramId, action, entity, entityId, details) {
  try {
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('AuditLog');
    
    if (sheet) {
      const entryId = `A_${Date.now()}`;
      sheet.appendRow([
        entryId, actorTelegramId, action, entity, entityId,
        JSON.stringify(details), 'SUCCESS', new Date()
      ]);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ logAudit:', error);
  }
}

// üìù –õ–û–ì–£–í–ê–ù–ù–Ø –ü–û–ú–ò–õ–û–ö
function logError(functionName, errorMessage) {
  try {
    logAudit('SYSTEM', 'ERROR', functionName, '', { error: errorMessage });
  } catch (e) {
    console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ª–æ–≥—É–≤–∞—Ç–∏ –ø–æ–º–∏–ª–∫—É:', e);
  }
}

// üìù –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
function saveRegistrationStep(telegramId, step, data) {
  try {
    const cache = CacheService.getScriptCache();
    const key = `registration_${telegramId}`;
    const existingData = cache.get(key);
    
    let registrationData = {};
    if (existingData) {
      registrationData = JSON.parse(existingData);
    }
    
    registrationData.currentStep = step;
    registrationData = { ...registrationData, ...data };
    
    cache.put(key, JSON.stringify(registrationData), 1800); // 30 —Ö–≤–∏–ª–∏–Ω
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫—Ä–æ–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
  }
}

function getRegistrationData(telegramId) {
  try {
    const cache = CacheService.getScriptCache();
    const key = `registration_${telegramId}`;
    const data = cache.get(key);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error);
    return null;
  }
}

// üìù –û–ë–†–û–ë–ö–ê –¢–ï–ö–°–¢–û–í–ò–• –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨ –ü–Ü–î –ß–ê–° –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
function handleRegistrationInput(chatId, telegramId, text) {
  try {
    const regData = getRegistrationData(telegramId);
    if (!regData) return;
    
    const step = regData.currentStep;
    
    switch (step) {
      case 'surname':
        saveRegistrationStep(telegramId, 'name', { surname: text });
        sendMessage(chatId, `‚úÖ –ü—Ä—ñ–∑–≤–∏—â–µ: ${text}\n\n<b>–ö—Ä–æ–∫ 2:</b> –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è`);
        break;
        
      case 'name':
        saveRegistrationStep(telegramId, 'department', { name: text });
        showDepartmentSelection(chatId, telegramId);
        break;
        
      case 'position':
        saveRegistrationStep(telegramId, 'birthday', { position: text });
        sendMessage(chatId, `‚úÖ –ü–æ—Å–∞–¥–∞: ${text}\n\n<b>–ö—Ä–æ–∫ 5:</b> –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†)`);
        break;
        
      case 'birthday':
        if (isValidDate(text)) {
          saveRegistrationStep(telegramId, 'complete', { birthday: text });
          completeRegistration(chatId, telegramId);
        } else {
          sendMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15.03.1990)');
        }
        break;
        
      case 'asap_message':
        processASAPMessage(chatId, telegramId, text);
        break;
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ handleRegistrationInput:', error);
  }
}

// üè¢ –í–ò–ë–Ü–† –î–ï–ü–ê–†–¢–ê–ú–ï–ù–¢–£
function showDepartmentSelection(chatId, telegramId) {
  const text = `<b>–ö—Ä–æ–∫ 3:</b> –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç:`;
  
  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìà Marketing', callback_data: 'dept_Marketing' },
        { text: 'üé® Design', callback_data: 'dept_Design' }
      ],
      [
        { text: 'üì± SMM', callback_data: 'dept_SMM' },
        { text: 'üíº Sales', callback_data: 'dept_Sales' }
      ],
      [
        { text: 'üë• HR', callback_data: 'dept_HR' },
        { text: 'üè¢ CEO', callback_data: 'dept_CEO' }
      ]
    ]
  };
  
  sendMessage(chatId, text, keyboard);
}

// üë• –í–ò–ë–Ü–† –ö–û–ú–ê–ù–î–ò
function showTeamSelection(chatId, telegramId, department) {
  let text = `<b>–ö—Ä–æ–∫ 4:</b> –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É –≤ ${department}:`;
  let keyboard = { inline_keyboard: [] };
  
  switch (department) {
    case 'Marketing':
      keyboard.inline_keyboard = [
        [{ text: 'PPC', callback_data: 'team_PPC' }],
        [{ text: 'Target - Kris team', callback_data: 'team_Target_Kris' }],
        [{ text: 'Target - Lera team', callback_data: 'team_Target_Lera' }]
      ];
      break;
      
    case 'Design':
      keyboard.inline_keyboard = [
        [{ text: 'Head + Motion (1 –æ—Å–æ–±–∞)', callback_data: 'team_Head_Motion' }],
        [{ text: 'Static', callback_data: 'team_Static' }],
        [{ text: 'Video', callback_data: 'team_Video' }],
        [{ text: 'SMM Design', callback_data: 'team_SMM_Design' }]
      ];
      break;
      
    case 'SMM':
      keyboard.inline_keyboard = [
        [{ text: 'Head', callback_data: 'team_SMM_Head' }],
        [{ text: 'Specialist', callback_data: 'team_SMM_Specialist' }],
        [{ text: 'Producer', callback_data: 'team_SMM_Producer' }],
        [{ text: 'PM SMM', callback_data: 'team_SMM_PM' }]
      ];
      break;
      
    default:
      // –î–ª—è HR, Sales, CEO - –Ω–µ–º–∞—î –ø—ñ–¥–∫–æ–º–∞–Ω–¥
      saveRegistrationStep(telegramId, 'position', { department: department, team: department });
      sendMessage(chatId, `‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: ${department}\n\n<b>–ö—Ä–æ–∫ 4:</b> –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É`);
      return;
  }
  
  keyboard.inline_keyboard.push([
    { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_department' }
  ]);
  
  sendMessage(chatId, text, keyboard);
  saveRegistrationStep(telegramId, 'team_selection', { department: department });
}

// üë• –û–ë–†–û–ë–ö–ê –í–ò–ë–û–†–£ –ö–û–ú–ê–ù–î–ò
function handleTeamSelection(chatId, telegramId, teamData) {
  try {
    const regData = getRegistrationData(telegramId);
    if (!regData) return;
    
    let team = teamData;
    let subteam = '';
    
    // –û–±—Ä–æ–±–∫–∞ —Å–∫–ª–∞–¥–Ω–∏—Ö –Ω–∞–∑–≤ –∫–æ–º–∞–Ω–¥
    if (teamData.includes('_')) {
      const parts = teamData.split('_');
      if (parts[0] === 'Target') {
        team = 'Target';
        subteam = parts[1] + ' team';
      } else if (parts[0] === 'Head') {
        team = 'Head + Motion';
        subteam = '';
      } else if (parts[0] === 'SMM') {
        team = 'SMM';
        subteam = parts[1];
      } else {
        team = parts.join(' ');
      }
    }
    
    saveRegistrationStep(telegramId, 'position', { 
      department: regData.department, 
      team: team,
      subteam: subteam
    });
    
    let confirmText = `‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç: ${regData.department}\n`;
    confirmText += `‚úÖ –ö–æ–º–∞–Ω–¥–∞: ${team}`;
    if (subteam) confirmText += ` / ${subteam}`;
    confirmText += `\n\n<b>–ö—Ä–æ–∫ 4:</b> –í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É`;
    
    sendMessage(chatId, confirmText);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ handleTeamSelection:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–∏–±–æ—Ä—É –∫–æ–º–∞–Ω–¥–∏.');
  }
}

// ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
function completeRegistration(chatId, telegramId) {
  try {
    const regData = getRegistrationData(telegramId);
    if (!regData) {
      sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
      return;
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—é
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    const sheet = ss.getSheetByName('Employees');
    
    const fullName = `${regData.surname} ${regData.name}`;
    const today = new Date();
    
    sheet.appendRow([
      fullName, telegramId, regData.username || '', regData.department, 
      regData.team, regData.subteam || '', regData.position, '',
      today, regData.birthday, '–ù–µ –≤–∫–∞–∑–∞–Ω–æ', '', '', 'Active'
    ]);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –±–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—É—Å—Ç–æ–∫
    const balanceSheet = ss.getSheetByName('VacationBalance');
    const currentYear = new Date().getFullYear();
    balanceSheet.appendRow([
      telegramId, currentYear, 24, 0, 24, false, 
      new Date(today.getTime() + 90 * 24 * 60 * 60 * 1000), // +3 –º—ñ—Å—è—Ü—ñ
      today
    ]);
    
    // –û—á–∏—â–∞—î–º–æ –∫–µ—à —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    const cache = CacheService.getScriptCache();
    cache.remove(`registration_${telegramId}`);
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è
    const role = getUserRole(telegramId);
    let welcomeText = `üéâ <b>–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä –º–∏ –∑–Ω–∞–π–æ–º—ñ —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ!</b>\n\n`;
    welcomeText += `üë§ ${fullName}\n`;
    welcomeText += `üè¢ ${regData.department}`;
    if (regData.team !== regData.department) welcomeText += ` / ${regData.team}`;
    welcomeText += `\nüíº ${regData.position}\n\n`;
    
    welcomeText += `ü§ñ <b>–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –º–æ—ó–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º:</b>\n\n`;
    
    // –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –æ–ø–∏—Å —Ñ—É–Ω–∫—Ü—ñ–π
    if (role === 'HR') {
      welcomeText += `üë• <b>–î–ª—è HR –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n`;
      welcomeText += `‚Ä¢ –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—Å—ñ–º–∞ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞–º–∏\n`;
      welcomeText += `‚Ä¢ –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤—ñ–¥–ø—É—Å—Ç–æ–∫ —Ç–∞ –∑–∞–ø–∏—Ç—ñ–≤\n`;
      welcomeText += `‚Ä¢ –ü–æ–≤–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏\n`;
      welcomeText += `‚Ä¢ –ú–∞—Å–æ–≤—ñ —Ä–æ–∑—Å–∏–ª–∫–∏\n`;
      welcomeText += `‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏\n`;
    } else if (role === 'CEO') {
      welcomeText += `üè¢ <b>–î–ª—è CEO –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n`;
      welcomeText += `‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞\n`;
      welcomeText += `‚Ä¢ KPI –¥–∞—à–±–æ—Ä–¥\n`;
      welcomeText += `‚Ä¢ –§—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∞–Ω–∞–ª—ñ–∑ HR –ø—Ä–æ—Ü–µ—Å—ñ–≤\n`;
      welcomeText += `‚Ä¢ –ü–æ–≤–Ω—ñ –∑–≤—ñ—Ç–∏ –ø–æ –∫–æ–º–ø–∞–Ω—ñ—ó\n`;
    } else if (role === 'PM') {
      welcomeText += `üë®‚Äçüíº <b>–î–ª—è PM –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n`;
      welcomeText += `‚Ä¢ –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–∏\n`;
      welcomeText += `‚Ä¢ –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –ø–æ –≤–∞—à—ñ–π –∫–æ–º–∞–Ω–¥—ñ\n`;
      welcomeText += `‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–µ–∫—Ç—ñ–≤\n`;
      welcomeText += `‚Ä¢ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö –∫–æ–º–∞–Ω–¥–∏\n`;
    } else {
      welcomeText += `üë§ <b>–î–ª—è –≤–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ:</b>\n`;
      welcomeText += `‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É\n`;
      welcomeText += `‚Ä¢ –§—ñ–∫—Å–∞—Ü—ñ—è remote –¥–Ω—ñ–≤ —Ç–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å\n`;
      welcomeText += `‚Ä¢ –õ—ñ–∫–∞—Ä–Ω—è–Ω—ñ\n`;
      welcomeText += `‚Ä¢ –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n`;
      welcomeText += `‚Ä¢ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó —Ç–∞ ASAP –∑–∞–ø–∏—Ç–∏\n`;
      welcomeText += `‚Ä¢ –®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–æ—Ä–∞–¥\n`;
    }
    
    welcomeText += `\nüöÄ –ì–æ—Ç–æ–≤–∏–π –ø–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É?`;
    
    const keyboard = {
      inline_keyboard: [
        [{ text: 'üöÄ –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', callback_data: 'main_menu' }]
      ]
    };
    
    sendMessage(chatId, welcomeText, keyboard);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR –ø—Ä–æ –Ω–æ–≤—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    const hrMessage = `üëã <b>–ù–æ–≤–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è!</b>\n\nüë§ ${fullName}\nüè¢ ${regData.department} / ${regData.team}\nüíº ${regData.position}\nüìÖ ${regData.birthday}`;
    sendMessage(HR_CHAT_ID, hrMessage);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ completeRegistration:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR.');
  }
}

// üìÖ –ü–ï–†–ï–í–Ü–†–ö–ê –î–ê–¢–ò
function isValidDate(dateString) {
  const regex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
  const match = dateString.match(regex);
  
  if (!match) return false;
  
  const day = parseInt(match[1]);
  const month = parseInt(match[2]);
  const year = parseInt(match[3]);
  
  if (month < 1 || month > 12) return false;
  if (day < 1 || day > 31) return false;
  if (year < 1950 || year > new Date().getFullYear()) return false;
  
  return true;
}

// üö® –û–ë–†–û–ë–ö–ê ASAP –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
function processASAPMessage(chatId, telegramId, message) {
  try {
    const user = getUserInfo(telegramId);
    const now = new Date();
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–∫—Ä–µ–º—É —Ç–∞–±–ª–∏—Ü—é –¥–ª—è ASAP)
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    let asapSheet = ss.getSheetByName('ASAP_Requests');
    
    if (!asapSheet) {
      asapSheet = ss.insertSheet('ASAP_Requests');
      asapSheet.getRange(1, 1, 1, 7).setValues([
        ['RequestID', 'TelegramID', 'FullName', 'Department', 'Team', 'Message', 'CreatedAt']
      ]);
    }
    
    const requestId = `ASAP_${Date.now()}`;
    asapSheet.appendRow([
      requestId, telegramId, user?.FullName, user?.Department, 
      user?.Team, message, now
    ]);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    sendMessage(chatId, `‚úÖ <b>ASAP –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>\n\nüìù –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:\n"${message}"\n\n‚è∞ HR –æ—Ç—Ä–∏–º–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ–≥–∞–π–Ω–æ.`);
    
    // –ù–µ–≥–∞–π–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR
    const hrMessage = `üö® <b>ASAP –ó–ê–ü–ò–¢</b>\n\nüë§ ${user?.FullName}\nüè¢ ${user?.Department} / ${user?.Team}\n\nüìù <b>–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:</b>\n${message}\n\n‚è∞ ${now.toLocaleString('uk-UA')}`;
    sendMessage(HR_CHAT_ID, hrMessage);
    
    // –û—á–∏—â–∞—î–º–æ –∫–µ—à
    const cache = CacheService.getScriptCache();
    cache.remove(`registration_${telegramId}`);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processASAPMessage:', error);
    sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ ASAP –∑–∞–ø–∏—Ç—É.');
  }
}

// üì§ –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
function sendMessage(chatId, text, keyboard = null) {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    const payload = {
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML'
    };
    
    if (keyboard) {
      payload.reply_markup = JSON.stringify(keyboard);
    }
    
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
    
    const result = JSON.parse(response.getContentText());
    if (!result.ok) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', result);
    }
    
    return result;
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ sendMessage:', error);
    logError('sendMessage', error.toString());
  }
}

// ‚úÖ –í–Ü–î–ü–û–í–Ü–î–¨ –ù–ê CALLBACK
function answerCallbackQuery(callbackId, text = '') {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`;
    const payload = {
      callback_query_id: callbackId,
      text: text
    };
    
    UrlFetchApp.fetch(url, {
      method: 'POST',
      contentType: 'application/json',
      payload: JSON.stringify(payload),
      muteHttpExceptions: true
    });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ answerCallbackQuery:', error);
  }
}

// üéØ –¢–ï–°–¢–û–í–Ü –î–ê–ù–Ü –ó –ü–†–ê–í–ò–õ–¨–ù–û–Æ –°–¢–†–£–ö–¢–£–†–û–Æ
function addTestData() {
  try {
    console.log('üéØ –î–æ–¥–∞—é —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é...');
    
    const ss = SpreadsheetApp.openById(SPREADSHEET_ID);
    
    // 1. –†–æ–ª—ñ
    const rolesSheet = ss.getSheetByName('Roles');
    if (rolesSheet && rolesSheet.getLastRow() <= 1) {
      const testRoles = [
        [HR_CHAT_ID, 'HR', 'HR', true],
        ['123456789', 'PM', 'Marketing', true],
        ['987654321', 'EMP', 'Marketing', false],
        ['555666777', 'CEO', 'Management', true]
      ];
      
      testRoles.forEach(role => {
        rolesSheet.appendRow(role);
      });
      console.log('‚úÖ –†–æ–ª—ñ –¥–æ–¥–∞–Ω–æ');
    }
    
    // 2. –ö–æ–º–∞–Ω–¥–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é
    const teamsSheet = ss.getSheetByName('Teams');
    if (teamsSheet && teamsSheet.getLastRow() <= 1) {
      const testTeams = [
        ['Marketing', 'PPC', '', '123456789', '123456789'],
        ['Marketing', 'Target', 'Kris team', '111222333', '111222333'],
        ['Marketing', 'Target', 'Lera team', '444555666', '444555666'],
        ['Design', 'Creative', '', '777888999', '777888999'],
        ['SMM', 'Content', '', '101112131', '101112131'],
        ['Sales', 'Communication', '', '202122232', '202122232']
      ];
      
      testTeams.forEach(team => {
        teamsSheet.appendRow(team);
      });
      console.log('‚úÖ –ö–æ–º–∞–Ω–¥–∏ –¥–æ–¥–∞–Ω–æ');
    }
    
    // 3. –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –ø–æ–ª—è–º–∏
    const empSheet = ss.getSheetByName('Employees');
    if (empSheet && empSheet.getLastRow() <= 1) {
      const testEmployees = [
        ['–ê–ª—å–æ–Ω–∞ HR', HR_CHAT_ID, 'Alona_HR_LD', 'HR', '', '', 'HR Manager', '', '2023-01-15', '1990-05-15', '–ì—ñ–±—Ä–∏–¥', 'hr@lyudi.digital', '+380501234567', 'Active'],
        ['–¢–µ—Å—Ç–æ–≤–∏–π PM', '123456789', 'test_pm', 'Marketing', 'PPC', '', 'PM PPC', HR_CHAT_ID, '2023-02-01', '1985-03-20', '–û—Ñ–ª–∞–π–Ω', 'pm@test.com', '+380507654321', 'Active'],
        ['–¢–µ—Å—Ç–æ–≤–∏–π Employee', '987654321', 'test_emp', 'Marketing', 'Target', 'Kris team', 'Targetologist', '123456789', '2023-03-01', '1992-07-10', '–û–Ω–ª–∞–π–Ω', 'emp@test.com', '+380509876543', 'Active']
      ];
      
      testEmployees.forEach(emp => {
        empSheet.appendRow(emp);
      });
      console.log('‚úÖ –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏ –¥–æ–¥–∞–Ω–æ');
    }
    
    // 4. –ë–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—É—Å—Ç–æ–∫
    const balanceSheet = ss.getSheetByName('VacationBalance');
    if (balanceSheet && balanceSheet.getLastRow() <= 1) {
      const currentYear = new Date().getFullYear();
      const testBalances = [
        [HR_CHAT_ID, currentYear, 24, 0, 24, true, new Date('2023-04-15'), new Date()],
        ['123456789', currentYear, 24, 3, 21, true, new Date('2023-05-01'), new Date()],
        ['987654321', currentYear, 24, 0, 24, true, new Date('2023-06-01'), new Date()]
      ];
      
      testBalances.forEach(balance => {
        balanceSheet.appendRow(balance);
      });
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å–∏ –≤—ñ–¥–ø—É—Å—Ç–æ–∫ –¥–æ–¥–∞–Ω–æ');
    }
    
    // 5. FAQ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏
    const faqSheet = ss.getSheetByName('HRFAQ');
    if (faqSheet && faqSheet.getLastRow() <= 1) {
      const testFAQ = [
        ['vacation', '–°–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –≤ —Ä—ñ–∫?', '24 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ñ –¥–Ω—ñ –∑–≥—ñ–¥–Ω–æ –∑ —Ç—Ä—É–¥–æ–≤–∏–º –∑–∞–∫–æ–Ω–æ–¥–∞–≤—Å—Ç–≤–æ–º –£–∫—Ä–∞—ó–Ω–∏.', true],
        ['vacation', '–°–∫—ñ–ª—å–∫–∏ –º–∞–∫—Å–∏–º—É–º –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –∑–∞ —Ä–∞–∑?', '–ù–µ –±—ñ–ª—å—à–µ 7 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω–∏—Ö –¥–Ω—ñ–≤ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑. –¶–µ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä—ñ–≤–Ω–æ–º—ñ—Ä–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –∫–æ–º–∞–Ω–¥—ñ.', true],
        ['vacation', '–ö–æ–ª–∏ –º–æ–∂–Ω–∞ –±—Ä–∞—Ç–∏ –ø–µ—Ä—à—É –≤—ñ–¥–ø—É—Å—Ç–∫—É?', '–ß–µ—Ä–µ–∑ 3 –º—ñ—Å—è—Ü—ñ –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏. –î–æ —Ü—å–æ–≥–æ —á–∞—Å—É –¥–Ω—ñ –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –Ω–∞–∫–æ–ø–∏—á—É—é—Ç—å—Å—è.', true],
        ['vacation', '–ß–∏ –º–æ–∂—É—Ç—å –¥–≤–æ—î –∑ –∫–æ–º–∞–Ω–¥–∏ –±—Ä–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫—É –æ–¥–Ω–æ—á–∞—Å–Ω–æ?', '–ù—ñ, –Ω–∞–≤—ñ—Ç—å –æ–¥–∏–Ω –¥–µ–Ω—å –ø–µ—Ä–µ—Ç–∏–Ω—É –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–∏–π –≤ –º–µ–∂–∞—Ö –æ–¥–Ω—ñ—î—ó –ø—ñ–¥–∫–æ–º–∞–Ω–¥–∏.', true],
        ['remote', '–Ø–∫ –æ—Ñ–æ—Ä–º–∏—Ç–∏ remote –¥–µ–Ω—å?', '–ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –¥–æ 10:30. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª—è—é—Ç—å—Å—è HR —Ç–∞ PM.', true],
        ['remote', '–°–∫—ñ–ª—å–∫–∏ remote –¥–Ω—ñ–≤ –º–æ–∂–Ω–∞ –Ω–∞ –º—ñ—Å—è—Ü—å?', '–î–ª—è –æ–Ω–ª–∞–π–Ω —Ñ–æ—Ä–º–∞—Ç—É - –±–µ–∑–ª—ñ–º—ñ—Ç–Ω–æ. –î–ª—è –æ—Ñ–ª–∞–π–Ω/–≥—ñ–±—Ä–∏–¥ - –¥–æ 14 –¥–Ω—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å.', true],
        ['late', '–ó –∫–æ—Ç—Ä–æ—ó –≥–æ–¥–∏–Ω–∏ –≤–≤–∞–∂–∞—î—Ç—å—Å—è —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è?', '–ó 10:21. –†–æ–±–æ—á–∏–π –¥–µ–Ω—å –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –æ 10:00.', true],
        ['late', '–°–∫—ñ–ª—å–∫–∏ —Å–ø—ñ–∑–Ω–µ–Ω—å –¥–æ–ø—É—Å—Ç–∏–º–æ?', '–î–æ 7 —Ä–∞–∑—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å. –ü—Ä–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—ñ - –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è.', true],
        ['sick', '–Ø–∫ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ö–≤–æ—Ä–æ–±—É?', '–ß–µ—Ä–µ–∑ –±–æ—Ç –≤ —Ä–æ–∑–¥—ñ–ª—ñ "–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π". HR —Ç–∞ PM –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –æ—Ç—Ä–∏–º–∞—é—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.', true],
        ['sick', '–ß–∏ —î –ª—ñ–º—ñ—Ç –Ω–∞ –ª—ñ–∫–∞—Ä–Ω—è–Ω—ñ –¥–Ω—ñ?', '–ù—ñ, –ª—ñ–º—ñ—Ç—ñ–≤ –Ω–µ–º–∞—î. –ì–æ–ª–æ–≤–Ω–µ - —Å–≤–æ—î—á–∞—Å–Ω–æ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Ö–≤–æ—Ä–æ–±—É.', true]
      ];
      
      testFAQ.forEach(faq => {
        faqSheet.appendRow(faq);
      });
      console.log('‚úÖ FAQ –¥–æ–¥–∞–Ω–æ');
    }
    
    console.log('‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–æ—é –¥–æ–¥–∞–Ω–æ!');
    return '–¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!';
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö:', error);
    return `–ü–æ–º–∏–ª–∫–∞: ${error.toString()}`;
  }
}

// üîß –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø WEBHOOK
function setWebhook() {
  const webAppUrl = 'YOUR_WEBAPP_URL_HERE'; // –ó–ê–ú–Ü–ù–Ü–¢–¨ –ù–ê –í–ê–® URL –ó DEPLOYMENT
  
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/setWebhook`;
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      contentType: 'application/json',
      payload: JSON.stringify({
        url: webAppUrl
      })
    });
    
    console.log('‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', response.getContentText());
    return response.getContentText();
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook:', error);
    return `–ü–æ–º–∏–ª–∫–∞: ${error.toString()}`;
  }
}

// üóëÔ∏è –í–ò–î–ê–õ–ï–ù–ù–Ø WEBHOOK
function deleteWebhook() {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/deleteWebhook`;
    const response = UrlFetchApp.fetch(url, {
      method: 'POST',
      contentType: 'application/json'
    });
    
    console.log('üóëÔ∏è Webhook –≤–∏–¥–∞–ª–µ–Ω–æ:', response.getContentText());
    return response.getContentText();
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è webhook:', error);
    return `–ü–æ–º–∏–ª–∫–∞: ${error.toString()}`;
  }
}

// ‚ÑπÔ∏è –°–¢–ê–¢–£–° WEBHOOK
function checkWebhookStatus() {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/getWebhookInfo`;
    const response = UrlFetchApp.fetch(url);
    const result = JSON.parse(response.getContentText());
    
    console.log('‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å webhook:', result);
    return result;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ webhook:', error);
    return `–ü–æ–º–∏–ª–∫–∞: ${error.toString()}`;
  }
}

// üß™ –¢–ï–°–¢–£–í–ê–ù–ù–Ø –°–ò–°–¢–ï–ú–ò
function testCompleteSystem() {
  console.log('üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–æ–≤–Ω–æ—ó HR —Å–∏—Å—Ç–µ–º–∏...');
  
  try {
    // –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const testResult = sendMessage(HR_CHAT_ID, 'üöÄ –§—ñ–Ω–∞–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è HR –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–∞!\n\n‚úÖ –í—Å—ñ –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ —ñ–º–ø–ª–µ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ\n‚ö° –®–≤–∏–¥–∫—ñ—Å—Ç—å –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ\nüõ°Ô∏è –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –ø—Ä–∞—Ü—é—î');
    console.log('‚úÖ –¢–µ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ–π–¥–µ–Ω–æ');
    
    return '–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!';
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', error);
    return `–ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ${error.toString()}`;
  }
}
