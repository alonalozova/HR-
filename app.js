/**
 * üè¢ HR –ë–û–¢ - –ú–û–î–£–õ–¨–ù–ê –í–ï–†–°–Ü–Ø
 * –ö–æ–º–µ—Ä—Ü—ñ–π–Ω–∏–π HR –±–æ—Ç –∑ –º–æ–¥—É–ª—å–Ω–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 * Railway Deployment Ready
 */

require('dotenv').config();
const express = require('express');

// –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤
const TelegramService = require('./services/telegram.service');
const SheetsService = require('./services/sheets.service');
const BulkService = require('./services/bulk.service');

// –Ü–º–ø–æ—Ä—Ç —É—Ç–∏–ª—ñ—Ç
const { logger } = require('./utils/errors');
const { userCache, registrationCache, processedUpdates } = require('./utils/cache');

// ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const HR_CHAT_ID = process.env.HR_CHAT_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

if (!BOT_TOKEN) {
  logger.error('BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  process.exit(1);
}

// –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
if (!SPREADSHEET_ID) logger.warn('SPREADSHEET_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
if (!HR_CHAT_ID) {
  logger.warn('HR_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
  logger.warn('–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å HR_CHAT_ID –≤ Railway');
} else {
  logger.success('HR_CHAT_ID –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ', { HR_CHAT_ID });
}

// ü§ñ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –°–ï–†–í–Ü–°–Ü–í
const telegramService = new TelegramService(BOT_TOKEN);
const sheetsService = new SheetsService();
const bulkService = new BulkService(sheetsService);

// üöÄ EXPRESS APP
const app = express();
app.use(express.json());

// Health check endpoints
app.get('/', (req, res) => {
  res.status(200).json({
    status: 'OK',
    message: 'HR Bot Ultimate is running',
    timestamp: new Date().toISOString(),
    port: PORT,
    version: '2.0.0-modular'
  });
});

app.get('/health', (req, res) => {
  res.status(200).json({
    status: 'healthy',
    uptime: process.uptime(),
    memory: process.memoryUsage(),
    timestamp: new Date().toISOString(),
    services: {
      telegram: 'active',
      sheets: sheetsService.isInitialized ? 'active' : 'inactive',
      bulk: 'active'
    }
  });
});

// Bulk –æ–ø–µ—Ä–∞—Ü—ñ—ó endpoint –¥–ª—è HR –ø–∞–Ω–µ–ª—ñ
app.get('/api/stats/:year/:month', async (req, res) => {
  try {
    const { year, month } = req.params;
    const stats = await bulkService.getMonthlyStats(parseInt(month), parseInt(year));
    res.json(stats);
  } catch (error) {
    logger.error('Error getting monthly stats', error);
    res.status(500).json({ error: 'Failed to get monthly stats' });
  }
});

// –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É endpoint
app.post('/api/cache/clear', (req, res) => {
  try {
    bulkService.clearAllCache();
    res.json({ message: 'Cache cleared successfully' });
  } catch (error) {
    logger.error('Error clearing cache', error);
    res.status(500).json({ error: 'Failed to clear cache' });
  }
});

// Webhook endpoint
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    
    // –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    if (processedUpdates.has(update.update_id)) {
      return res.status(200).json({ status: 'duplicate' });
    }
    
    processedUpdates.set(update.update_id, true);
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    if (update.message) {
      await handleMessage(update.message);
    } else if (update.callback_query) {
      await handleCallback(update.callback_query);
    }
    
    res.status(200).json({ status: 'processed' });
  } catch (error) {
    logger.error('Webhook error', error);
    res.status(500).json({ status: 'error' });
  }
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async function handleMessage(message) {
  try {
    const chatId = message.chat.id;
    const telegramId = message.from.id;
    const text = message.text;

    logger.info('Processing message', { chatId, telegramId, text });

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥
    if (text === '/start') {
      await showWelcomeMessage(chatId, telegramId);
      return;
    }

    // –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫
    if (await handleVacationProcess(chatId, telegramId, text)) {
      return;
    }

    // –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if (registrationCache.has(telegramId)) {
      await handleRegistrationStep(chatId, telegramId, text);
      return;
    }

    await telegramService.sendMessage(chatId, '‚ùì –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.');

  } catch (error) {
    logger.error('Error handling message', error, { chatId: message.chat.id });
  }
}

// –û–±—Ä–æ–±–∫–∞ callback –∫–Ω–æ–ø–æ–∫
async function handleCallback(callbackQuery) {
  try {
    const chatId = callbackQuery.message.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;

    logger.info('Processing callback', { chatId, telegramId, data });

    // –û–±—Ä–æ–±–∫–∞ —Ä—ñ–∑–Ω–∏—Ö callback'—ñ–≤
    if (data === 'vacation_menu') {
      await showVacationMenu(chatId, telegramId);
    } else if (data === 'vacation_apply') {
      await showVacationForm(chatId, telegramId);
    }
    // –î–æ–¥–∞—Ç–∏ —ñ–Ω—à—ñ callback'–∏...

    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è callback
    await telegramService.bot.answerCallbackQuery(callbackQuery.id);

  } catch (error) {
    logger.error('Error handling callback', error, { chatId: callbackQuery.message?.chat?.id });
  }
}

// –ü—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async function showWelcomeMessage(chatId, telegramId) {
  const text = `üéâ <b>–ü—Ä–∏–≤—ñ—Ç –∑—ñ—Ä–æ—á–∫–∞!</b> 

–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ç–≤–æ—ó–º HR. –í–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –º–µ–Ω–µ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏. –Ø —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —Ç–æ–±—ñ –≤ –Ω–∞–≥–æ–¥—ñ.

–ü–æ—á–Ω—É –∑ —Ç–æ–≥–æ, —â–æ –ø—Ä–æ—à—É —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–∏ –Ω–∞–¥–∞–ª—ñ —è –º—ñ–≥ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ.`;

  const keyboard = [
    [{ text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'vacation_menu' }],
    [{ text: 'üè† Remote', callback_data: 'remote_menu' }],
    [{ text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_menu' }],
    [{ text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_menu' }]
  ];

  await telegramService.sendReplyKeyboard(chatId, text, keyboard);
}

// –ú–µ–Ω—é –≤—ñ–¥–ø—É—Å—Ç–æ–∫
async function showVacationMenu(chatId, telegramId) {
  const text = `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏</b>

–í–∞—à –±–∞–ª–∞–Ω—Å: 0/24 –¥–Ω—ñ–≤
–î–æ—Å—Ç—É–ø–Ω–æ: 24 –¥–Ω—ñ–≤

<b>–ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫:</b>
‚Ä¢ –ú—ñ–Ω: 1 –¥–µ–Ω—å, –ú–∞–∫—Å: 7 –¥–Ω—ñ–≤ –∑–∞ —Ä–∞–∑
‚Ä¢ 3 –º—ñ—Å—è—Ü—ñ –¥–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø—É—Å—Ç–∫–∏  
‚Ä¢ –ù–∞–∫–ª–∞–¥–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –≤ –∫–æ–º–∞–Ω–¥—ñ
‚Ä¢ –ü—Ä–æ—Ü–µ—Å: –í–∏ ‚Üí PM ‚Üí HR

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É', callback_data: 'vacation_apply' }],
      [{ text: 'üö® –ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞', callback_data: 'vacation_emergency' }],
      [{ text: 'üìÑ –ú–æ—ó –∑–∞—è–≤–∫–∏', callback_data: 'vacation_my_requests' }],
      [{ text: 'üìä –ë–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª—ñ', callback_data: 'vacation_balance' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]
    ]
  };

  await telegramService.sendInlineKeyboard(chatId, text, keyboard.inline_keyboard);
}

// –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É
async function showVacationForm(chatId, telegramId) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    const user = await getUserInfo(telegramId);
    if (!user) {
      await telegramService.sendMessage(chatId, '‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.');
      return;
    }

    const text = `üìù <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É</b>

üë§ <b>–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫:</b> ${user.fullName}
üè¢ <b>–í—ñ–¥–¥—ñ–ª:</b> ${user.department}
üë• <b>–ö–æ–º–∞–Ω–¥–∞:</b> ${user.team}

<b>–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫–∏:</b>

üìÖ <b>–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É</b> (–î–î.–ú–ú.–†–†–†–†):`;

    // –ó–±–µ—Ä–µ–∂–µ–º–æ —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏
    registrationCache.set(telegramId, {
      step: 'vacation_start_date',
      data: { type: 'vacation' }
    });

    await telegramService.sendMessage(chatId, text);
  } catch (error) {
    logger.error('Error showing vacation form', error, { telegramId });
    await telegramService.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–æ—Ä–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø—Ä–æ—Ü–µ—Å—É –≤—ñ–¥–ø—É—Å—Ç–æ–∫
async function handleVacationProcess(chatId, telegramId, text) {
  try {
    const regData = registrationCache.get(telegramId);
    if (!regData) return false;

    if (regData.step === 'vacation_start_date') {
      const { validateDate } = require('./utils/validation');
      
      try {
        const startDate = validateDate(text);
        regData.data.startDate = startDate;
        regData.step = 'vacation_days';
        
        await telegramService.sendMessage(chatId, `üìÖ <b>–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É:</b> ${text}\n\nüìä <b>–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏</b>\n\n–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ (1-7):`);
        return true;
      } catch (error) {
        await telegramService.sendMessage(chatId, `‚ùå ${error.message}`);
        return true;
      }
    }

    if (regData.step === 'vacation_days') {
      const { validateVacationDays } = require('./utils/validation');
      
      try {
        const days = validateVacationDays(text);
        regData.data.days = days;
        
        await processVacationRequest(chatId, telegramId, regData.data);
        registrationCache.delete(telegramId);
        return true;
      } catch (error) {
        await telegramService.sendMessage(chatId, `‚ùå ${error.message}`);
        return true;
      }
    }

    return false;
  } catch (error) {
    logger.error('Error in vacation process', error, { telegramId });
    return false;
  }
}

// –û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É
async function processVacationRequest(chatId, telegramId, vacationData) {
  try {
    logger.info('Processing vacation request', { telegramId, vacationData });
    
    const user = await getUserInfo(telegramId);
    if (!user) {
      const { ValidationError } = require('./utils/errors');
      throw new ValidationError('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.', 'user');
    }
    
    const { startDate, days } = vacationData;
    const endDate = new Date(startDate);
    endDate.setDate(endDate.getDate() + days - 1);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä–µ—Ç–∏–Ω–∏
    const conflicts = await checkVacationConflicts(user.department, user.team, startDate, endDate, telegramId);
    
    if (conflicts.length > 0) {
      let conflictMessage = '‚ö†Ô∏è <b>–£–ø—Å, —Ç–≤–æ—è –≤—ñ–¥–ø—É—Å—Ç–∫–∞ –ø–µ—Ä–µ—Å—ñ–∫–∞—î—Ç—å—Å—è –∑ –õ—é–¥–∏–Ω–∫–æ—é –∑ —Ç–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏:</b>\n\n';
      conflicts.forEach(conflict => {
        conflictMessage += `üë§ ${conflict.fullName} (${conflict.department}/${conflict.team})\n`;
        conflictMessage += `üìÖ ${conflict.startDate} - ${conflict.endDate}\n\n`;
      });
      conflictMessage += '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ –¥–∞—Ç–∏.';
      
      await telegramService.sendMessage(chatId, conflictMessage);
      return;
    }
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞—è–≤–∫—É
    const requestId = await saveVacationRequest(telegramId, user, startDate, endDate, days);
    
    // –í—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    const { formatDate } = require('./utils/validation');
    await telegramService.sendMessage(chatId, `‚úÖ <b>–°—É–ø–µ—Ä, —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –¥–∞–ª—ñ!</b>\n\nüìÖ <b>–ü–µ—Ä—ñ–æ–¥:</b> ${formatDate(startDate)} - ${formatDate(endDate)}\nüìä <b>–î–Ω—ñ–≤:</b> ${days}\nüë§ <b>PM:</b> ${user.pm || '–ù–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ'}\n\n‚è≥ –ó–∞—è–≤–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è PM, –ø—ñ—Å–ª—è —á–æ–≥–æ –ø–µ—Ä–µ–π–¥–µ –¥–æ HR.`);
    
  } catch (error) {
    const { ValidationError, DatabaseError, TelegramError } = require('./utils/errors');
    
    if (error instanceof ValidationError) {
      logger.warn('Validation error in vacation request', { telegramId, error: error.message });
      await telegramService.sendMessage(chatId, `‚ùå ${error.message}`);
    } else if (error instanceof DatabaseError) {
      logger.error('Database error in vacation request', error, { telegramId });
      await telegramService.sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR.');
    } else if (error instanceof TelegramError) {
      logger.error('Telegram error in vacation request', error, { telegramId });
    } else {
      logger.error('Unexpected error in vacation request', error, { telegramId });
      try {
        await telegramService.sendMessage(chatId, '‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR.');
      } catch (sendError) {
        logger.error('Failed to send error message', sendError, { telegramId });
      }
    }
  }
}

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –∑ bulk –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏)
async function getUserInfo(telegramId) {
  try {
    if (userCache.has(telegramId)) {
      return userCache.get(telegramId);
    }

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bulk —Å–µ—Ä–≤—ñ—Å –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    const usersMap = await bulkService.getUsersInfo([telegramId]);
    const user = usersMap.get(telegramId);
    
    if (user) {
      userCache.set(telegramId, user);
      return user;
    }

    // Fallback –¥–ª—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    const testUser = {
      telegramId: telegramId,
      fullName: '–¢–µ—Å—Ç–æ–≤–∏–π –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
      department: 'HR',
      team: 'HR',
      pm: '–¢–µ—Å—Ç–æ–≤–∏–π PM'
    };

    userCache.set(telegramId, testUser);
    return testUser;
  } catch (error) {
    logger.error('Error getting user info', error, { telegramId });
    return null;
  }
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–µ—Ä–µ—Ç–∏–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–æ–∫ (–æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–æ –∑ bulk –æ–ø–µ—Ä–∞—Ü—ñ—è–º–∏)
async function checkVacationConflicts(department, team, startDate, endDate, excludeUserId = null) {
  try {
    return await bulkService.getVacationConflicts(department, team, startDate, endDate, excludeUserId);
  } catch (error) {
    logger.error('Error checking vacation conflicts', error);
    return [];
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É
async function saveVacationRequest(telegramId, user, startDate, endDate, days) {
  try {
    // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
    const requestId = `REQ_${Date.now()}_${telegramId}`;
    logger.info('Vacation request saved', { requestId, telegramId });
    return requestId;
  } catch (error) {
    const { DatabaseError } = require('./utils/errors');
    throw new DatabaseError('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É');
  }
}

// –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–∑–∞–≥–ª—É—à–∫–∞)
async function handleRegistrationStep(chatId, telegramId, text) {
  // –¢—É—Ç –±—É–¥–µ –ª–æ–≥—ñ–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
  logger.info('Registration step', { telegramId, text });
}

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
async function startServer() {
  try {
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –ù–ï–ë–õ–û–ö–£–Æ–ß–û
    const server = app.listen(PORT, '0.0.0.0', () => {
      logger.success('HR Bot Ultimate –∑–∞–ø—É—â–µ–Ω–æ', { port: PORT });
      logger.info('Health check available', { url: `http://localhost:${PORT}/` });
    });
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
    server.on('error', (error) => {
      logger.error('Server error', error);
    });
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets –≤ —Ñ–æ–Ω—ñ (–Ω–µ–±–ª–æ–∫—É—é—á–µ)
    sheetsService.initialize().catch(error => {
      logger.error('Google Sheets initialization failed', error);
      logger.info('Retrying in 30 seconds...');
      setTimeout(() => sheetsService.initialize(), 30000);
    });
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook –≤ —Ñ–æ–Ω—ñ (–Ω–µ–±–ª–æ–∫—É—é—á–µ)
    if (WEBHOOK_URL) {
      telegramService.setWebhook(`${WEBHOOK_URL}/webhook`)
        .catch(error => logger.error('Webhook setup failed', error));
    } else {
      logger.warn('WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
  } catch (error) {
    logger.error('Server startup error', error);
  }
}

// ‚úÖ –ì–õ–û–ë–ê–õ–¨–ù–ê –û–ë–†–û–ë–ö–ê –ü–û–ú–ò–õ–û–ö
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled Promise Rejection', reason, { 
    promise: promise.toString(),
    stack: reason?.stack 
  });
});

process.on('uncaughtException', (error) => {
  logger.error('Uncaught Exception - Critical Error', error, {
    stack: error.stack,
    memory: process.memoryUsage()
  });
  
  setTimeout(() => {
    process.exit(1);
  }, 1000);
});

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ Express
app.use((error, req, res, next) => {
  logger.error('Express error', error, {
    url: req.url,
    method: req.method,
    body: req.body
  });
  
  res.status(500).json({
    error: 'Internal Server Error',
    timestamp: new Date().toISOString()
  });
});

// –ó–∞–ø—É—Å–∫
startServer();

logger.success('HR Bot Ultimate modular server started successfully');
