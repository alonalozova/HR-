/**
 * üè¢ HR –ë–û–¢ - –ü–û–í–ù–ê –ö–û–ú–ï–†–¶–Ü–ô–ù–ê –í–ï–†–°–Ü–Ø
 * –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –∑–≥—ñ–¥–Ω–æ –∑ –¥–µ—Ç–∞–ª—å–Ω–∏–º–∏ –≤–∏–º–æ–≥–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * Railway Deployment Ready
 */

require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const HR_CHAT_ID = process.env.HR_CHAT_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

if (!BOT_TOKEN) {
  console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π BOT_TOKEN!');
  process.exit(1);
}

// –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
if (!SPREADSHEET_ID) console.warn('‚ö†Ô∏è SPREADSHEET_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
if (!HR_CHAT_ID) console.warn('‚ö†Ô∏è HR_CHAT_ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

// ü§ñ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
const bot = new TelegramBot(BOT_TOKEN);
const app = express();
let doc;

// üõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
const processedUpdates = new Set();
setInterval(() => processedUpdates.clear(), 5 * 60 * 1000);

// üíæ –ö–ï–® –î–õ–Ø –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á
const userCache = new Map();
const registrationCache = new Map();

// üèóÔ∏è –°–¢–†–£–ö–¢–£–†–ê –ö–û–ú–ê–ù–î–ò
const DEPARTMENTS = {
  'Marketing': {
    'PPC': ['PPC', 'PM PPC'],
    'Target': {
      'Kris team': ['Team lead', 'PM target'],
      'Lera team': ['Team lead', 'PM target']
    }
  },
  'Design': {
    'Head of Design': ['Head of Design'],
    'Motion Designer': ['Motion Designer'],
    'Static designer': ['Static designer'],
    'Video designer': ['Video designer'],
    'SMM designer': ['SMM designer']
  },
  'SMM': {
    'Head of SMM': ['Head of SMM'],
    'SMM specialist': ['SMM specialist'],
    'Producer': ['Producer'],
    'PM': ['PM']
  },
  'Sales and communication': {
    'Sales and communication manager': ['Sales and communication manager']
  },
  'HR': {
    'HR': ['HR']
  },
  'CEO': {
    'CEO': ['CEO']
  }
};

// üìä –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø GOOGLE SHEETS
async function initGoogleSheets() {
  try {
    if (!SPREADSHEET_ID || !process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || !process.env.GOOGLE_PRIVATE_KEY) {
      console.warn('‚ö†Ô∏è Google Sheets credentials –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return false;
    }
    
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
    await doc.loadInfo();
    console.log('‚úÖ Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', doc.title);
    return true;
  } catch (error) {
    console.warn('‚ö†Ô∏è Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ:', error.message);
    doc = null;
    return false;
  }
}

// üöÄ EXPRESS
app.use(express.json());

// Health check endpoints
app.get('/', (req, res) => {
  res.status(200).json({
    status: 'OK',
    message: 'HR Bot Ultimate is running',
    timestamp: new Date().toISOString(),
    version: '3.0.0-ultimate',
    sheets_connected: doc ? true : false,
    uptime: process.uptime()
  });
});

app.get('/health', (req, res) => {
  res.status(200).json({ status: 'healthy' });
});

// Webhook endpoint
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    
    if (!update || processedUpdates.has(update.update_id)) {
      return res.status(200).send('OK');
    }
    
    processedUpdates.add(update.update_id);
    
    if (update.message) {
      await processMessage(update.message);
    } else if (update.callback_query) {
      await processCallback(update.callback_query);
    }
    
    res.status(200).send('OK');
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    res.status(500).send('Error');
  }
});

// üì® –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
async function processMessage(message) {
  try {
    const chatId = message.chat.id;
    const text = message.text;
    const telegramId = message.from.id;
    const username = message.from.username;
    const firstName = message.from.first_name;
    const lastName = message.from.last_name;
    
    console.log(`üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${telegramId}: ${text}`);
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—é–≤–∞–Ω–Ω—è
    const messageKey = `${telegramId}_${text}_${Date.now()}`;
    if (processedUpdates.has(messageKey)) return;
    processedUpdates.add(messageKey);
    
    if (text === '/start') {
      const user = await getUserInfo(telegramId);
      if (!user) {
        await startRegistration(chatId, telegramId, username, firstName, lastName);
      } else {
        await showMainMenu(chatId, telegramId);
      }
      return;
    }
    
    // –û–±—Ä–æ–±–∫–∞ Reply Keyboard –∫–Ω–æ–ø–æ–∫
    if (await handleReplyKeyboard(chatId, telegramId, text)) {
      return;
    }
    
    // –û–±—Ä–æ–±–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    if (registrationCache.has(telegramId)) {
      await handleRegistrationStep(chatId, telegramId, text);
      return;
    }
    
    await sendMessage(chatId, '‚ùì –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ.');
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ processMessage:', error);
  }
}

// üîò –û–ë–†–û–ë–ö–ê CALLBACK QUERY
async function processCallback(callbackQuery) {
  try {
    const chatId = callbackQuery.message.chat.id;
    const telegramId = callbackQuery.from.id;
    const data = callbackQuery.data;
    
    console.log(`üéõÔ∏è Callback –≤—ñ–¥ ${telegramId}: ${data}`);
    
    await bot.answerCallbackQuery(callbackQuery.id);
    
    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è callback'—ñ–≤
    const routes = {
      'vacation_apply': () => showVacationForm(chatId, telegramId),
      'vacation_balance': () => showVacationBalance(chatId, telegramId),
      'vacation_requests': () => showMyVacationRequests(chatId, telegramId),
      'vacation_emergency': () => showEmergencyVacationForm(chatId, telegramId),
      'remote_today': () => setRemoteToday(chatId, telegramId),
      'remote_calendar': () => showRemoteCalendar(chatId, telegramId),
      'remote_stats': () => showRemoteStats(chatId, telegramId),
      'late_report': () => reportLate(chatId, telegramId),
      'late_stats': () => showLateStats(chatId, telegramId),
      'sick_report': () => reportSick(chatId, telegramId),
      'sick_stats': () => showSickStats(chatId, telegramId),
      'stats_monthly': () => showMonthlyStats(chatId, telegramId),
      'stats_export': () => exportMyData(chatId, telegramId),
      'onboarding_new': () => showNewEmployeeMenu(chatId, telegramId),
      'onboarding_notion': () => showNotionLink(chatId, telegramId),
      'onboarding_quiz': () => showOnboardingQuiz(chatId, telegramId),
      'suggestions_anonymous': () => showAnonymousSuggestionsForm(chatId, telegramId),
      'suggestions_named': () => showNamedSuggestionsForm(chatId, telegramId),
      'suggestions_view': () => showMySuggestions(chatId, telegramId),
      'asap_form': () => showASAPForm(chatId, telegramId),
      'faq_category': () => showFAQCategory(chatId, telegramId),
      'ai_question': () => showAIQuestion(chatId, telegramId),
      'ai_advice': () => showAIAdvice(chatId, telegramId),
      'approvals_vacations': () => showApprovalVacations(chatId, telegramId),
      'approvals_remote': () => showApprovalRemote(chatId, telegramId),
      'analytics_hr': () => showHRAnalytics(chatId, telegramId),
      'analytics_ceo': () => showCEOAnalytics(chatId, telegramId),
      'back_to_main': () => showMainMenu(chatId, telegramId)
    };
    
    if (routes[data]) {
      await routes[data]();
    } else if (data.startsWith('department_')) {
      const department = data.replace('department_', '');
      await handleDepartmentSelection(chatId, telegramId, department);
    } else if (data.startsWith('team_')) {
      const team = data.replace('team_', '');
      await handleTeamSelection(chatId, telegramId, team);
    } else if (data.startsWith('position_')) {
      const position = data.replace('position_', '');
      await handlePositionSelection(chatId, telegramId, position);
    } else if (data.startsWith('faq_')) {
      const faqId = data.replace('faq_', '');
      await showFAQAnswer(chatId, telegramId, faqId);
    }
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ processCallback:', error);
  }
}

// üì§ –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const options = { parse_mode: 'HTML' };
    if (keyboard) {
      if (keyboard.inline_keyboard) {
        options.reply_markup = keyboard;
      } else {
        options.reply_markup = { keyboard: keyboard, resize_keyboard: true };
      }
    }
    await bot.sendMessage(chatId, text, options);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ sendMessage:', error);
  }
}

// üë§ –û–¢–†–ò–ú–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê
async function getUserInfo(telegramId) {
  try {
    if (userCache.has(telegramId)) {
      const cached = userCache.get(telegramId);
      if (Date.now() - cached.timestamp < 5 * 60 * 1000) {
        return cached.data;
      }
    }
    
    if (!doc) return null;
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Employees'];
    if (!sheet) return null;
    
    const rows = await sheet.getRows();
    const user = rows.find(row => row.get('TelegramID') == telegramId);
    
    if (user) {
      const userData = {
        fullName: user.get('FullName'),
        department: user.get('Department'),
        team: user.get('Team'),
        position: user.get('Position'),
        birthDate: user.get('BirthDate'),
        firstWorkDay: user.get('FirstWorkDay'),
        workMode: user.get('WorkMode')
      };
      
      userCache.set(telegramId, { data: userData, timestamp: Date.now() });
      return userData;
    }
    
    return null;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getUserInfo:', error);
    return null;
  }
}

// üîê –û–¢–†–ò–ú–ê–ù–ù–Ø –†–û–õ–Ü
async function getUserRole(telegramId) {
  try {
    if (!doc) return 'EMP';
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Roles'];
    if (!sheet) return 'EMP';
    
    const rows = await sheet.getRows();
    const role = rows.find(row => row.get('TelegramID') == telegramId);
    
    return role ? role.get('Role') : 'EMP';
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getUserRole:', error);
    return 'EMP';
  }
}

// üè† –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ
async function showMainMenu(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    const user = await getUserInfo(telegramId);
    
    let welcomeText = `üåü <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ HR –ë–æ—Ç–∞!</b>

ü§ñ <b>–©–æ —è –≤–º—ñ—é —Ä–æ–±–∏—Ç–∏:</b>

üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏:</b> –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É, –∫–∞–ª–µ–Ω–¥–∞—Ä
üè† <b>Remote:</b> —Ñ—ñ–∫—Å–∞—Ü—ñ—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—ó —Ä–æ–±–æ—Ç–∏, –ª—ñ–º—ñ—Ç–∏
‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è:</b> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è
üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π:</b> —Ñ—ñ–∫—Å–∞—Ü—ñ—è —Ö–≤–æ—Ä–æ–±–∏, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è HR
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –æ—Å–æ–±–∏—Å—Ç–∏–π –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å
üéØ <b>–û–Ω–±–æ—Ä–¥–∏–Ω–≥:</b> –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
üí¨ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:</b> –∞–Ω–æ–Ω—ñ–º–Ω—ñ —Ç–∞ —ñ–º–µ–Ω–Ω—ñ —ñ–¥–µ—ó
üö® <b>ASAP:</b> —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ HR
ü§ñ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫:</b> —à–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø–æ—Ä–∞–¥–∏

üëã <b>–ü—Ä–∏–≤—ñ—Ç, ${user?.fullName || '–∫–æ–ª–µ–≥–∞'}!</b>`;

    // Reply Keyboard (–ø–æ—Å—Ç—ñ–π–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–Ω–∏–∑—É)
    const baseKeyboard = [
      // –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–±–æ—á—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ)
      [
        { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏' },
        { text: 'üè† Remote' }
      ],
      [
        { text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è' },
        { text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π' }
      ],
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { text: 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥' }
      ],
      // –î–æ–≤—ñ–¥–∫–∞ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞
      [
        { text: '‚ùì FAQ' },
        { text: 'ü§ñ –®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫' }
      ],
      // –ú–µ–Ω—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
      [
        { text: 'üí¨ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó' },
        { text: 'üö® ASAP –∑–∞–ø–∏—Ç' }
      ]
    ];

    if (role === 'PM' || role === 'HR' || role === 'CEO') {
      baseKeyboard.push([
        { text: 'üìã –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è' },
        { text: 'üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞' }
      ]);
    }

    if (role === 'HR') {
      baseKeyboard.push([
        { text: 'üë• HR –ü–∞–Ω–µ–ª—å' },
        { text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏' }
      ]);
    }

    if (role === 'CEO') {
      baseKeyboard.push([
        { text: 'üè¢ CEO –ü–∞–Ω–µ–ª—å' }
      ]);
    }

    await sendMessage(chatId, welcomeText, baseKeyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showMainMenu:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é.');
  }
}

// üîò –û–ë–†–û–ë–ö–ê REPLY KEYBOARD
async function handleReplyKeyboard(chatId, telegramId, text) {
  try {
    const routes = {
      'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏': showVacationMenu,
      'üè† Remote': showRemoteMenu,
      '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è': showLateMenu,
      'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π': showSickMenu,
      'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': showStatsMenu,
      'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥': showOnboardingMenu,
      '‚ùì FAQ': showFAQMenu,
      'ü§ñ –®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫': showAIMenu,
      'üí¨ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó': showSuggestionsMenu,
      'üö® ASAP –∑–∞–ø–∏—Ç': showASAPMenu,
      'üìã –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è': showApprovalsMenu,
      'üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞': showAnalyticsMenu,
      'üë• HR –ü–∞–Ω–µ–ª—å': showHRPanel,
      'üì¢ –†–æ–∑—Å–∏–ª–∫–∏': showMailingsMenu,
      'üè¢ CEO –ü–∞–Ω–µ–ª—å': showCEOPanel
    };
    
    if (routes[text]) {
      await routes[text](chatId, telegramId);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ handleReplyKeyboard:', error);
    return false;
  }
}

// üìù –†–ï–Ñ–°–¢–†–ê–¶–Ü–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê
async function startRegistration(chatId, telegramId, username, firstName, lastName) {
  try {
    const welcomeText = `üåü <b>–ü—Ä–∏–≤—ñ—Ç –∑—ñ—Ä–æ—á–∫–∞!</b>

–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ç–≤–æ—ó–º HR. –í–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –º–µ–Ω–µ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏. –Ø —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —Ç–æ–±—ñ –≤ –Ω–∞–≥–æ–¥—ñ.

–ü–æ—á–Ω—É –∑ —Ç–æ–≥–æ, —â–æ –ø—Ä–æ—à—É —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–∏ –Ω–∞–¥–∞–ª—ñ —è –º—ñ–≥ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ.`;

    registrationCache.set(telegramId, {
      step: 'department',
      data: {
        username: username,
        firstName: firstName,
        lastName: lastName
      }
    });

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üè¢ Marketing', callback_data: 'department_Marketing' },
          { text: 'üé® Design', callback_data: 'department_Design' }
        ],
        [
          { text: 'üì± SMM', callback_data: 'department_SMM' },
          { text: 'üíº Sales', callback_data: 'department_Sales and communication' }
        ],
        [
          { text: 'üë• HR', callback_data: 'department_HR' },
          { text: 'üëë CEO', callback_data: 'department_CEO' }
        ]
      ]
    };

    await sendMessage(chatId, welcomeText, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ startRegistration:', error);
  }
}

// üè¢ –í–ò–ë–Ü–† –í–Ü–î–î–Ü–õ–£
async function handleDepartmentSelection(chatId, telegramId, department) {
  try {
    const regData = registrationCache.get(telegramId);
    if (!regData) return;

    regData.data.department = department;
    regData.step = 'team';

    const keyboard = { inline_keyboard: [] };
    
    if (DEPARTMENTS[department]) {
      const teams = Object.keys(DEPARTMENTS[department]);
      for (const team of teams) {
        keyboard.inline_keyboard.push([
          { text: team, callback_data: `team_${team}` }
        ]);
      }
    }

    await sendMessage(chatId, `‚úÖ –í—ñ–¥–¥—ñ–ª: <b>${department}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É:`, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ handleDepartmentSelection:', error);
  }
}

// üë• –í–ò–ë–Ü–† –ö–û–ú–ê–ù–î–ò
async function handleTeamSelection(chatId, telegramId, team) {
  try {
    const regData = registrationCache.get(telegramId);
    if (!regData) return;

    regData.data.team = team;
    regData.step = 'position';

    const keyboard = { inline_keyboard: [] };
    const department = regData.data.department;
    
    if (DEPARTMENTS[department] && DEPARTMENTS[department][team]) {
      const positions = DEPARTMENTS[department][team];
      for (const position of positions) {
        keyboard.inline_keyboard.push([
          { text: position, callback_data: `position_${position}` }
        ]);
      }
    }

    await sendMessage(chatId, `‚úÖ –ö–æ–º–∞–Ω–¥–∞: <b>${team}</b>\n\n–û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É:`, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ handleTeamSelection:', error);
  }
}

// üíº –í–ò–ë–Ü–† –ü–û–°–ê–î–ò
async function handlePositionSelection(chatId, telegramId, position) {
  try {
    const regData = registrationCache.get(telegramId);
    if (!regData) return;

    regData.data.position = position;
    regData.step = 'name';

    await sendMessage(chatId, `‚úÖ –ü–æ—Å–∞–¥–∞: <b>${position}</b>\n\nüìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è:`);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ handlePositionSelection:', error);
  }
}

// üìù –û–ë–†–û–ë–ö–ê –ö–†–û–ö–Ü–í –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
async function handleRegistrationStep(chatId, telegramId, text) {
  try {
    const regData = registrationCache.get(telegramId);
    if (!regData) return;

    switch (regData.step) {
      case 'name':
        regData.data.name = text;
        regData.step = 'surname';
        await sendMessage(chatId, `‚úÖ –Ü–º'—è: <b>${text}</b>\n\nüìù –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ:`);
        break;

      case 'surname':
        regData.data.surname = text;
        regData.step = 'birthdate';
        await sendMessage(chatId, `‚úÖ –ü—Ä—ñ–∑–≤–∏—â–µ: <b>${text}</b>\n\nüìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):`);
        break;

      case 'birthdate':
        if (!isValidDate(text)) {
          await sendMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†');
          return;
        }
        regData.data.birthDate = text;
        regData.step = 'firstworkday';
        await sendMessage(chatId, `‚úÖ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: <b>${text}</b>\n\nüìÖ –í–≤–µ–¥—ñ—Ç—å –ø–µ—Ä—à–∏–π —Ä–æ–±–æ—á–∏–π –¥–µ–Ω—å (–î–î.–ú–ú.–†–†–†–†):`);
        break;

      case 'firstworkday':
        if (!isValidDate(text)) {
          await sendMessage(chatId, '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–†');
          return;
        }
        regData.data.firstWorkDay = text;
        await completeRegistration(chatId, telegramId, regData.data);
        break;
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ handleRegistrationStep:', error);
  }
}

// ‚úÖ –ó–ê–í–ï–†–®–ï–ù–ù–Ø –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
async function completeRegistration(chatId, telegramId, data) {
  try {
    // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ Google Sheets
    if (doc) {
      await doc.loadInfo();
      let sheet = doc.sheetsByTitle['Employees'];
      if (!sheet) {
        sheet = await doc.addSheet({ title: 'Employees', headerValues: ['TelegramID', 'FullName', 'Department', 'Team', 'Position', 'BirthDate', 'FirstWorkDay', 'WorkMode', 'RegistrationDate'] });
      }
      
      await sheet.addRow({
        TelegramID: telegramId,
        FullName: `${data.name} ${data.surname}`,
        Department: data.department,
        Team: data.team,
        Position: data.position,
        BirthDate: data.birthDate,
        FirstWorkDay: data.firstWorkDay,
        WorkMode: 'Hybrid',
        RegistrationDate: new Date().toISOString()
      });
    }

    registrationCache.delete(telegramId);

    const welcomeText = `üéâ <b>–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä –º–∏ –∑–Ω–∞–π–æ–º—ñ —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ!</b>

–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –º–æ—ó–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º. –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑:

üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∞–º–∏</b> - –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É
üè† <b>Remote —Ä–æ–±–æ—Ç–æ—é</b> - —Ñ—ñ–∫—Å–∞—Ü—ñ—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—ó —Ä–æ–±–æ—Ç–∏
‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è–º–∏</b> - –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è
üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–º–∏</b> - —Ñ—ñ–∫—Å–∞—Ü—ñ—è —Ö–≤–æ—Ä–æ–±–∏
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é</b> - –æ—Å–æ–±–∏—Å—Ç—ñ –∑–≤—ñ—Ç–∏
üéØ <b>–û–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º</b> - –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–æ–≤–∏—Ö
üí¨ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏</b> - —ñ–¥–µ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
üö® <b>ASAP –∑–∞–ø–∏—Ç–∞–º–∏</b> - —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è
ü§ñ <b>–®–Ü-–ø–æ–º—ñ—á–Ω–∏–∫–æ–º</b> - —à–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ!`;

    await showMainMenu(chatId, telegramId);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ completeRegistration:', error);
  }
}

// üèñÔ∏è –ú–ï–ù–Æ –í–Ü–î–ü–£–°–¢–û–ö
async function showVacationMenu(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const balance = await getVacationBalance(telegramId);
    
    const text = `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${balance.used}/${balance.total} –¥–Ω—ñ–≤
üìÖ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> ${balance.available} –¥–Ω—ñ–≤

<b>–ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫:</b>
‚Ä¢ –ú—ñ–Ω: 1 –¥–µ–Ω—å, –ú–∞–∫—Å: 7 –¥–Ω—ñ–≤ –∑–∞ —Ä–∞–∑
‚Ä¢ 3 –º—ñ—Å—è—Ü—ñ –¥–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø—É—Å—Ç–∫–∏
‚Ä¢ –ù–∞–∫–ª–∞–¥–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –≤ –∫–æ–º–∞–Ω–¥—ñ
‚Ä¢ –ü—Ä–æ—Ü–µ—Å: –í–∏ ‚Üí PM ‚Üí HR

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É', callback_data: 'vacation_apply' },
          { text: 'üö® –ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞', callback_data: 'vacation_emergency' }
        ],
        [
          { text: 'üìÑ –ú–æ—ó –∑–∞—è–≤–∫–∏', callback_data: 'vacation_requests' },
          { text: 'üìä –ë–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª—ñ', callback_data: 'vacation_balance' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showVacationMenu:', error);
  }
}

// üìä –ë–ê–õ–ê–ù–° –í–Ü–î–ü–£–°–¢–û–ö
async function getVacationBalance(telegramId) {
  try {
    if (!doc) return { used: 0, total: 24, available: 24 };
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Vacations'];
    if (!sheet) return { used: 0, total: 24, available: 24 };
    
    const rows = await sheet.getRows();
    const currentYear = new Date().getFullYear();
    
    const userVacations = rows.filter(row => 
      row.get('TelegramID') == telegramId && 
      row.get('Status') === 'Approved' &&
      new Date(row.get('StartDate')).getFullYear() === currentYear
    );
    
    const usedDays = userVacations.reduce((total, row) => {
      const start = new Date(row.get('StartDate'));
      const end = new Date(row.get('EndDate'));
      return total + Math.ceil((end - start) / (1000 * 60 * 60 * 24)) + 1;
    }, 0);
    
    return {
      used: usedDays,
      total: 24,
      available: 24 - usedDays
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getVacationBalance:', error);
    return { used: 0, total: 24, available: 24 };
  }
}

// üìù –§–û–†–ú–ê –ó–ê–Ø–í–ö–ò –ù–ê –í–Ü–î–ü–£–°–¢–ö–£
async function showVacationForm(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    if (!user) {
      await sendMessage(chatId, '‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –ü—Ä–æ–π–¥—ñ—Ç—å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é.');
      return;
    }

    const text = `üìù <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É</b>

üë§ <b>–°–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫:</b> ${user.fullName}
üè¢ <b>–í—ñ–¥–¥—ñ–ª:</b> ${user.department}
üë• <b>–ö–æ–º–∞–Ω–¥–∞:</b> ${user.team}

<b>–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫–∏:</b>

üìÖ <b>–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É</b> (–î–î.–ú–ú.–†–†–†–†):`;

    // –ó–±–µ—Ä–µ–∂–µ–º–æ —Å—Ç–∞–Ω —Ñ–æ—Ä–º–∏
    registrationCache.set(telegramId, {
      step: 'vacation_start_date',
      data: { type: 'vacation' }
    });

    await sendMessage(chatId, text);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showVacationForm:', error);
  }
}

// üè† –ú–ï–ù–Æ REMOTE
async function showRemoteMenu(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const stats = await getRemoteStats(telegramId);
    
    const text = `üè† <b>Remote —Ä–æ–±–æ—Ç–∞</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å:</b>
‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${stats.used}/14 –¥–Ω—ñ–≤
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: ${stats.available} –¥–Ω—ñ–≤

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –õ—ñ–º—ñ—Ç: 14 –¥–Ω—ñ–≤/–º—ñ—Å—è—Ü—å (–æ—Ñ–ª–∞–π–Ω/–≥—ñ–±—Ä–∏–¥)
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ –¥–æ 11:00
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üè† Remote —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: 'remote_today' },
          { text: 'üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä Remote', callback_data: 'remote_calendar' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'remote_stats' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showRemoteMenu:', error);
  }
}

// ‚è∞ –ú–ï–ù–Æ –°–ü–Ü–ó–ù–ï–ù–¨
async function showLateMenu(chatId, telegramId) {
  try {
    const stats = await getLateStats(telegramId);
    
    const text = `‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å:</b>
‚Ä¢ –°–ø—ñ–∑–Ω–µ–Ω—å: ${stats.count}/7 (–ª—ñ–º—ñ—Ç)
‚Ä¢ –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è: ${stats.warnings}

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è –∑ 10:21
‚Ä¢ 7 —Å–ø—ñ–∑–Ω–µ–Ω—å/–º—ñ—Å—è—Ü—å = –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ HR + PM

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚è∞ –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_report' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å', callback_data: 'late_stats' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showLateMenu:', error);
  }
}

// üè• –ú–ï–ù–Æ –õ–Ü–ö–ê–†–ù–Ø–ù–ò–•
async function showSickMenu(chatId, telegramId) {
  try {
    const stats = await getSickStats(telegramId);
    
    const text = `üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å:</b>
‚Ä¢ –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏—Ö –¥–Ω—ñ–≤: ${stats.days}
‚Ä¢ –ó–∞–ø–∏—Å—ñ–≤: ${stats.count}

<b>–ü—Ä–∞–≤–∏–ª–∞:</b>
‚Ä¢ –ë–µ–∑ –ª—ñ–º—ñ—Ç—ñ–≤
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª—è—Ç–∏ HR + PM
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üè• –ü–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –ø—Ä–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_report' }
        ],
        [
          { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏—Ö', callback_data: 'sick_stats' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showSickMenu:', error);
  }
}

// üìä –ú–ï–ù–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
async function showStatsMenu(chatId, telegramId) {
  try {
    const text = `üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ –∑–≤—ñ—Ç–∏ —Ç–∞ –¥–∞–Ω—ñ.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìÖ –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å', callback_data: 'stats_monthly' }
        ],
        [
          { text: 'üì§ –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö', callback_data: 'stats_export' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showStatsMenu:', error);
  }
}

// üéØ –ú–ï–ù–Æ –û–ù–ë–û–†–î–ò–ù–ì–£
async function showOnboardingMenu(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const isNew = await checkIfNewEmployee(telegramId);
    
    if (isNew) {
      const text = `üéØ <b>–û–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è –Ω–æ–≤–µ–Ω—å–∫–∏—Ö</b>

–ü—Ä–∏–≤—ñ—Ç! –í—ñ—Ç–∞—é —Ç–µ–±–µ –≤ –Ω–∞–π–∫—Ä–∞—â—ñ–π –∫–æ–º–∞–Ω–¥—ñ –æ—Å–æ–±–ª–∏–≤–∏—Ö –õ—é–¥–µ–πüß°
–¢–µ–ø–µ—Ä —Ç–∏ —ó—ó —á–∞—Å—Ç–∏–Ω–∞. –¢—É—Ç –∑—ñ–±—Ä–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –Ω–∞—Å.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è, —ñ —è–∫—â–æ –≤–∏–Ω–∏–∫–Ω—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ HR.`;

      const keyboard = {
        inline_keyboard: [
          [
            { text: 'üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó', callback_data: 'onboarding_notion' }
          ],
          [
            { text: '‚ùì –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞–Ω—å', callback_data: 'onboarding_quiz' }
          ],
          [
            { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
          ]
        ]
      };

      await sendMessage(chatId, text, keyboard);
    } else {
      await sendMessage(chatId, '‚ùå –¶–µ–π —Ä–æ–∑–¥—ñ–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.');
    }
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showOnboardingMenu:', error);
  }
}

// ‚ùì –ú–ï–ù–Æ FAQ
async function showFAQMenu(chatId, telegramId) {
  try {
    const text = `‚ùì <b>–ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è</b>

–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'faq_vacations' },
          { text: 'üè† Remote', callback_data: 'faq_remote' }
        ],
        [
          { text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'faq_late' },
          { text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'faq_sick' }
        ],
        [
          { text: 'üíº –ó–∞–≥–∞–ª—å–Ω—ñ', callback_data: 'faq_general' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showFAQMenu:', error);
  }
}

// ü§ñ –ú–ï–ù–Æ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö–ê
async function showAIMenu(chatId, telegramId) {
  try {
    const text = `ü§ñ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫</b>

–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ —à–≤–∏–¥–∫–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∞–º–∏.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚ùì –ó–∞–¥–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è', callback_data: 'ai_question' }
        ],
        [
          { text: 'üí° –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ—Ä–∞–¥—É', callback_data: 'ai_advice' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showAIMenu:', error);
  }
}

// üí¨ –ú–ï–ù–Æ –ü–†–û–ü–û–ó–ò–¶–Ü–ô
async function showSuggestionsMenu(chatId, telegramId) {
  try {
    const text = `üí¨ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó</b>

–í–∞—à—ñ —ñ–¥–µ—ó –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –Ω–∞—Å! –ú–æ–∂–µ—Ç–µ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏ —â–æ–¥–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤.

–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë§ –Ü–º–µ–Ω–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', callback_data: 'suggestions_named' },
          { text: 'üé≠ –ê–Ω–æ–Ω—ñ–º–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', callback_data: 'suggestions_anonymous' }
        ],
        [
          { text: 'üìÑ –ú–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'suggestions_view' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showSuggestionsMenu:', error);
  }
}

// üö® –ú–ï–ù–Æ ASAP
async function showASAPMenu(chatId, telegramId) {
  try {
    const text = `üö® <b>ASAP –∑–∞–ø–∏—Ç</b>

–¢–µ—Ä–º—ñ–Ω–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, —è–∫—ñ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å –Ω–µ–≥–∞–π–Ω–æ—ó —É–≤–∞–≥–∏ HR.

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üö® –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ ASAP –∑–∞–ø–∏—Ç', callback_data: 'asap_form' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showASAPMenu:', error);
  }
}

// üìã –ú–ï–ù–Æ –ó–ê–¢–í–ï–†–î–ñ–ï–ù–¨ (PM/HR/CEO)
async function showApprovalsMenu(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    
    if (role !== 'PM' && role !== 'HR' && role !== 'CEO') {
      await sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è PM, HR, CEO.');
      return;
    }

    const text = `üìã <b>–ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è</b>

–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'approvals_vacations' },
          { text: 'üè† Remote', callback_data: 'approvals_remote' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showApprovalsMenu:', error);
  }
}

// üìà –ú–ï–ù–Æ –ê–ù–ê–õ–Ü–¢–ò–ö–ò
async function showAnalyticsMenu(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    
    if (role !== 'HR' && role !== 'CEO') {
      await sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è HR —Ç–∞ CEO.');
      return;
    }

    const text = `üìà <b>–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞</b>

–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë• HR –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data: 'analytics_hr' },
          { text: 'üè¢ CEO –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data: 'analytics_ceo' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showAnalyticsMenu:', error);
  }
}

// üë• HR –ü–ê–ù–ï–õ–¨
async function showHRPanel(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    
    if (role !== 'HR') {
      await sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è HR.');
      return;
    }

    const text = `üë• <b>HR –ü–∞–Ω–µ–ª—å</b>

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üë• –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏', callback_data: 'hr_users' },
          { text: 'üìä –ó–≤—ñ—Ç–∏', callback_data: 'hr_reports' }
        ],
        [
          { text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏', callback_data: 'hr_mailings' },
          { text: '‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data: 'hr_settings' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showHRPanel:', error);
  }
}

// üè¢ CEO –ü–ê–ù–ï–õ–¨
async function showCEOPanel(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    
    if (role !== 'CEO') {
      await sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è CEO.');
      return;
    }

    const text = `üè¢ <b>CEO –ü–∞–Ω–µ–ª—å</b>

–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìä –ó–∞–≥–∞–ª—å–Ω–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data: 'ceo_analytics' },
          { text: 'üë• –ö–æ–º–∞–Ω–¥–∞', callback_data: 'ceo_team' }
        ],
        [
          { text: 'üíº –ë—ñ–∑–Ω–µ—Å –º–µ—Ç—Ä–∏–∫–∏', callback_data: 'ceo_metrics' },
          { text: 'üìà –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö', callback_data: 'ceo_export' }
        ],
        [
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showCEOPanel:', error);
  }
}

// üì¢ –ú–ï–ù–Æ –†–û–ó–°–ò–õ–û–ö (HR)
async function showMailingsMenu(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    
    if (role !== 'HR') {
      await sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –æ–±–º–µ–∂–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è HR.');
      return;
    }

    await sendMessage(chatId, 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ');
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ showMailingsMenu:', error);
  }
}

// üîß –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á
function isValidDate(dateString) {
  const regex = /^(\d{2})\.(\d{2})\.(\d{4})$/;
  if (!regex.test(dateString)) return false;
  
  const [, day, month, year] = dateString.match(regex);
  const date = new Date(year, month - 1, day);
  
  return date.getDate() == day && date.getMonth() == month - 1 && date.getFullYear() == year;
}

async function checkIfNewEmployee(telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    if (!user) return false;
    
    const firstWorkDay = new Date(user.firstWorkDay);
    const now = new Date();
    const diffTime = now - firstWorkDay;
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return diffDays <= 30; // –ù–æ–≤–∏–π —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫ –¥–æ 30 –¥–Ω—ñ–≤
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ checkIfNewEmployee:', error);
    return false;
  }
}

async function getRemoteStats(telegramId) {
  try {
    if (!doc) return { used: 0, available: 14 };
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Remote'];
    if (!sheet) return { used: 0, available: 14 };
    
    const rows = await sheet.getRows();
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const userRemote = rows.filter(row => 
      row.get('TelegramID') == telegramId && 
      row.get('Status') === 'Approved' &&
      new Date(row.get('Date')).getMonth() === currentMonth &&
      new Date(row.get('Date')).getFullYear() === currentYear
    );
    
    return {
      used: userRemote.length,
      available: 14 - userRemote.length
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getRemoteStats:', error);
    return { used: 0, available: 14 };
  }
}

async function getLateStats(telegramId) {
  try {
    if (!doc) return { count: 0, warnings: 0 };
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Late'];
    if (!sheet) return { count: 0, warnings: 0 };
    
    const rows = await sheet.getRows();
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const userLate = rows.filter(row => 
      row.get('TelegramID') == telegramId && 
      new Date(row.get('Date')).getMonth() === currentMonth &&
      new Date(row.get('Date')).getFullYear() === currentYear
    );
    
    const warnings = Math.floor(userLate.length / 7);
    
    return {
      count: userLate.length,
      warnings: warnings
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getLateStats:', error);
    return { count: 0, warnings: 0 };
  }
}

async function getSickStats(telegramId) {
  try {
    if (!doc) return { days: 0, count: 0 };
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Sick'];
    if (!sheet) return { days: 0, count: 0 };
    
    const rows = await sheet.getRows();
    const currentMonth = new Date().getMonth();
    const currentYear = new Date().getFullYear();
    
    const userSick = rows.filter(row => 
      row.get('TelegramID') == telegramId && 
      new Date(row.get('Date')).getMonth() === currentMonth &&
      new Date(row.get('Date')).getFullYear() === currentYear
    );
    
    return {
      days: userSick.length,
      count: userSick.length
    };
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ getSickStats:', error);
    return { days: 0, count: 0 };
  }
}

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
async function startServer() {
  try {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
    await initGoogleSheets();
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è webhook
    if (WEBHOOK_URL) {
      await bot.setWebHook(`${WEBHOOK_URL}/webhook`);
      console.log('‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', WEBHOOK_URL);
    } else {
      console.warn('‚ö†Ô∏è WEBHOOK_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    }
    
    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ HR Bot Ultimate –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìç Health check: http://localhost:${PORT}/`);
      console.log(`üì® Webhook: ${WEBHOOK_URL || '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    });
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    server.on('error', (error) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
  }
}

// –û–±—Ä–æ–±–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (reason) => {
  console.error('Unhandled Rejection:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
startServer();

console.log('‚úÖ HR Bot Ultimate server started successfully');
