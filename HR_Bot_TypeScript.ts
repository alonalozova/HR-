/**
 * üöÄ HR BOT TYPESCRIPT VERSION
 * –ü–æ–≤–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ type safety —Ç–∞ —Å—É—á–∞—Å–Ω–æ—é –∞—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–æ—é
 */

import { 
  User, 
  VacationRequest, 
  VacationStatus, 
  LateRecord, 
  RemoteRecord, 
  SickRecord,
  MonthlyReport,
  HRReport,
  Suggestion,
  ASAPRequest,
  BirthdayReminder,
  AnniversaryReminder,
  Survey,
  SurveyResponse,
  BotConfig,
  TelegramUpdate,
  TelegramMessage,
  TelegramUser,
  AppError,
  ValidationError,
  DatabaseError,
  LogEntry,
  SecurityEvent,
  KeyboardButton,
  InlineKeyboard,
  ReplyKeyboard,
  DateRange
} from './types';

import { TypeSafeHelpers } from './utils/type-safe-helpers';

// üîß CONFIGURATION
const config: BotConfig = {
  botToken: process.env.BOT_TOKEN || '',
  hrChatId: process.env.HR_CHAT_ID || '',
  sheetsId: process.env.SHEETS_ID || '',
  serviceAccountEmail: process.env.SERVICE_ACCOUNT_EMAIL || '',
  privateKey: process.env.PRIVATE_KEY || '',
  webhookUrl: process.env.WEBHOOK_URL || '',
  environment: (process.env.NODE_ENV as 'development' | 'staging' | 'production') || 'development',
  features: {
    enableVacations: true,
    enableAttendance: true,
    enableReports: true,
    enableSuggestions: true,
    enableSurveys: true,
    enableNotifications: true,
    enableAnalytics: true
  }
};

// üìö IMPORTS
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');
const express = require('express');
const dotenv = require('dotenv');

dotenv.config();

// üóÑÔ∏è CACHE WITH TTL
class CacheWithTTL<T> {
  private cache = new Map<string, { value: T; expiry: number }>();
  private maxSize: number;
  private ttl: number;

  constructor(maxSize: number = 1000, ttl: number = 300000) {
    this.maxSize = maxSize;
    this.ttl = ttl;
  }

  set(key: string, value: T): void {
    if (this.cache.size >= this.maxSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }
    
    this.cache.set(key, {
      value,
      expiry: Date.now() + this.ttl
    });
  }

  get(key: string): T | undefined {
    const item = this.cache.get(key);
    if (!item) return undefined;
    
    if (Date.now() > item.expiry) {
      this.cache.delete(key);
      return undefined;
    }
    
    return item.value;
  }

  has(key: string): boolean {
    return this.get(key) !== undefined;
  }

  delete(key: string): boolean {
    return this.cache.delete(key);
  }

  clear(): void {
    this.cache.clear();
  }

  size(): number {
    return this.cache.size;
  }
}

// üö® ERROR CLASSES
class AppError extends Error implements AppError {
  public code: string;
  public statusCode: number;
  public isOperational: boolean;
  public context?: any;

  constructor(message: string, statusCode: number = 500, code: string = 'APP_ERROR', context?: any) {
    super(message);
    this.name = this.constructor.name;
    this.code = code;
    this.statusCode = statusCode;
    this.isOperational = true;
    this.context = context;

    Error.captureStackTrace(this, this.constructor);
  }
}

class ValidationError extends AppError implements ValidationError {
  public field: string;
  public value: any;
  public rule: string;

  constructor(field: string, value: any, rule: string, message?: string) {
    super(message || `Validation failed for field '${field}': ${rule}`, 400, 'VALIDATION_ERROR');
    this.field = field;
    this.value = value;
    this.rule = rule;
  }
}

class DatabaseError extends AppError implements DatabaseError {
  public query?: string;
  public table?: string;
  public operation: string;

  constructor(operation: string, message: string, query?: string, table?: string) {
    super(message, 500, 'DATABASE_ERROR');
    this.operation = operation;
    this.query = query;
    this.table = table;
  }
}

// üìù LOGGER
class Logger {
  private logs: LogEntry[] = [];

  debug(message: string, context?: any): void {
    this.log('debug', message, context);
  }

  info(message: string, context?: any): void {
    this.log('info', message, context);
  }

  warn(message: string, context?: any): void {
    this.log('warn', message, context);
  }

  error(message: string, context?: any): void {
    this.log('error', message, context);
  }

  private log(level: LogEntry['level'], message: string, context?: any): void {
    const logEntry: LogEntry = {
      timestamp: new Date(),
      level,
      message,
      context
    };
    
    this.logs.push(logEntry);
    console.log(`[${logEntry.timestamp.toISOString()}] ${level.toUpperCase()}: ${message}`, context || '');
    
    // Keep only last 1000 logs
    if (this.logs.length > 1000) {
      this.logs = this.logs.slice(-1000);
    }
  }

  getLogs(level?: LogEntry['level']): LogEntry[] {
    if (level) {
      return this.logs.filter(log => log.level === level);
    }
    return [...this.logs];
  }
}

// üéØ MAIN CLASS
class HRBot {
  private bot: any;
  private app: any;
  private doc: any;
  private userCache: CacheWithTTL<User>;
  private registrationCache: CacheWithTTL<any>;
  private processedUpdates: CacheWithTTL<boolean>;
  private logger: Logger;
  private PORT: number;

  constructor() {
    this.PORT = process.env.PORT ? parseInt(process.env.PORT) : 3000;
    this.userCache = new CacheWithTTL<User>(1000, 300000); // 5 minutes
    this.registrationCache = new CacheWithTTL(100, 600000); // 10 minutes
    this.processedUpdates = new CacheWithTTL<boolean>(10000, 60000); // 1 minute
    this.logger = new Logger();
    
    this.initializeBot();
    this.initializeServer();
  }

  private async initializeBot(): Promise<void> {
    try {
      this.bot = new TelegramBot(config.botToken, { polling: false });
      this.logger.info('Telegram bot initialized');
    } catch (error) {
      this.logger.error('Failed to initialize Telegram bot', { error: error.message });
      throw new AppError('Bot initialization failed', 500, 'BOT_INIT_ERROR', error);
    }
  }

  private initializeServer(): void {
    this.app = express();
    this.app.use(express.json());
    
    // Health check endpoint
    this.app.get('/', (req: any, res: any) => {
      const userAgent = req.get('User-Agent') || '';
      const isRailwayHealth = userAgent.includes('Railway') || userAgent.includes('railway');
      
      this.logger.info('Health check request', { 
        userAgent, 
        isRailwayHealth, 
        ip: req.ip,
        url: req.url 
      });
      
      const response = {
        status: 'OK',
        message: 'HR Bot TypeScript is running',
        timestamp: new Date().toISOString(),
        version: '4.0.0-typescript',
        sheets_connected: !!this.doc,
        uptime: process.uptime(),
        cache_stats: {
          users: this.userCache.size(),
          registrations: this.registrationCache.size(),
          processed_updates: this.processedUpdates.size()
        }
      };
      
      res.status(200).json(response);
    });

    this.app.get('/health', (req: any, res: any) => {
      res.status(200).json({ 
        status: 'healthy',
        timestamp: new Date().toISOString(),
        version: '4.0.0-typescript',
        uptime: process.uptime()
      });
    });

    // Webhook endpoint
    this.app.post('/webhook', (req: any, res: any) => {
      this.handleWebhookUpdate(req.body);
      res.status(200).json({ status: 'ok' });
    });

    this.app.listen(this.PORT, () => {
      this.logger.info(`üöÄ HR Bot TypeScript server –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${this.PORT}`);
    });
  }

  private async handleWebhookUpdate(update: TelegramUpdate): Promise<void> {
    const updateId = update.update_id.toString();
    
    if (this.processedUpdates.has(updateId)) {
      this.logger.debug('Duplicate update ignored', { updateId });
      return;
    }
    
    this.processedUpdates.set(updateId, true);
    
    try {
      if (update.message) {
        await this.processMessage(update.message);
      } else if (update.callback_query) {
        await this.processCallbackQuery(update.callback_query);
      }
    } catch (error) {
      this.logger.error('Error processing update', { 
        updateId, 
        error: error.message,
        update: update 
      });
    }
  }

  private async processMessage(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const userId = message.from.id;
    const text = message.text || '';

    this.logger.info('Processing message', { 
      chatId, 
      userId, 
      text: text.substring(0, 100) 
    });

    try {
      // Check if user is registered
      const user = await this.getUser(userId);
      
      if (!user || !user.isRegistered) {
        await this.handleRegistration(message);
        return;
      }

      // Process commands and buttons
      await this.handleUserCommands(message, user);
      
    } catch (error) {
      this.logger.error('Error processing message', { 
        chatId, 
        userId, 
        error: error.message 
      });
      
      await this.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  private async handleRegistration(message: TelegramMessage): Promise<void> {
    const chatId = message.chat.id;
    const userId = message.from.id;
    const text = message.text || '';

    // Welcome message for new users
    if (text === '/start' || text === 'üè† –ì–æ–ª–æ–≤–Ω–∞') {
      await this.sendWelcomeMessage(chatId);
      return;
    }

    // Handle registration steps
    const registrationData = this.registrationCache.get(userId.toString()) || {};
    
    if (!registrationData.step) {
      registrationData.step = 'name';
      registrationData.userId = userId;
      this.registrationCache.set(userId.toString(), registrationData);
      
      await this.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤–Ω–µ —ñ–º\'—è (–Ü–º\'—è –ü—Ä—ñ–∑–≤–∏—â–µ):');
      return;
    }

    await this.processRegistrationStep(message, registrationData);
  }

  private async processRegistrationStep(message: TelegramMessage, data: any): Promise<void> {
    const chatId = message.chat.id;
    const userId = message.from.id;
    const text = message.text || '';

    try {
      switch (data.step) {
        case 'name':
          if (this.validateName(text)) {
            data.fullName = text.trim();
            data.step = 'department';
            this.registrationCache.set(userId.toString(), data);
            
            const keyboard = this.createDepartmentKeyboard();
            await this.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –≤–∞—à –≤—ñ–¥–¥—ñ–ª:', { reply_markup: keyboard });
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º\'—è (–º—ñ–Ω—ñ–º—É–º 2 —Å–ª–æ–≤–∞):');
          }
          break;

        case 'department':
          if (this.validateDepartment(text)) {
            data.department = text;
            data.step = 'team';
            this.registrationCache.set(userId.toString(), data);
            
            const keyboard = this.createTeamKeyboard(data.department);
            await this.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É:', { reply_markup: keyboard });
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–¥—ñ–ª –∑—ñ —Å–ø–∏—Å–∫—É:');
          }
          break;

        case 'team':
          if (this.validateTeam(text)) {
            data.team = text;
            data.step = 'position';
            this.registrationCache.set(userId.toString(), data);
            
            const keyboard = this.createPositionKeyboard(data.department);
            await this.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –ø–æ—Å–∞–¥—É:', { reply_markup: keyboard });
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É –∑—ñ —Å–ø–∏—Å–∫—É:');
          }
          break;

        case 'position':
          if (this.validatePosition(text)) {
            data.position = text;
            data.step = 'birthDate';
            this.registrationCache.set(userId.toString(), data);
            
            await this.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):');
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Å–∞–¥—É –∑—ñ —Å–ø–∏—Å–∫—É:');
          }
          break;

        case 'birthDate':
          const birthDate = this.parseDate(text);
          if (birthDate) {
            data.birthDate = birthDate;
            data.step = 'firstWorkDay';
            this.registrationCache.set(userId.toString(), data);
            
            await this.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ (–î–î.–ú–ú.–†–†–†–†):');
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É (–î–î.–ú–ú.–†–†–†–†):');
          }
          break;

        case 'firstWorkDay':
          const firstWorkDay = this.parseDate(text);
          if (firstWorkDay) {
            data.firstWorkDay = firstWorkDay;
            data.step = 'workMode';
            this.registrationCache.set(userId.toString(), data);
            
            const keyboard = this.createWorkModeKeyboard();
            await this.sendMessage(chatId, '–û–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:', { reply_markup: keyboard });
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É (–î–î.–ú–ú.–†–†–†–†):');
          }
          break;

        case 'workMode':
          if (this.validateWorkMode(text)) {
            data.workMode = text;
            
            // Complete registration
            await this.completeRegistration(data);
            
            // Clear registration cache
            this.registrationCache.delete(userId.toString());
            
            // Send welcome message
            await this.sendRegisteredWelcomeMessage(chatId, data);
            
            // Show main menu
            await this.showMainMenu(chatId);
          } else {
            await this.sendMessage(chatId, '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏ –∑—ñ —Å–ø–∏—Å–∫—É:');
          }
          break;

        default:
          await this.sendMessage(chatId, '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É: /start');
      }
    } catch (error) {
      this.logger.error('Error in registration step', { 
        step: data.step, 
        error: error.message 
      });
      await this.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  private async completeRegistration(data: any): Promise<void> {
    try {
      const user: User = {
        telegramId: data.userId,
        fullName: data.fullName,
        department: data.department,
        team: data.team,
        position: data.position,
        birthDate: data.birthDate,
        firstWorkDay: data.firstWorkDay,
        workMode: data.workMode,
        isRegistered: true,
        role: {
          level: 'employee',
          permissions: this.getDefaultPermissions()
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // Save to cache
      this.userCache.set(data.userId.toString(), user);
      
      // Save to Google Sheets if available
      if (this.doc) {
        await this.saveUserToSheets(user);
      }

      this.logger.info('User registration completed', { 
        userId: data.userId, 
        fullName: data.fullName 
      });
      
    } catch (error) {
      this.logger.error('Error completing registration', { 
        userId: data.userId, 
        error: error.message 
      });
      throw new DatabaseError('save_user', 'Failed to save user registration', undefined, 'users');
    }
  }

  private async handleUserCommands(message: TelegramMessage, user: User): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';

    try {
      switch (text) {
        case '/start':
        case 'üè† –ì–æ–ª–æ–≤–Ω–∞':
          await this.showMainMenu(chatId);
          break;

        case 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∞':
          await this.handleVacationRequest(message, user);
          break;

        case '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è':
          await this.handleLateArrival(message, user);
          break;

        case 'üè† Remote':
          await this.handleRemoteWork(message, user);
          break;

        case 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π':
          await this.handleSickLeave(message, user);
          break;

        case 'üìä –ó–≤—ñ—Ç–∏':
          await this.handleReports(message, user);
          break;

        case 'üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó':
          await this.handleSuggestions(message, user);
          break;

        case 'üö® ASAP':
          await this.handleASAPRequest(message, user);
          break;

        case 'üéÇ –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è':
          await this.handleBirthdays(message, user);
          break;

        case 'üìã –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è':
          await this.handleSurveys(message, user);
          break;

        case 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å':
          await this.showUserProfile(chatId, user);
          break;

        case 'üÜò –î–æ–ø–æ–º–æ–≥–∞':
          await this.showHelp(chatId);
          break;

        default:
          await this.handleVacationProcess(message, user);
          break;
      }
    } catch (error) {
      this.logger.error('Error handling user command', { 
        command: text, 
        userId: user.telegramId, 
        error: error.message 
      });
      await this.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
    }
  }

  // üèñÔ∏è VACATION HANDLING
  private async handleVacationRequest(message: TelegramMessage, user: User): Promise<void> {
    const chatId = message.chat.id;
    
    const keyboard: InlineKeyboard = {
      inline_keyboard: [
        [{ text: 'üìÖ –ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫—É', callback_data: 'vacation_plan' }],
        [{ text: 'üìã –ú–æ—ó –∑–∞—è–≤–∫–∏', callback_data: 'vacation_my_requests' }],
        [{ text: '‚ö° –ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞', callback_data: 'vacation_emergency' }],
        [{ text: 'üè† –ì–æ–ª–æ–≤–Ω–∞', callback_data: 'main_menu' }]
      ]
    };

    await this.sendMessage(chatId, 
      'üèñÔ∏è **–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –≤—ñ–¥–ø—É—Å—Ç–∫–∞–º–∏**\n\n' +
      '‚Ä¢ üìÖ **–ó–∞–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫—É** - –∑–≤–∏—á–∞–π–Ω–∞ –∑–∞—è–≤–∫–∞\n' +
      '‚Ä¢ üìã **–ú–æ—ó –∑–∞—è–≤–∫–∏** - –ø–µ—Ä–µ–≥–ª—è–¥ —Å—Ç–∞—Ç—É—Å—É\n' +
      '‚Ä¢ ‚ö° **–ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞** - –Ω–µ–≥–∞–π–Ω–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ HR\n\n' +
      '**–ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫:**\n' +
      '‚Ä¢ –ú—ñ–Ω—ñ–º—É–º 1 –¥–µ–Ω—å, –º–∞–∫—Å–∏–º—É–º 7 –¥–Ω—ñ–≤ –∑–∞ —Ä–∞–∑\n' +
      '‚Ä¢ 3 –º—ñ—Å—è—Ü—ñ –¥–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø—É—Å—Ç–∫–∏\n' +
      '‚Ä¢ –ù–∞–∫–ª–∞–¥–∫–∏ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ –≤ –º–µ–∂–∞—Ö –∫–æ–º–∞–Ω–¥–∏',
      { reply_markup: keyboard, parse_mode: 'Markdown' }
    );
  }

  private async handleVacationProcess(message: TelegramMessage, user: User): Promise<void> {
    const chatId = message.chat.id;
    const text = message.text || '';
    
    // Check if user is in vacation process
    const vacationData = this.registrationCache.get(`vacation_${user.telegramId}`) || {};
    
    if (!vacationData.step) {
      // Start vacation process
      vacationData.step = 'startDate';
      vacationData.userId = user.telegramId;
      this.registrationCache.set(`vacation_${user.telegramId}`, vacationData);
      
      await this.sendMessage(chatId, 
        'üìÖ **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø—É—Å—Ç–∫–∏**\n\n' +
        '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—É—Å—Ç–∫–∏ (–î–î.–ú–ú.–†–†–†–†):\n' +
        '–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 15.01.2024'
      );
      return;
    }

    try {
      switch (vacationData.step) {
        case 'startDate':
          const startDate = this.parseDate(text);
          if (startDate && this.validateVacationDate(startDate)) {
            vacationData.startDate = startDate;
            vacationData.step = 'days';
            this.registrationCache.set(`vacation_${user.telegramId}`, vacationData);
            
            await this.sendMessage(chatId, '–í–∫–∞–∂—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏ (1-7):');
          } else {
            await this.sendMessage(chatId, 
              '‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†.\n' +
              '–î–∞—Ç–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ —Ä–∞–Ω—ñ—à–µ –∑–∞–≤—Ç—Ä–∞.'
            );
          }
          break;

        case 'days':
          const days = TypeSafeHelpers.Number.safeParseInt(text);
          if (this.validateVacationDays(days)) {
            vacationData.days = days;
            
            // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–µ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è
            const endDate = TypeSafeHelpers.Date.addDays(vacationData.startDate, days - 1);
            if (!endDate) {
              await this.sendMessage(chatId, 
                '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –¥–∞—Ç–∏ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.'
              );
              break;
            }
            
            vacationData.endDate = endDate;
            
            // Process vacation request
            await this.processVacationRequest(vacationData, user);
            
            // Clear vacation cache
            this.registrationCache.delete(`vacation_${user.telegramId}`);
            
          } else {
            await this.sendMessage(chatId, 
              '‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 7.'
            );
          }
          break;
      }
    } catch (error) {
      this.logger.error('Error in vacation process', { 
        step: vacationData.step, 
        userId: user.telegramId, 
        error: error.message 
      });
      await this.sendMessage(chatId, '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  private async processVacationRequest(vacationData: any, user: User): Promise<void> {
    const chatId = user.telegramId;
    
    try {
      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–æ–∫
      const conflicts = await this.checkVacationConflicts(
        vacationData.startDate, 
        vacationData.endDate, 
        user.department, 
        user.team,
        user.telegramId
      );
      
      if (conflicts.length > 0) {
        await this.sendMessage(chatId, 
          '‚ùå **–£–ø—Å, —Ç–≤–æ—è –≤—ñ–¥–ø—É—Å—Ç–∫–∞ –ø–µ—Ä–µ—Å—ñ–∫–∞—î—Ç—å—Å—è –∑ –õ—é–¥–∏–Ω–∫–æ—é –∑ —Ç–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏**\n\n' +
          '**–ö–æ–Ω—Ñ–ª—ñ–∫—Ç–∏:**\n' +
          conflicts.map(c => `‚Ä¢ ${c.fullName} (${c.startDate.toLocaleDateString()} - ${c.endDate.toLocaleDateString()})`).join('\n') +
          '\n\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ –¥–∞—Ç–∏.'
        );
        return;
      }

      // Check vacation balance
      const balance = await this.getVacationBalance(user.telegramId);
      if (vacationData.days > balance.remainingDays) {
        await this.sendMessage(chatId, 
          `‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏**\n\n` +
          `–î–æ—Å—Ç—É–ø–Ω–æ: ${balance.remainingDays} –¥–Ω—ñ–≤\n` +
          `–ó–∞–ø–∏—Ç—É—î—Ç—å—Å—è: ${vacationData.days} –¥–Ω—ñ–≤`
        );
        return;
      }

      // Create vacation request
      const request: VacationRequest = {
        requestId: this.generateRequestId(),
        userId: user.telegramId,
        startDate: vacationData.startDate,
        endDate: vacationData.endDate,
        days: vacationData.days,
        status: 'pending_pm',
        requestType: 'regular',
        createdAt: new Date(),
        updatedAt: new Date()
      };

      // Save to Google Sheets
      if (this.doc) {
        await this.saveVacationRequest(request);
      }

      // Notify PM
      await this.notifyPMAboutVacationRequest(request, user);
      
      // Notify HR
      await this.notifyHRAboutVacationRequest(request, user);

      await this.sendMessage(chatId, 
        '‚úÖ **–°—É–ø–µ—Ä, —Ç–≤—ñ–π –∑–∞–ø–∏—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è –¥–∞–ª—ñ!**\n\n' +
        `üìÖ **–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É:** ${vacationData.startDate.toLocaleDateString()}\n` +
        `üìÖ **–î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è:** ${vacationData.endDate.toLocaleDateString()}\n` +
        `üìä **–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤:** ${vacationData.days}\n\n` +
        '**–°—Ç–∞—Ç—É—Å:** –û—á—ñ–∫—É—î –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è PM\n' +
        '–í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É.'
      );

      this.logger.info('Vacation request processed', { 
        requestId: request.requestId, 
        userId: user.telegramId 
      });

    } catch (error) {
      this.logger.error('Error processing vacation request', { 
        userId: user.telegramId, 
        error: error.message 
      });
      throw new DatabaseError('save_vacation', 'Failed to save vacation request', undefined, 'vacations');
    }
  }

  // üîß UTILITY METHODS
  private async getUser(userId: number): Promise<User | undefined> {
    // Check cache first
    const cachedUser = this.userCache.get(userId.toString());
    if (cachedUser) {
      return cachedUser;
    }

    // Load from Google Sheets if available
    if (this.doc) {
      try {
        const user = await this.loadUserFromSheets(userId);
        if (user) {
          this.userCache.set(userId.toString(), user);
          return user;
        }
      } catch (error) {
        this.logger.error('Error loading user from sheets', { userId, error: error.message });
      }
    }

    return undefined;
  }

  private async loadUserFromSheets(userId: number): Promise<User | undefined> {
    return TypeSafeHelpers.Error.safeExecuteAsync(async () => {
      if (!this.doc) return undefined;

      const usersSheet = this.doc.sheetsByTitle['Users'];
      if (!usersSheet) return undefined;

      const rows = await usersSheet.getRows();
      
      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–æ—à—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const userRow = TypeSafeHelpers.Sheets.safeFindUser(rows, userId);
      if (!userRow) return undefined;

      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö
      const fullName = TypeSafeHelpers.String.safeString(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'FullName', '')
      );
      const department = TypeSafeHelpers.String.safeString(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'Department', '')
      );
      const team = TypeSafeHelpers.String.safeString(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'Team', '')
      );
      const position = TypeSafeHelpers.String.safeString(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'Position', '')
      );
      const workMode = TypeSafeHelpers.String.safeString(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'WorkMode', 'Office')
      ) as 'Hybrid' | 'Remote' | 'Office';

      const birthDate = TypeSafeHelpers.Date.safeParseDate(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'BirthDate', '')
      );
      const firstWorkDay = TypeSafeHelpers.Date.safeParseDate(
        TypeSafeHelpers.Sheets.safeGet(userRow, 'FirstWorkDay', '')
      );

      if (!birthDate || !firstWorkDay) {
        this.logger.warn('Invalid date data for user', { userId, birthDate, firstWorkDay });
        return undefined;
      }

      const user: User = {
        telegramId: userId,
        fullName,
        department,
        team,
        position,
        birthDate,
        firstWorkDay,
        workMode,
        isRegistered: true,
        role: {
          level: 'employee',
          permissions: this.getDefaultPermissions()
        },
        createdAt: new Date(),
        updatedAt: new Date()
      };

      return user;
    }, undefined, (error) => {
      this.logger.error('Error in loadUserFromSheets', { userId, error: error.message });
    });
  }

  private async sendMessage(chatId: number, text: string, options?: any): Promise<void> {
    try {
      await this.bot.sendMessage(chatId, text, options);
    } catch (error) {
      this.logger.error('Error sending message', { chatId, error: error.message });
      throw new AppError('Failed to send message', 500, 'SEND_MESSAGE_ERROR', error);
    }
  }

  // üìã VALIDATION METHODS
  private validateName(name: any): boolean {
    return TypeSafeHelpers.Validation.isValidFullName(name);
  }

  private validateDepartment(department: any): boolean {
    const validDepartments = [
      'Marketing', 'PPC', 'Target/Kris', 'Target/Lera', 
      'Design', 'SMM', 'Sales', 'HR', 'CEO'
    ];
    return validDepartments.some(valid => 
      TypeSafeHelpers.String.safeEquals(department, valid)
    );
  }

  private validateTeam(team: any): boolean {
    const validTeams = [
      'PPC Team', 'Target/Kris Team', 'Target/Lera Team',
      'Design Team', 'SMM Team', 'Sales Team', 'HR Team', 'CEO'
    ];
    return validTeams.some(valid => 
      TypeSafeHelpers.String.safeEquals(team, valid)
    );
  }

  private validatePosition(position: any): boolean {
    const validPositions = [
      'PM', 'PPC Specialist', 'Targetologist', 'Designer', 
      'Head of Design', 'Motion Designer', 'Static Designer', 
      'Video Designer', 'SMM Designer', 'Sales Manager', 
      'HR Manager', 'CEO', 'SMM Head', 'SMM Specialist', 'Producer'
    ];
    return validPositions.some(valid => 
      TypeSafeHelpers.String.safeEquals(position, valid)
    );
  }

  private validateWorkMode(mode: any): boolean {
    const validModes = ['Hybrid', 'Remote', 'Office'];
    return validModes.some(valid => 
      TypeSafeHelpers.String.safeEquals(mode, valid)
    );
  }

  private validateVacationDate(date: any): boolean {
    return TypeSafeHelpers.Validation.isValidVacationDate(date);
  }

  private validateVacationDays(days: any): boolean {
    return TypeSafeHelpers.Validation.isValidVacationDays(days);
  }

  private parseDate(dateStr: any): Date | null {
    return TypeSafeHelpers.Date.safeParseDate(dateStr);
  }

  private generateRequestId(): string {
    return `REQ_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private getDefaultPermissions(): any[] {
    return [
      { action: 'view_own_data', resource: 'profile', allowed: true },
      { action: 'request_vacation', resource: 'vacations', allowed: true },
      { action: 'report_late', resource: 'attendance', allowed: true },
      { action: 'report_remote', resource: 'attendance', allowed: true }
    ];
  }

  // üé® KEYBOARD CREATION
  private createDepartmentKeyboard(): ReplyKeyboard {
    return {
      keyboard: [
        ['Marketing'], ['PPC'], ['Target/Kris'], ['Target/Lera'],
        ['Design'], ['SMM'], ['Sales'], ['HR'], ['CEO']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    };
  }

  private createTeamKeyboard(department: string): ReplyKeyboard {
    const teams: { [key: string]: string[] } = {
      'Marketing': [['Marketing Team']],
      'PPC': [['PPC Team']],
      'Target/Kris': [['Target/Kris Team']],
      'Target/Lera': [['Target/Lera Team']],
      'Design': [['Design Team']],
      'SMM': [['SMM Team']],
      'Sales': [['Sales Team']],
      'HR': [['HR Team']],
      'CEO': [['CEO']]
    };

    return {
      keyboard: teams[department] || [['Unknown Team']],
      resize_keyboard: true,
      one_time_keyboard: true
    };
  }

  private createPositionKeyboard(department: string): ReplyKeyboard {
    const positions: { [key: string]: string[] } = {
      'Marketing': [['PM'], ['Marketing Specialist']],
      'PPC': [['PPC Specialist'], ['PPC Manager']],
      'Target/Kris': [['Targetologist'], ['Team Lead']],
      'Target/Lera': [['Targetologist'], ['Team Lead']],
      'Design': [['Designer'], ['Head of Design'], ['Motion Designer'], ['Static Designer'], ['Video Designer']],
      'SMM': [['SMM Designer'], ['SMM Head'], ['SMM Specialist'], ['Producer']],
      'Sales': [['Sales Manager'], ['Sales Specialist']],
      'HR': [['HR Manager'], ['HR Specialist']],
      'CEO': [['CEO']]
    };

    return {
      keyboard: positions[department] || [['Employee']],
      resize_keyboard: true,
      one_time_keyboard: true
    };
  }

  private createWorkModeKeyboard(): ReplyKeyboard {
    return {
      keyboard: [['Hybrid'], ['Remote'], ['Office']],
      resize_keyboard: true,
      one_time_keyboard: true
    };
  }

  // üì± MESSAGE HANDLERS
  private async sendWelcomeMessage(chatId: number): Promise<void> {
    const keyboard: ReplyKeyboard = {
      keyboard: [['üöÄ –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é']],
      resize_keyboard: true,
      one_time_keyboard: true
    };

    await this.sendMessage(chatId, 
      'üåü **–ü—Ä–∏–≤—ñ—Ç –∑—ñ—Ä–æ—á–∫–∞!**\n\n' +
      '–Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ç–≤–æ—ó–º HR. –í–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –º–µ–Ω–µ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏. –Ø —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —Ç–æ–±—ñ –≤ –Ω–∞–≥–æ–¥—ñ.\n\n' +
      '–ü–æ—á–Ω—É –∑ —Ç–æ–≥–æ, —â–æ –ø—Ä–æ—à—É —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–∏ –Ω–∞–¥–∞–ª—ñ —è –º—ñ–≥ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ.',
      { reply_markup: keyboard, parse_mode: 'Markdown' }
    );
  }

  private async sendRegisteredWelcomeMessage(chatId: number, userData: any): Promise<void> {
    await this.sendMessage(chatId, 
      'üéâ **–°—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä –º–∏ –∑–Ω–∞–π–æ–º—ñ —Ç—Ä–æ—à–∫–∏ –±—ñ–ª—å—à–µ!**\n\n' +
      '–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –º–æ—ó–º —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª–æ–º. –Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –∑:\n\n' +
      '‚Ä¢ üèñÔ∏è –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è–º –≤—ñ–¥–ø—É—Å—Ç–æ–∫\n' +
      '‚Ä¢ ‚è∞ –í—ñ–¥–º—ñ—Ç–∫–æ—é —Å–ø—ñ–∑–Ω–µ–Ω—å\n' +
      '‚Ä¢ üè† –ó–∞—è–≤–∫–∞–º–∏ –Ω–∞ remote —Ä–æ–±–æ—Ç—É\n' +
      '‚Ä¢ üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–º–∏\n' +
      '‚Ä¢ üìä –ü–µ—Ä–µ–≥–ª—è–¥–æ–º –∑–≤—ñ—Ç—ñ–≤\n' +
      '‚Ä¢ üí° –ü–æ–¥–∞—á–µ—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π\n' +
      '‚Ä¢ üö® –¢–µ—Ä–º—ñ–Ω–æ–≤–∏–º–∏ –∑–∞–ø–∏—Ç–∞–º–∏\n\n' +
      '–Ø–∫—â–æ –±—É–¥—É—Ç—å –ø–∏—Ç–∞–Ω–Ω—è, –∑–≤–µ—Ä—Ç–∞–π—Å—è –¥–æ HR!'
    );
  }

  private async showMainMenu(chatId: number): Promise<void> {
    const keyboard: ReplyKeyboard = {
      keyboard: [
        ['üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∞', '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è'],
        ['üè† Remote', 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π'],
        ['üìä –ó–≤—ñ—Ç–∏', 'üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó'],
        ['üö® ASAP', 'üéÇ –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è'],
        ['üìã –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è', 'üë§ –ü—Ä–æ—Ñ—ñ–ª—å'],
        ['üÜò –î–æ–ø–æ–º–æ–≥–∞']
      ],
      resize_keyboard: true
    };

    await this.sendMessage(chatId, 
      'üè† **–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é HR –ë–æ—Ç–∞**\n\n' +
      '–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—É–Ω–∫—Ü—ñ—é:',
      { reply_markup: keyboard }
    );
  }

  // üîß PLACEHOLDER METHODS (to be implemented)
  private async handleLateArrival(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, '‚è∞ –§—É–Ω–∫—Ü—ñ—è —Å–ø—ñ–∑–Ω–µ–Ω—å –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleRemoteWork(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üè† –§—É–Ω–∫—Ü—ñ—è remote —Ä–æ–±–æ—Ç–∏ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleSickLeave(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üè• –§—É–Ω–∫—Ü—ñ—è –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏—Ö –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleReports(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üìä –§—É–Ω–∫—Ü—ñ—è –∑–≤—ñ—Ç—ñ–≤ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleSuggestions(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üí° –§—É–Ω–∫—Ü—ñ—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleASAPRequest(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üö® –§—É–Ω–∫—Ü—ñ—è ASAP –∑–∞–ø–∏—Ç—ñ–≤ –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleBirthdays(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üéÇ –§—É–Ω–∫—Ü—ñ—è –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async handleSurveys(message: TelegramMessage, user: User): Promise<void> {
    await this.sendMessage(message.chat.id, 'üìã –§—É–Ω–∫—Ü—ñ—è –æ–ø–∏—Ç—É–≤–∞–Ω—å –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
  }

  private async showUserProfile(chatId: number, user: User): Promise<void> {
    await this.sendMessage(chatId, 
      `üë§ **–í–∞—à –ø—Ä–æ—Ñ—ñ–ª—å**\n\n` +
      `**–Ü–º'—è:** ${user.fullName}\n` +
      `**–í—ñ–¥–¥—ñ–ª:** ${user.department}\n` +
      `**–ö–æ–º–∞–Ω–¥–∞:** ${user.team}\n` +
      `**–ü–æ—Å–∞–¥–∞:** ${user.position}\n` +
      `**–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:** ${user.birthDate.toLocaleDateString()}\n` +
      `**–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏:** ${user.firstWorkDay.toLocaleDateString()}\n` +
      `**–†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏:** ${user.workMode}`
    );
  }

  private async showHelp(chatId: number): Promise<void> {
    await this.sendMessage(chatId, 
      'üÜò **–î–æ–ø–æ–º–æ–≥–∞**\n\n' +
      '–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è –∞–±–æ –ø—Ä–æ–±–ª–µ–º–∏, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR –º–µ–Ω–µ–¥–∂–µ—Ä–∞.\n\n' +
      '**–û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n' +
      '/start - –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é\n' +
      'üè† –ì–æ–ª–æ–≤–Ω–∞ - –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é'
    );
  }

  private async processCallbackQuery(callbackQuery: any): Promise<void> {
    // Handle callback queries from inline keyboards
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    try {
      switch (data) {
        case 'main_menu':
          await this.showMainMenu(chatId);
          break;
        case 'vacation_plan':
          await this.sendMessage(chatId, '–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–ø—É—Å—Ç–∫–∏ (–î–î.–ú–ú.–†–†–†–†):');
          break;
        default:
          await this.sendMessage(chatId, '–§—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
      }
    } catch (error) {
      this.logger.error('Error processing callback query', { data, error: error.message });
    }
  }

  // üîß GOOGLE SHEETS METHODS (placeholders)
  private async saveUserToSheets(user: User): Promise<void> {
    // Implementation for saving user to Google Sheets
    this.logger.info('User saved to sheets', { userId: user.telegramId });
  }

  private async loadUserFromSheets(userId: number): Promise<User | undefined> {
    // Implementation for loading user from Google Sheets
    return undefined;
  }

  private async saveVacationRequest(request: VacationRequest): Promise<void> {
    // Implementation for saving vacation request to Google Sheets
    this.logger.info('Vacation request saved to sheets', { requestId: request.requestId });
  }

  private async checkVacationConflicts(
    startDate: Date, 
    endDate: Date, 
    department: string, 
    team: string,
    excludeUserId?: number
  ): Promise<any[]> {
    return TypeSafeHelpers.Error.safeExecuteAsync(async () => {
      if (!this.doc) return [];

      const vacationsSheet = this.doc.sheetsByTitle['Vacations'];
      if (!vacationsSheet) return [];

      const rows = await vacationsSheet.getRows();
      
      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
      const conflicts = TypeSafeHelpers.Sheets.safeCheckVacationConflicts(
        rows,
        startDate,
        endDate,
        department,
        team,
        excludeUserId
      );

      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–µ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
      return TypeSafeHelpers.Array.safeMap(conflicts, (row) => {
        const userId = TypeSafeHelpers.Number.safeParseInt(
          TypeSafeHelpers.Sheets.safeGet(row, 'UserID', '')
        );
        const fullName = TypeSafeHelpers.String.safeString(
          TypeSafeHelpers.Sheets.safeGet(row, 'FullName', '')
        );
        const start = TypeSafeHelpers.Date.safeParseDate(
          TypeSafeHelpers.Sheets.safeGet(row, 'StartDate', '')
        );
        const end = TypeSafeHelpers.Date.safeParseDate(
          TypeSafeHelpers.Sheets.safeGet(row, 'EndDate', '')
        );

        return {
          userId,
          fullName,
          startDate: start,
          endDate: end
        };
      }).filter(conflict => 
        conflict.fullName && 
        conflict.startDate && 
        conflict.endDate
      );

    }, [], (error) => {
      this.logger.error('Error checking vacation conflicts', { 
        startDate, 
        endDate, 
        department, 
        team, 
        error: error.message 
      });
    });
  }

  private async getVacationBalance(userId: number): Promise<any> {
    return TypeSafeHelpers.Error.safeExecuteAsync(async () => {
      if (!this.doc) {
        return { remainingDays: 24, usedDays: 0, totalDays: 24 };
      }

      const balanceSheet = this.doc.sheetsByTitle['VacationBalance'];
      if (!balanceSheet) {
        return { remainingDays: 24, usedDays: 0, totalDays: 24 };
      }

      const rows = await balanceSheet.getRows();
      
      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–æ—à—É–∫ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const balanceRow = TypeSafeHelpers.Array.safeFind(rows, (row) => {
        const rowUserId = TypeSafeHelpers.Number.safeParseInt(
          TypeSafeHelpers.Sheets.safeGet(row, 'UserID', '')
        );
        return rowUserId === userId;
      });

      if (!balanceRow) {
        return { remainingDays: 24, usedDays: 0, totalDays: 24 };
      }

      // ‚úÖ –ë–µ–∑–ø–µ—á–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É
      const totalDays = TypeSafeHelpers.Number.safeParseInt(
        TypeSafeHelpers.Sheets.safeGet(balanceRow, 'TotalDays', 24)
      );
      const usedDays = TypeSafeHelpers.Number.safeParseInt(
        TypeSafeHelpers.Sheets.safeGet(balanceRow, 'UsedDays', 0)
      );
      const remainingDays = TypeSafeHelpers.Number.safeSubtract(totalDays, usedDays);

      return {
        totalDays,
        usedDays,
        remainingDays: Math.max(0, remainingDays)
      };

    }, { remainingDays: 24, usedDays: 0, totalDays: 24 }, (error) => {
      this.logger.error('Error getting vacation balance', { userId, error: error.message });
    });
  }

  private async notifyPMAboutVacationRequest(request: VacationRequest, user: User): Promise<void> {
    // Implementation for notifying PM
    this.logger.info('PM notified about vacation request', { requestId: request.requestId });
  }

  private async notifyHRAboutVacationRequest(request: VacationRequest, user: User): Promise<void> {
    // Implementation for notifying HR
    this.logger.info('HR notified about vacation request', { requestId: request.requestId });
  }
}

// üöÄ START THE BOT
const hrBot = new HRBot();

// üõ°Ô∏è ERROR HANDLING
process.on('uncaughtException', (error: Error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason: any, promise: Promise<any>) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

export default HRBot;
