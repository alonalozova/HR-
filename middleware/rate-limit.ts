/**
 * üö¶ RATE LIMITING MIDDLEWARE
 * –°–∏—Å—Ç–µ–º–∞ –æ–±–º–µ–∂–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è HR –±–æ—Ç–∞
 */

import { Request, Response, NextFunction } from 'express';
import { TypeSafeHelpers } from '../utils/type-safe-helpers';

// üéØ INTERFACES
interface RateLimitRule {
  windowMs: number; // –ß–∞—Å –≤—ñ–∫–Ω–∞ –≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö
  maxRequests: number; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤
  skipSuccessfulRequests?: boolean; // –ü—Ä–æ–ø—É—Å–∫–∞—Ç–∏ —É—Å–ø—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏
  skipFailedRequests?: boolean; // –ü—Ä–æ–ø—É—Å–∫–∞—Ç–∏ –Ω–µ–≤–¥–∞–ª—ñ –∑–∞–ø–∏—Ç–∏
  keyGenerator?: (req: Request) => string; // –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á—ñ–≤
  message?: string; // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—ñ –ª—ñ–º—ñ—Ç—É
  statusCode?: number; // HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
}

interface RateLimitConfig {
  [endpoint: string]: RateLimitRule;
}

interface RateLimitEntry {
  count: number;
  resetTime: number;
  firstRequest: number;
}

// üö¶ RATE LIMITING MIDDLEWARE
export class RateLimitMiddleware {
  private static store = new Map<string, RateLimitEntry>();
  private static cleanupInterval: NodeJS.Timeout;

  // –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è rate limiting
  private static readonly RATE_LIMIT_CONFIG: RateLimitConfig = {
    // –ó–∞–≥–∞–ª—å–Ω—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    'default': {
      windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
      maxRequests: 100,
      message: 'Too many requests, please try again later.',
      statusCode: 429
    },

    // Webhook –æ–±–º–µ–∂–µ–Ω–Ω—è
    'webhook': {
      windowMs: 60 * 1000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
      maxRequests: 30,
      message: 'Too many webhook requests, please slow down.',
      statusCode: 429
    },

    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è
    'auth': {
      windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
      maxRequests: 5,
      message: 'Too many authentication attempts, please try again later.',
      statusCode: 429
    },

    // –í—ñ–¥–ø—É—Å—Ç–∫–∏
    'vacations': {
      windowMs: 60 * 1000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
      maxRequests: 10,
      message: 'Too many vacation requests, please slow down.',
      statusCode: 429
    },

    // –ó–≤—ñ—Ç–∏
    'reports': {
      windowMs: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω
      maxRequests: 20,
      message: 'Too many report requests, please try again later.',
      statusCode: 429
    },

    // API –∑–∞–ø–∏—Ç–∏
    'api': {
      windowMs: 60 * 1000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
      maxRequests: 60,
      message: 'API rate limit exceeded, please slow down.',
      statusCode: 429
    },

    // Health check
    'health': {
      windowMs: 60 * 1000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
      maxRequests: 1000,
      message: 'Health check rate limit exceeded.',
      statusCode: 429
    }
  };

  // IP –±—ñ–ª–ª—ñ—Å—Ç–∏
  private static readonly WHITELIST_IPS = [
    '127.0.0.1',
    '::1',
    '::ffff:127.0.0.1'
  ];

  // IP –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
  private static readonly BLACKLIST_IPS = new Set<string>();

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î rate limiting middleware
   */
  static initialize(): void {
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏ –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
    this.cleanupInterval = setInterval(() => {
      this.cleanup();
    }, 5 * 60 * 1000);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–µ middleware –¥–ª—è rate limiting
   */
  static rateLimit(endpoint: string = 'default') {
    return (req: Request, res: Response, next: NextFunction) => {
      try {
        const config = this.RATE_LIMIT_CONFIG[endpoint] || this.RATE_LIMIT_CONFIG['default'];
        const key = this.generateKey(req, config);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ IP –±—ñ–ª–ª—ñ—Å—Ç–∏
        if (this.isWhitelisted(req)) {
          return next();
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ IP –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
        if (this.isBlacklisted(req)) {
          return res.status(403).json({
            error: 'Forbidden',
            message: 'Your IP address is blocked.'
          });
        }

        // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω
        const current = this.getCurrentState(key, config);
        
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ª—ñ–º—ñ—Ç
        if (current.count >= config.maxRequests) {
          // –õ–æ–≥—É—î–º–æ –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è –ª—ñ–º—ñ—Ç—É
          this.logRateLimitExceeded(req, config, current);
          
          // –ë–ª–æ–∫—É—î–º–æ IP –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ–º—É –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—ñ
          if (current.count >= config.maxRequests * 2) {
            this.blacklistIP(req.ip || 'unknown');
          }

          return res.status(config.statusCode || 429).json({
            error: 'Rate limit exceeded',
            message: config.message || 'Too many requests',
            retryAfter: Math.ceil((current.resetTime - Date.now()) / 1000)
          });
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫
        this.incrementCounter(key, config);

        // –î–æ–¥–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        res.set({
          'X-RateLimit-Limit': config.maxRequests.toString(),
          'X-RateLimit-Remaining': Math.max(0, config.maxRequests - current.count - 1).toString(),
          'X-RateLimit-Reset': new Date(current.resetTime).toISOString()
        });

        next();
      } catch (error) {
        console.error('Rate limit middleware error:', error);
        // –ü—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–ø–∏—Ç
        next();
      }
    };
  }

  /**
   * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π rate limiter –¥–ª—è Telegram webhook
   */
  static telegramWebhook() {
    return this.rateLimit('webhook');
  }

  /**
   * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π rate limiter –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
   */
  static auth() {
    return this.rateLimit('auth');
  }

  /**
   * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π rate limiter –¥–ª—è –≤—ñ–¥–ø—É—Å—Ç–æ–∫
   */
  static vacations() {
    return this.rateLimit('vacations');
  }

  /**
   * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π rate limiter –¥–ª—è –∑–≤—ñ—Ç—ñ–≤
   */
  static reports() {
    return this.rateLimit('reports');
  }

  /**
   * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π rate limiter –¥–ª—è API
   */
  static api() {
    return this.rateLimit('api');
  }

  /**
   * –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π rate limiter –¥–ª—è health check
   */
  static health() {
    return this.rateLimit('health');
  }

  /**
   * –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π rate limiter (–∑–º–µ–Ω—à—É—î –ª—ñ–º—ñ—Ç –ø—Ä–∏ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ)
   */
  static adaptive() {
    return (req: Request, res: Response, next: NextFunction) => {
      const ip = req.ip || 'unknown';
      const userAgent = req.get('User-Agent') || '';
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–æ–∑—Ä–∏
      const suspicionLevel = this.calculateSuspicionLevel(req);
      
      // –ê–¥–∞–ø—Ç—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      const baseConfig = this.RATE_LIMIT_CONFIG['default'];
      const adaptiveConfig: RateLimitRule = {
        ...baseConfig,
        maxRequests: Math.max(1, Math.floor(baseConfig.maxRequests * (1 - suspicionLevel * 0.5))),
        windowMs: Math.max(60 * 1000, baseConfig.windowMs * (1 + suspicionLevel))
      };

      const key = this.generateKey(req, adaptiveConfig);
      const current = this.getCurrentState(key, adaptiveConfig);
      
      if (current.count >= adaptiveConfig.maxRequests) {
        return res.status(429).json({
          error: 'Rate limit exceeded',
          message: 'Suspicious activity detected, rate limit reduced.',
          retryAfter: Math.ceil((current.resetTime - Date.now()) / 1000)
        });
      }

      this.incrementCounter(key, adaptiveConfig);
      next();
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä—É—î –∫–ª—é—á –¥–ª—è rate limiting
   */
  private static generateKey(req: Request, config: RateLimitRule): string {
    if (config.keyGenerator) {
      return config.keyGenerator(req);
    }

    const ip = req.ip || 'unknown';
    const telegramId = this.extractTelegramId(req);
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Telegram ID —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —ñ–Ω–∞–∫—à–µ IP
    const identifier = telegramId ? `user_${telegramId}` : `ip_${ip}`;
    const window = Math.floor(Date.now() / config.windowMs);
    
    return `${identifier}_${window}`;
  }

  /**
   * –í–∏—Ç—è–≥—É—î Telegram ID –∑ –∑–∞–ø–∏—Ç—É
   */
  private static extractTelegramId(req: Request): number | null {
    // Telegram webhook format
    if (req.body?.message?.from?.id) {
      return TypeSafeHelpers.Number.safeParseInt(req.body.message.from.id);
    }
    
    // API format
    if (req.headers['x-telegram-id']) {
      return TypeSafeHelpers.Number.safeParseInt(req.headers['x-telegram-id'] as string);
    }
    
    return null;
  }

  /**
   * –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω rate limiting
   */
  private static getCurrentState(key: string, config: RateLimitRule): RateLimitEntry {
    const now = Date.now();
    const existing = this.store.get(key);
    
    if (!existing || now >= existing.resetTime) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
      const newEntry: RateLimitEntry = {
        count: 0,
        resetTime: now + config.windowMs,
        firstRequest: now
      };
      this.store.set(key, newEntry);
      return newEntry;
    }
    
    return existing;
  }

  /**
   * –ó–±—ñ–ª—å—à—É—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∑–∞–ø–∏—Ç—ñ–≤
   */
  private static incrementCounter(key: string, config: RateLimitRule): void {
    const current = this.store.get(key);
    if (current) {
      current.count++;
      this.store.set(key, current);
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ IP –≤ –±—ñ–ª–ª—ñ—Å—Ç—ñ
   */
  private static isWhitelisted(req: Request): boolean {
    const ip = req.ip || 'unknown';
    return this.WHITELIST_IPS.includes(ip);
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ IP –≤ –±–ª–æ–∫—É–≤–∞–Ω–Ω—ñ
   */
  private static isBlacklisted(req: Request): boolean {
    const ip = req.ip || 'unknown';
    return this.BLACKLIST_IPS.has(ip);
  }

  /**
   * –ë–ª–æ–∫—É—î IP –∞–¥—Ä–µ—Å—É
   */
  private static blacklistIP(ip: string): void {
    this.BLACKLIST_IPS.add(ip);
    console.warn(`IP ${ip} has been blacklisted due to excessive requests`);
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ä–æ–∑–±–ª–æ–∫—É—î–º–æ —á–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É
    setTimeout(() => {
      this.BLACKLIST_IPS.delete(ip);
      console.info(`IP ${ip} has been unblacklisted`);
    }, 60 * 60 * 1000);
  }

  /**
   * –û–±—á–∏—Å–ª—é—î —Ä—ñ–≤–µ–Ω—å –ø—ñ–¥–æ–∑—Ä–∏
   */
  private static calculateSuspicionLevel(req: Request): number {
    let suspicion = 0;
    
    // –ü—ñ–¥–æ–∑—Ä—ñ–ª–∏–π User-Agent
    const userAgent = req.get('User-Agent') || '';
    if (userAgent.includes('bot') || userAgent.includes('crawler')) {
      suspicion += 0.3;
    }
    
    // –ß–∞—Å—Ç—ñ –∑–∞–ø–∏—Ç–∏ –∑ –æ–¥–Ω–æ–≥–æ IP
    const ip = req.ip || 'unknown';
    const ipKey = `ip_${ip}`;
    const ipRequests = Array.from(this.store.keys())
      .filter(key => key.startsWith(ipKey))
      .length;
    
    if (ipRequests > 50) {
      suspicion += 0.4;
    }
    
    // –ü—ñ–¥–æ–∑—Ä—ñ–ª—ñ —à–ª—è—Ö–∏
    const suspiciousPaths = ['/admin', '/config', '/.env'];
    if (suspiciousPaths.some(path => req.path.includes(path))) {
      suspicion += 0.5;
    }
    
    return Math.min(1, suspicion);
  }

  /**
   * –õ–æ–≥—É—î –ø–µ—Ä–µ–≤–∏—â–µ–Ω–Ω—è rate limit
   */
  private static logRateLimitExceeded(req: Request, config: RateLimitRule, current: RateLimitEntry): void {
    const ip = req.ip || 'unknown';
    const userAgent = req.get('User-Agent') || '';
    const telegramId = this.extractTelegramId(req);
    
    console.warn(`Rate limit exceeded:`, {
      ip,
      telegramId,
      userAgent,
      path: req.path,
      method: req.method,
      limit: config.maxRequests,
      current: current.count,
      resetTime: new Date(current.resetTime).toISOString()
    });
  }

  /**
   * –û—á–∏—â–∞—î –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏
   */
  private static cleanup(): void {
    const now = Date.now();
    const keysToDelete: string[] = [];
    
    for (const [key, entry] of this.store.entries()) {
      if (now >= entry.resetTime) {
        keysToDelete.push(key);
      }
    }
    
    keysToDelete.forEach(key => this.store.delete(key));
    
    if (keysToDelete.length > 0) {
      console.debug(`Cleaned up ${keysToDelete.length} expired rate limit entries`);
    }
  }

  /**
   * –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É rate limiting
   */
  static getStats(): {
    totalEntries: number;
    entriesByIP: Record<string, number>;
    blockedIPs: string[];
    whitelistedIPs: string[];
  } {
    const entriesByIP: Record<string, number> = {};
    
    for (const [key, entry] of this.store.entries()) {
      const ip = key.split('_')[1]; // –§–æ—Ä–º–∞—Ç: type_ip_window
      entriesByIP[ip] = (entriesByIP[ip] || 0) + entry.count;
    }
    
    return {
      totalEntries: this.store.size,
      entriesByIP,
      blockedIPs: Array.from(this.BLACKLIST_IPS),
      whitelistedIPs: [...this.WHITELIST_IPS]
    };
  }

  /**
   * –°–∫–∏–¥–∞—î rate limit –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞/IP
   */
  static resetLimit(identifier: string): void {
    const keysToDelete = Array.from(this.store.keys())
      .filter(key => key.includes(identifier));
    
    keysToDelete.forEach(key => this.store.delete(key));
    
    console.info(`Reset rate limit for ${identifier}, removed ${keysToDelete.length} entries`);
  }

  /**
   * –î–æ–¥–∞—î IP –¥–æ –±—ñ–ª–ª—ñ—Å—Ç–∏
   */
  static whitelistIP(ip: string): void {
    if (!this.WHITELIST_IPS.includes(ip)) {
      this.WHITELIST_IPS.push(ip);
      console.info(`IP ${ip} added to whitelist`);
    }
  }

  /**
   * –í–∏–¥–∞–ª—è—î IP –∑ –±—ñ–ª–ª—ñ—Å—Ç–∏
   */
  static unwhitelistIP(ip: string): void {
    const index = this.WHITELIST_IPS.indexOf(ip);
    if (index > -1) {
      this.WHITELIST_IPS.splice(index, 1);
      console.info(`IP ${ip} removed from whitelist`);
    }
  }

  /**
   * –ó—É–ø–∏–Ω—è—î cleanup interval
   */
  static destroy(): void {
    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
    }
  }
}

// üéØ –ó–†–£–ß–ù–Ü –§–£–ù–ö–¶–Ü–á
export const rateLimit = (endpoint?: string) => RateLimitMiddleware.rateLimit(endpoint);
export const telegramWebhook = () => RateLimitMiddleware.telegramWebhook();
export const auth = () => RateLimitMiddleware.auth();
export const vacations = () => RateLimitMiddleware.vacations();
export const reports = () => RateLimitMiddleware.reports();
export const api = () => RateLimitMiddleware.api();
export const health = () => RateLimitMiddleware.health();
export const adaptive = () => RateLimitMiddleware.adaptive();

export default RateLimitMiddleware;
