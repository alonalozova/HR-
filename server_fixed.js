/**
 * üè¢ HR –ë–û–¢ - RAILWAY DEPLOYMENT VERSION (FIXED)
 * ‚ö° –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å—ñ—è –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é Google Sheets
 */

require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ó ENVIRONMENT VARIABLES
const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const HR_CHAT_ID = process.env.HR_CHAT_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if (!BOT_TOKEN || !SPREADSHEET_ID || !HR_CHAT_ID) {
  console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ environment variables!');
  process.exit(1);
}

// ü§ñ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// üìä –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø GOOGLE SHEETS (–í–ò–ü–†–ê–í–õ–ï–ù–û)
let doc;
async function initGoogleSheets() {
  try {
    // –°—Ç–≤–æ—Ä—é—î–º–æ JWT client –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      scopes: [
        'https://www.googleapis.com/auth/spreadsheets',
      ],
    });
    
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç –∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—î—é
    doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
    
    await doc.loadInfo();
    console.log('‚úÖ Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', doc.title);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets:', error);
    return false;
  }
}

// üõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
const processedUpdates = new Set();
const CACHE_CLEANUP_INTERVAL = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

// –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
setInterval(() => {
  processedUpdates.clear();
  console.log('üßπ –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
}, CACHE_CLEANUP_INTERVAL);

// üöÄ EXPRESS MIDDLEWARE
app.use(express.json());

// üìç HEALTH CHECK ENDPOINT
app.get('/', (req, res) => {
  res.json({
    status: 'OK',
    message: 'HR Bot is running',
    timestamp: new Date().toISOString(),
    version: '1.0.1-fixed',
    sheets_connected: doc ? true : false
  });
});

// üì® WEBHOOK ENDPOINT
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    const updateId = update.update_id;
    
    // –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Telegram
    res.status(200).send('OK');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    if (processedUpdates.has(updateId)) {
      console.log(`‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç update ${updateId} –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ`);
      return;
    }
    
    processedUpdates.add(updateId);
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (update.message) {
      await processMessage(update.message);
    } else if (update.callback_query) {
      await processCallback(update.callback_query);
    }
    
  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook:', error);
  }
});

// üì® –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
async function processMessage(message) {
  try {
    const chatId = message.chat.id;
    const text = message.text || '';
    const telegramId = message.from.id;
    
    console.log(`üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${telegramId}: ${text}`);
    
    if (text === '/start') {
      await showMainMenu(chatId, telegramId);
      return;
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processMessage:', error);
    await sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// üéõÔ∏è –û–ë–†–û–ë–ö–ê CALLBACK –ó–ê–ü–ò–¢–Ü–í
async function processCallback(callback) {
  try {
    const chatId = callback.message.chat.id;
    const data = callback.data;
    const telegramId = callback.from.id;
    
    console.log(`üéõÔ∏è Callback –≤—ñ–¥ ${telegramId}: ${data}`);
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
    await bot.answerCallbackQuery(callback.id);
    
    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è
    if (data === 'main_menu' || data === 'start_command' || data === 'back_main') {
      await showMainMenu(chatId, telegramId);
    } else {
      await sendMessage(chatId, `–§—É–Ω–∫—Ü—ñ—è "${data}" –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ. –ü–æ–≤–Ω–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –±—É–¥–µ –¥–æ–¥–∞–Ω–æ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º! üöÄ`);
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processCallback:', error);
  }
}

// üì§ –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const options = {
      parse_mode: 'HTML'
    };
    
    if (keyboard) {
      options.reply_markup = keyboard;
    }
    
    await bot.sendMessage(chatId, text, options);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ sendMessage:', error);
  }
}

// üìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ
async function showMainMenu(chatId, telegramId) {
  const welcomeText = `üëã <b>–ü—Ä–∏–≤—ñ—Ç!</b>

üåü –Ø —Ç–≤—ñ–π HR –ø–æ–º—ñ—á–Ω–∏–∫. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'vacation_menu' },
        { text: 'üè† Remote', callback_data: 'remote_menu' }
      ],
      [
        { text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_menu' },
        { text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_menu' }
      ],
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' },
        { text: 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥', callback_data: 'onboarding_menu' }
      ],
      [
        { text: 'üí¨ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'suggestions_menu' },
        { text: 'üö® ASAP –∑–∞–ø–∏—Ç', callback_data: 'asap_request' }
      ],
      [
        { text: '‚ùì FAQ', callback_data: 'faq_menu' },
        { text: 'ü§ñ –®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫', callback_data: 'ai_assistant' }
      ],
      [
        { text: 'üè† /start', callback_data: 'start_command' },
        { text: 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await sendMessage(chatId, welcomeText, keyboard);
}

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
async function startServer() {
  try {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Google Sheets
    const sheetsConnected = await initGoogleSheets();
    
    if (sheetsConnected) {
      console.log('‚úÖ Google Sheets —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è Google Sheets –Ω–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ, –∞–ª–µ —Å–µ—Ä–≤–µ—Ä –ø—Ä–æ–¥–æ–≤–∂—É—î —Ä–æ–±–æ—Ç—É');
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    if (WEBHOOK_URL) {
      await bot.setWebHook(`${WEBHOOK_URL}/webhook`);
      console.log('‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', `${WEBHOOK_URL}/webhook`);
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ HR Bot –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìç Health check: http://localhost:${PORT}/`);
      console.log(`üì® Webhook: ${WEBHOOK_URL}/webhook`);
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
});

// –ó–∞–ø—É—Å–∫
startServer();
