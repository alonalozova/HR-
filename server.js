/**
 * üè¢ HR –ë–û–¢ - –ü–û–í–ù–ê RAILWAY –í–ï–†–°–Ü–Ø –ó –£–°–Ü–Ñ–Æ –õ–û–ì–Ü–ö–û–Æ
 * –ü–æ—Ä—Ç–æ–≤–∞–Ω–æ –∑ HR_Bot_Complete_Final.js (Google Apps Script ‚Üí Node.js)
 */

require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');
const { JWT } = require('google-auth-library');

// ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const HR_CHAT_ID = process.env.HR_CHAT_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

if (!BOT_TOKEN || !SPREADSHEET_ID || !HR_CHAT_ID) {
  console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ environment variables!');
  process.exit(1);
}

// ü§ñ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø
const bot = new TelegramBot(BOT_TOKEN);
const app = express();
let doc;

// üõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
const processedUpdates = new Set();
setInterval(() => processedUpdates.clear(), 5 * 60 * 1000);

// üíæ –ö–ï–® –î–õ–Ø –û–ü–¢–ò–ú–Ü–ó–ê–¶–Ü–á
const userCache = new Map();
const registrationCache = new Map();

// üìä –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø GOOGLE SHEETS
async function initGoogleSheets() {
  try {
    const serviceAccountAuth = new JWT({
      email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
      scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });
    
    doc = new GoogleSpreadsheet(SPREADSHEET_ID, serviceAccountAuth);
    await doc.loadInfo();
    console.log('‚úÖ Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', doc.title);
    return true;
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets:', error);
    return false;
  }
}

// üöÄ EXPRESS
app.use(express.json());

app.get('/', (req, res) => {
  res.json({
    status: 'OK',
    message: 'HR Bot is running',
    timestamp: new Date().toISOString(),
    version: '2.0.0-complete',
    sheets_connected: doc ? true : false
  });
});

app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    const updateId = update.update_id;
    
    res.status(200).send('OK');
    
    if (processedUpdates.has(updateId)) {
      console.log(`‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç ${updateId}`);
      return;
    }
    
    processedUpdates.add(updateId);
    
    if (update.message) {
      await processMessage(update.message);
    } else if (update.callback_query) {
      await processCallback(update.callback_query);
    }
  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞ webhook:', error);
  }
});

// üì® –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
async function processMessage(message) {
  try {
    const chatId = message.chat.id;
    const text = message.text || '';
    const telegramId = message.from.id;
    const username = message.from.username || '';
    const firstName = message.from.first_name || '';
    const lastName = message.from.last_name || '';
    
    console.log(`üì® ${telegramId}: ${text}`);
    
    if (text === '/start') {
      const user = await getUserInfo(telegramId);
      if (!user) {
        await startRegistration(chatId, telegramId, username, firstName, lastName);
      } else {
        await showMainMenu(chatId, telegramId);
      }
      return;
    }
    
    await handleRegistrationInput(chatId, telegramId, text);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processMessage:', error);
  }
}

// üéõÔ∏è –û–ë–†–û–ë–ö–ê CALLBACKS
async function processCallback(callback) {
  try {
    const chatId = callback.message.chat.id;
    const data = callback.data;
    const telegramId = callback.from.id;
    
    await bot.answerCallbackQuery(callback.id);
    
    const routes = {
      'vacation_menu': showVacationMenu,
      'remote_menu': showRemoteMenu,
      'late_menu': showLateMenu,
      'sick_menu': showSickMenu,
      'onboarding_menu': showOnboardingMenu,
      'my_stats': showMyStats,
      'faq_menu': showFAQMenu,
      'back_main': showMainMenu,
      'main_menu': showMainMenu,
      'start_command': showMainMenu,
      'start_registration': showRegistrationForm,
      'suggestions_menu': showSuggestionsMenu,
      'asap_request': showASAPForm,
      'ai_assistant': showAIAssistant,
      'analytics_menu': showAnalyticsMenu,
      'hr_panel': showHRPanel,
      'ceo_panel': showCEOPanel,
      'ai_vacation_help': showAIVacationHelp,
      'ai_remote_help': showAIRemoteHelp,
      'ai_late_help': showAILateHelp,
      'ai_sick_help': showAISickHelp,
      'ai_personal_tips': showAIPersonalTips,
    };
    
    if (routes[data]) {
      await routes[data](chatId, telegramId);
    } else {
      await handleSpecificAction(chatId, telegramId, data);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processCallback:', error);
  }
}

// üì§ –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const options = { parse_mode: 'HTML' };
    if (keyboard) options.reply_markup = keyboard;
    await bot.sendMessage(chatId, text, options);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ sendMessage:', error);
  }
}

// üë§ –û–¢–†–ò–ú–ê–ù–ù–Ø –ö–û–†–ò–°–¢–£–í–ê–ß–ê –ó –ö–ï–®–£–í–ê–ù–ù–Ø–ú
async function getUserInfo(telegramId) {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
    if (userCache.has(telegramId)) {
      const cached = userCache.get(telegramId);
      if (Date.now() - cached.timestamp < 5 * 60 * 1000) {
        return cached.data;
      }
    }
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Employees'];
    if (!sheet) return null;
    
    const rows = await sheet.getRows();
    const user = rows.find(row => row.get('TelegramID') == telegramId);
    
    if (user) {
      const userData = {
        fullName: user.get('FullName'),
        telegramID: user.get('TelegramID'),
        department: user.get('Department'),
        team: user.get('Team'),
        subteam: user.get('Subteam'),
        position: user.get('Position'),
        workFormat: user.get('WorkFormat'),
        birthday: user.get('Birthday'),
        startDate: user.get('StartDate')
      };
      
      userCache.set(telegramId, { data: userData, timestamp: Date.now() });
      return userData;
    }
    
    return null;
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getUserInfo:', error);
    return null;
  }
}

// üîê –û–¢–†–ò–ú–ê–ù–ù–Ø –†–û–õ–Ü
async function getUserRole(telegramId) {
  try {
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Roles'];
    if (!sheet) return 'EMP';
    
    const rows = await sheet.getRows();
    const role = rows.find(row => row.get('TelegramID') == telegramId);
    
    return role ? role.get('Role') : 'EMP';
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getUserRole:', error);
    return 'EMP';
  }
}

// üéØ –ü–û–ß–ê–¢–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
async function startRegistration(chatId, telegramId, username, firstName, lastName) {
  const welcomeText = `üëã <b>–ü—Ä–∏–≤—ñ—Ç –∑—ñ—Ä–æ—á–∫–∞!</b> üåü

ü§ñ –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ç–≤–æ—ó–º HR. –í–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –º–µ–Ω–µ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏. –Ø —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —Ç–æ–±—ñ –≤ –Ω–∞–≥–æ–¥—ñ.

üìù –ü–æ—á–Ω—É –∑ —Ç–æ–≥–æ, —â–æ –ø—Ä–æ—à—É —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–∏ –Ω–∞–¥–∞–ª—ñ —è –º—ñ–≥ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ.

–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏:`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é', callback_data: 'start_registration' }]
    ]
  };

  await sendMessage(chatId, welcomeText, keyboard);
  registrationCache.set(telegramId, { 
    step: 'start', 
    username, 
    firstName, 
    lastName,
    timestamp: Date.now()
  });
}

// üìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ
async function showMainMenu(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    const user = await getUserInfo(telegramId);
    
    let welcomeText = `üåü <b>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ HR –ë–æ—Ç–∞!</b>

ü§ñ <b>–©–æ —è –≤–º—ñ—é —Ä–æ–±–∏—Ç–∏:</b>

üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏:</b> –ø–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫, –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å—É, –∫–∞–ª–µ–Ω–¥–∞—Ä
üè† <b>Remote:</b> —Ñ—ñ–∫—Å–∞—Ü—ñ—è –≤—ñ–¥–¥–∞–ª–µ–Ω–æ—ó —Ä–æ–±–æ—Ç–∏, –ª—ñ–º—ñ—Ç–∏
‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è:</b> –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—ñ–∑–Ω–µ–Ω–Ω—è
üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π:</b> —Ñ—ñ–∫—Å–∞—Ü—ñ—è —Ö–≤–æ—Ä–æ–±–∏, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è HR
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b> –æ—Å–æ–±–∏—Å—Ç–∏–π –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å
üéØ <b>–û–Ω–±–æ—Ä–¥–∏–Ω–≥:</b> –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –Ω–æ–≤–∏—Ö —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤
üí¨ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:</b> –∞–Ω–æ–Ω—ñ–º–Ω—ñ —Ç–∞ —ñ–º–µ–Ω–Ω—ñ —ñ–¥–µ—ó
üö® <b>ASAP:</b> —Ç–µ—Ä–º—ñ–Ω–æ–≤—ñ –∑–∞–ø–∏—Ç–∏ –¥–æ HR
ü§ñ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫:</b> —à–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ –ø–æ—Ä–∞–¥–∏

üëã <b>–ü—Ä–∏–≤—ñ—Ç, ${user?.fullName || '–∫–æ–ª–µ–≥–∞'}!</b>`;

    const baseKeyboard = [
      // –û—Å–Ω–æ–≤–Ω—ñ —Ä–æ–±–æ—á—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–Ω–∞–π–≤–∞–∂–ª–∏–≤—ñ—à—ñ)
      [
        { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'vacation_menu' },
        { text: 'üè† Remote', callback_data: 'remote_menu' }
      ],
      [
        { text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_menu' },
        { text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_menu' }
      ],
      // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' },
        { text: 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥', callback_data: 'onboarding_menu' }
      ],
      // –î–æ–≤—ñ–¥–∫–∞ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞
      [
        { text: '‚ùì FAQ', callback_data: 'faq_menu' },
        { text: 'ü§ñ –®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫', callback_data: 'ai_assistant' }
      ],
      // –ú–µ–Ω—à–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
      [
        { text: 'üí¨ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'suggestions_menu' },
        { text: 'üö® ASAP –∑–∞–ø–∏—Ç', callback_data: 'asap_request' }
      ]
    ];

    if (role === 'PM' || role === 'HR' || role === 'CEO') {
      baseKeyboard.push([
        { text: 'üìã –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', callback_data: 'approvals_menu' },
        { text: 'üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data: 'analytics_menu' }
      ]);
    }

    if (role === 'HR') {
      baseKeyboard.push([
        { text: 'üë• HR –ü–∞–Ω–µ–ª—å', callback_data: 'hr_panel' },
        { text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏', callback_data: 'hr_broadcasts' }
      ]);
    }

    if (role === 'CEO') {
      baseKeyboard.push([
        { text: 'üè¢ CEO –ü–∞–Ω–µ–ª—å', callback_data: 'ceo_panel' }
      ]);
    }

    // –ö–Ω–æ–ø–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–±—Ä–∞–Ω–∞ –∑–∞ –∑–∞–ø–∏—Ç–æ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    await sendMessage(chatId, welcomeText, { inline_keyboard: baseKeyboard });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showMainMenu:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é.');
  }
}

// üèñÔ∏è –ú–ï–ù–Æ –í–Ü–î–ü–£–°–¢–û–ö
async function showVacationMenu(chatId, telegramId) {
  try {
    const balance = await getVacationBalance(telegramId);
    const canTake = await canTakeVacation(telegramId);
    
    let text = `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏</b>\n\n`;
    text += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.remaining}/${balance.annual} –¥–Ω—ñ–≤\n`;
    
    if (!canTake.allowed) {
      text += `‚ö†Ô∏è ${canTake.reason}\n`;
    }
    
    text += `\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìù –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É', callback_data: canTake.allowed ? 'vacation_request' : 'vacation_blocked' },
          { text: 'üö® –ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞', callback_data: 'vacation_emergency' }
        ],
        [
          { text: 'üìã –ú–æ—ó –∑–∞—è–≤–∫–∏', callback_data: 'vacation_my_requests' },
          { text: 'üìä –ë–∞–ª–∞–Ω—Å –¥–µ—Ç–∞–ª—ñ', callback_data: 'vacation_balance_details' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showVacationMenu:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é –≤—ñ–¥–ø—É—Å—Ç–æ–∫.');
  }
}

// üìä –û–¢–†–ò–ú–ê–ù–ù–Ø –ë–ê–õ–ê–ù–°–£ –í–Ü–î–ü–£–°–¢–ö–ò
async function getVacationBalance(telegramId) {
  try {
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['VacationBalance'];
    if (!sheet) return { annual: 24, used: 0, remaining: 24 };
    
    const rows = await sheet.getRows();
    const currentYear = new Date().getFullYear();
    const balance = rows.find(row => 
      row.get('TelegramID') == telegramId && 
      row.get('Year') == currentYear
    );
    
    if (balance) {
      return {
        annual: parseInt(balance.get('AnnualQuota')) || 24,
        used: parseInt(balance.get('Used')) || 0,
        remaining: parseInt(balance.get('Remaining')) || 24
      };
    }
    
    return { annual: 24, used: 0, remaining: 24 };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getVacationBalance:', error);
    return { annual: 24, used: 0, remaining: 24 };
  }
}

// ‚úÖ –ü–ï–†–ï–í–Ü–†–ö–ê –ú–û–ñ–õ–ò–í–û–°–¢–Ü –í–Ü–î–ü–£–°–¢–ö–ò
async function canTakeVacation(telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    if (!user?.startDate) {
      return { allowed: false, reason: '–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞' };
    }
    
    const startDate = new Date(user.startDate);
    const threeMonthsLater = new Date(startDate);
    threeMonthsLater.setMonth(threeMonthsLater.getMonth() + 3);
    
    const now = new Date();
    
    if (now < threeMonthsLater) {
      const daysLeft = Math.ceil((threeMonthsLater - now) / (1000 * 60 * 60 * 24));
      return { 
        allowed: false, 
        reason: `–î–æ –ø–µ—Ä—à–æ—ó –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—å ${daysLeft} –¥–Ω—ñ–≤ (3 –º—ñ—Å—è—Ü—ñ –∑ –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏)` 
      };
    }
    
    const balance = await getVacationBalance(telegramId);
    if (balance.remaining <= 0) {
      return { allowed: false, reason: '–ë–∞–ª–∞–Ω—Å –≤—ñ–¥–ø—É—Å—Ç–∫–∏ –≤–∏—á–µ—Ä–ø–∞–Ω–æ' };
    }
    
    return { allowed: true, reason: '' };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ canTakeVacation:', error);
    return { allowed: false, reason: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏' };
  }
}

// üè† –ú–ï–ù–Æ REMOTE
async function showRemoteMenu(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const monthStats = await getMonthRemoteStats(telegramId);
    
    let text = `üè† <b>Remote —Ä–æ–±–æ—Ç–∞</b>\n\n`;
    text += `üë§ ${user?.fullName}\n`;
    text += `üíº –§–æ—Ä–º–∞—Ç —Ä–æ–±–æ—Ç–∏: ${user?.workFormat || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n`;
    text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count}/14 –¥–Ω—ñ–≤\n\n`;
    
    if (user?.workFormat === '–û–Ω–ª–∞–π–Ω') {
      text += `‚úÖ –í–∏ –ø—Ä–∞—Ü—é—î—Ç–µ –æ–Ω–ª–∞–π–Ω - remote –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å\n`;
    } else if (monthStats.count >= 14) {
      text += `‚ö†Ô∏è –õ—ñ–º—ñ—Ç remote –¥–Ω—ñ–≤ –≤–∏—á–µ—Ä–ø–∞–Ω–æ (14/–º—ñ—Å)\n`;
    }
    
    text += `\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:`;

    const canRequestRemote = user?.workFormat === '–û–Ω–ª–∞–π–Ω' || monthStats.count < 14;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìÖ Remote —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: canRequestRemote ? 'remote_today' : 'remote_limit_reached' },
          { text: 'üìÜ Remote –Ω–∞ –¥–∞—Ç—É', callback_data: canRequestRemote ? 'remote_date' : 'remote_limit_reached' }
        ],
        [
          { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'remote_my_stats' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showRemoteMenu:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é remote.');
  }
}

// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê REMOTE –ó–ê –ú–Ü–°–Ø–¶–¨
async function getMonthRemoteStats(telegramId) {
  try {
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Remotes'];
    if (!sheet) return { count: 0 };
    
    const rows = await sheet.getRows();
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const monthRemotes = rows.filter(row => {
      if (row.get('TelegramID') != telegramId) return false;
      const date = new Date(row.get('Date'));
      return date.getMonth() + 1 === currentMonth && date.getFullYear() === currentYear;
    });
    
    return { count: monthRemotes.length };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getMonthRemoteStats:', error);
    return { count: 0 };
  }
}

// ‚è∞ –ú–ï–ù–Æ –°–ü–Ü–ó–ù–ï–ù–¨
async function showLateMenu(chatId, telegramId) {
  try {
    const monthStats = await getMonthLateStats(telegramId);
    
    let text = `‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è</b>\n\n`;
    text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count} —Ä–∞–∑—ñ–≤\n`;
    
    if (monthStats.count >= 7) {
      text += `‚ö†Ô∏è –£–≤–∞–≥–∞! –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–æ—Ä–º—É —Å–ø—ñ–∑–Ω–µ–Ω—å (7/–º—ñ—Å)\n`;
    }
    
    text += `\n–ù–∞ —Å–∫—ñ–ª—å–∫–∏ —Ö–≤–∏–ª–∏–Ω —Å–ø—ñ–∑–Ω—é—î—Ç–µ—Å—å?`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: '5 —Ö–≤', callback_data: 'late_5' },
          { text: '10 —Ö–≤', callback_data: 'late_10' },
          { text: '15 —Ö–≤', callback_data: 'late_15' }
        ],
        [
          { text: '30 —Ö–≤', callback_data: 'late_30' },
          { text: '60+ —Ö–≤', callback_data: 'late_60' }
        ],
        [
          { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'late_my_stats' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showLateMenu:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é —Å–ø—ñ–∑–Ω–µ–Ω—å.');
  }
}

// üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ü–Ü–ó–ù–ï–ù–¨ –ó–ê –ú–Ü–°–Ø–¶–¨
async function getMonthLateStats(telegramId) {
  try {
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Lates'];
    if (!sheet) return { count: 0 };
    
    const rows = await sheet.getRows();
    const currentMonth = new Date().getMonth() + 1;
    const currentYear = new Date().getFullYear();
    
    const monthLates = rows.filter(row => {
      if (row.get('TelegramID') != telegramId) return false;
      const date = new Date(row.get('Date'));
      return date.getMonth() + 1 === currentMonth && date.getFullYear() === currentYear;
    });
    
    return { count: monthLates.length };
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ getMonthLateStats:', error);
    return { count: 0 };
  }
}

// üè• –ú–ï–ù–Æ –õ–Ü–ö–ê–†–ù–Ø–ù–û–ì–û
async function showSickMenu(chatId, telegramId) {
  const text = `üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π</b>\n\n–í–∏ –∑–∞—Ö–≤–æ—Ä—ñ–ª–∏? –ó–∞—Ñ—ñ–∫—Å—É—î–º–æ —Ü–µ –¥–ª—è HR —Ç–∞ –≤–∞—à–æ–≥–æ PM.\n\n–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'ü§í –ó–∞—Ö–≤–æ—Ä—ñ–≤ —Å—å–æ–≥–æ–¥–Ω—ñ', callback_data: 'sick_today' },
        { text: 'üìÖ –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π –Ω–∞ –ø–µ—Ä—ñ–æ–¥', callback_data: 'sick_period' }
      ],
      [
        { text: '‚úÖ –û–¥—É–∂–∞–≤, –≤–∏—Ö–æ–¥–∂—É', callback_data: 'sick_recovery' }
      ],
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'sick_my_stats' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// üìä –ú–û–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
async function showMyStats(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const vacationBalance = await getVacationBalance(telegramId);
    const remoteStats = await getMonthRemoteStats(telegramId);
    const lateStats = await getMonthLateStats(telegramId);
    
    const currentMonth = new Date().toLocaleDateString('uk-UA', { month: 'long', year: 'numeric' });
    
    let text = `üìä <b>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n`;
    text += `üë§ ${user?.fullName}\n`;
    text += `üíº ${user?.position}\n`;
    text += `üè¢ ${user?.department}`;
    if (user?.team) text += ` / ${user?.team}`;
    text += `\n\n`;
    
    text += `üèñÔ∏è <b>–í—ñ–¥–ø—É—Å—Ç–∫–∏:</b>\n`;
    text += `üí∞ –ë–∞–ª–∞–Ω—Å: ${vacationBalance.remaining}/${vacationBalance.annual} –¥–Ω—ñ–≤\n`;
    text += `üìÖ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ: ${vacationBalance.used} –¥–Ω—ñ–≤\n\n`;
    
    text += `üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${currentMonth}:</b>\n`;
    text += `üè† Remote: ${remoteStats.count} –¥–Ω—ñ–≤`;
    if (user?.workFormat !== '–û–Ω–ª–∞–π–Ω') text += ` (–ª—ñ–º—ñ—Ç: 14)`;
    text += `\n`;
    text += `‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è: ${lateStats.count} —Ä–∞–∑—ñ–≤`;
    if (lateStats.count >= 7) text += ` ‚ö†Ô∏è`;
    text += `\n`;

    const keyboard = {
      inline_keyboard: [
        [
          { text: 'üìã –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_stats' }
        ],
        [
          { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
        ]
      ]
    };

    await sendMessage(chatId, text, keyboard);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showMyStats:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
  }
}

// –î–û–î–ê–¢–ö–û–í–Ü –ú–ï–ù–Æ (–ø—Ä–æ–¥–æ–≤–∂—É—é –¥–∞–ª—ñ...)
async function showOnboardingMenu(chatId, telegramId) {
  const text = `üéØ <b>–û–Ω–±–æ—Ä–¥–∏–Ω–≥ —Ç–∞ –Ω–∞–≤—á–∞–Ω–Ω—è</b>

üìö –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏ –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü—ñ—ó:
‚Ä¢ Notion —Ñ–∞–π–ª –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
‚Ä¢ –í—ñ–¥–µ–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è CEO
‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω—ñ—ó

–û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìñ Notion –º–∞—Ç–µ—Ä—ñ–∞–ª–∏', url: 'https://superficial-sort-084.notion.site/3b5c00ad8a42473bbef49bb26f076ebd' }
      ],
      [
        { text: 'üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–ø–∞–Ω—ñ—ó', callback_data: 'company_structure' },
        { text: 'üìπ –í—ñ–¥–µ–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏', callback_data: 'onboarding_videos' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

async function showFAQMenu(chatId, telegramId) {
  const text = `‚ùì <b>FAQ - –ß–∞—Å—Ç—ñ –ø–∏—Ç–∞–Ω–Ω—è</b>

–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üèñÔ∏è –ü—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'faq_vacation' },
        { text: 'üè† –ü—Ä–æ remote', callback_data: 'faq_remote' }
      ],
      [
        { text: '‚è∞ –ü—Ä–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'faq_late' },
        { text: 'üè• –ü—Ä–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'faq_sick' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

async function showRegistrationForm(chatId, telegramId) {
  const text = `üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ —Å–∏—Å—Ç–µ–º—ñ</b>

–ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –≤—Å—ñ –ø–æ–ª—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:

<b>–ö—Ä–æ–∫ 1:</b> –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
  registrationCache.set(telegramId, { 
    ...registrationCache.get(telegramId),
    step: 'surname',
    timestamp: Date.now()
  });
}

async function showSuggestionsMenu(chatId, telegramId) {
  const text = `üí¨ <b>–ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è</b>

–í–∞—à—ñ —ñ–¥–µ—ó –≤–∞–∂–ª–∏–≤—ñ –¥–ª—è –Ω–∞—Å! –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó:`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üìù –ê–Ω–æ–Ω—ñ–º–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', callback_data: 'suggestion_anonymous' },
        { text: 'üë§ –Ü–º–µ–Ω–Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è', callback_data: 'suggestion_named' }
      ],
      [
        { text: 'üìä –ú–æ—ó –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'my_suggestions' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

async function showASAPForm(chatId, telegramId) {
  const user = await getUserInfo(telegramId);
  
  const text = `üö® <b>ASAP –ó–∞–ø–∏—Ç</b>

üë§ ${user?.fullName || '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'}
üè¢ ${user?.department || ''}${user?.team ? ' / ' + user.team : ''}

–û–ø–∏—à—ñ—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É, —è–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î –Ω–µ–≥–∞–π–Ω–æ–≥–æ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è:

<i>–í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ HR –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É.</i>`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
  registrationCache.set(telegramId, { 
    step: 'asap_message',
    timestamp: Date.now()
  });
}

async function showAIAssistant(chatId, telegramId) {
  const text = `ü§ñ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫</b>

–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑:

üîç <b>–®–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫
‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∏ remote —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ü–æ–ª—ñ—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å
‚Ä¢ –õ—ñ–∫–∞—Ä–Ω—è–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫–∏
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
‚Ä¢ –ü–æ—Ä–∞–¥–∏ –ø–æ –∫–∞—Ä'—î—Ä—ñ

‚ùì –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚ùì –ü—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'ai_vacation_help' },
        { text: 'üè† –ü—Ä–æ remote', callback_data: 'ai_remote_help' }
      ],
      [
        { text: '‚è∞ –ü—Ä–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'ai_late_help' },
        { text: 'üè• –ü—Ä–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'ai_sick_help' }
      ],
      [
        { text: 'üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏', callback_data: 'ai_personal_tips' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

async function showAnalyticsMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üìà –ú–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
}

async function showHRPanel(chatId, telegramId) {
  const role = await getUserRole(telegramId);
  
  if (role !== 'HR') {
    await sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –¢—ñ–ª—å–∫–∏ –¥–ª—è HR.');
    return;
  }

  const text = `üë• <b>HR –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è</b>

üéõÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

async function showCEOPanel(chatId, telegramId) {
  await sendMessage(chatId, 'üè¢ CEO –ø–∞–Ω–µ–ª—å –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ...');
}

async function showAIVacationHelp(chatId, telegramId) {
  const balance = await getVacationBalance(telegramId);
  const canTake = await canTakeVacation(telegramId);
  
  let text = `üèñÔ∏è <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫: –í—ñ–¥–ø—É—Å—Ç–∫–∏</b>\n\n`;
  text += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${balance.remaining}/${balance.annual} –¥–Ω—ñ–≤\n\n`;
  text += `üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n`;
  text += `‚Ä¢ –ú—ñ–Ω: 1 –¥–µ–Ω—å, –ú–∞–∫—Å: 7 –¥–Ω—ñ–≤ –∑–∞ —Ä–∞–∑\n`;
  text += `‚Ä¢ –ü–µ—Ä—à–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ 3 –º—ñ—Å—è—Ü—ñ\n`;
  text += `‚Ä¢ –†—ñ—á–Ω–∏–π –ª—ñ–º—ñ—Ç: 24 –¥–Ω—ñ\n\n`;
  
  if (!canTake.allowed) {
    text += `‚ö†Ô∏è ${canTake.reason}`;
  }

  const keyboard = {
    inline_keyboard: [
      [
        { text: 'üîô –ù–∞–∑–∞–¥ –¥–æ –®–Ü', callback_data: 'ai_assistant' },
        { text: 'üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é', callback_data: 'main_menu' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

async function showAIRemoteHelp(chatId, telegramId) {
  await sendMessage(chatId, 'üè† –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ remote –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
}

async function showAILateHelp(chatId, telegramId) {
  await sendMessage(chatId, '‚è∞ –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è–º –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
}

async function showAISickHelp(chatId, telegramId) {
  await sendMessage(chatId, 'üè• –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è...');
}

async function showAIPersonalTips(chatId, telegramId) {
  await sendMessage(chatId, 'üí° –®–Ü –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è...');
}

async function handleRegistrationInput(chatId, telegramId, text) {
  // –í —Ä–æ–∑—Ä–æ–±—Ü—ñ
}

async function handleSpecificAction(chatId, telegramId, action) {
  try {
    if (action.startsWith('late_')) {
      const minutes = action.split('_')[1];
      await processLateReport(chatId, telegramId, minutes);
    } else if (action === 'remote_today') {
      await processRemoteToday(chatId, telegramId);
    } else if (action === 'remote_date') {
      await sendMessage(chatId, 'üìÖ –í–∏–±–æ—Ä –¥–∞—Ç–∏ –¥–ª—è remote –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ');
    } else if (action === 'sick_today') {
      await processSickToday(chatId, telegramId);
    } else if (action === 'vacation_request') {
      await sendMessage(chatId, 'üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫—É –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ');
    } else if (action === 'vacation_emergency') {
      await processEmergencyVacation(chatId, telegramId);
    } else {
      await sendMessage(chatId, `–§—É–Ω–∫—Ü—ñ—è "${action}" –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ`);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ handleSpecificAction:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É');
  }
}

async function processLateReport(chatId, telegramId, minutes) {
  try {
    const user = await getUserInfo(telegramId);
    const today = new Date().toISOString().split('T')[0];
    
    // –ó–∞–ø–∏—Å—É—î–º–æ –≤ Google Sheets
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Lates'];
    if (sheet) {
      await sheet.addRow({
        EntryID: `L_${Date.now()}`,
        TelegramID: telegramId,
        FullName: user?.fullName,
        Department: user?.department,
        Team: user?.team,
        Date: today,
        MinutesLate: minutes,
        Reason: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –±–æ—Ç',
        MonthCount: (await getMonthLateStats(telegramId)).count + 1,
        CreatedAt: new Date().toISOString()
      });
    }
    
    const monthStats = await getMonthLateStats(telegramId);
    let text = `‚úÖ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è –Ω–∞ ${minutes} —Ö–≤ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–æ!\n`;
    text += `üìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count + 1} —Ä–∞–∑—ñ–≤`;
    
    if (monthStats.count + 1 >= 7) {
      text += `\n‚ö†Ô∏è –£–≤–∞–≥–∞! –ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –Ω–æ—Ä–º—É —Å–ø—ñ–∑–Ω–µ–Ω—å (7/–º—ñ—Å)`;
    }
    
    await sendMessage(chatId, text);
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR
    const hrMessage = `‚è∞ <b>–°–ø—ñ–∑–Ω–µ–Ω–Ω—è</b>\n\nüë§ ${user?.fullName}\nüè¢ ${user?.department}\nüìÖ ${today}\n‚è±Ô∏è ${minutes} —Ö–≤\nüìä –¶—å–æ–≥–æ –º—ñ—Å—è—Ü—è: ${monthStats.count + 1}`;
    await sendMessage(HR_CHAT_ID, hrMessage);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processLateReport:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è.');
  }
}

// üè† REMOTE –°–¨–û–ì–û–î–ù–Ü
async function processRemoteToday(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const today = new Date().toISOString().split('T')[0];
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['Remotes'];
    if (sheet) {
      await sheet.addRow({
        EntryID: `R_${Date.now()}`,
        TelegramID: telegramId,
        FullName: user?.fullName,
        Department: user?.department,
        Team: user?.team,
        Date: today,
        CreatedAt: new Date().toISOString()
      });
    }
    
    await sendMessage(chatId, '‚úÖ Remote —Ä–æ–±–æ—Ç–∞ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∞!');
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR
    const hrMessage = `üè† <b>Remote —Ä–æ–±–æ—Ç–∞</b>\n\nüë§ ${user?.fullName}\nüè¢ ${user?.department}\nüìÖ ${today}`;
    await sendMessage(HR_CHAT_ID, hrMessage);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processRemoteToday:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó remote —Ä–æ–±–æ—Ç–∏.');
  }
}

// üè• –õ–Ü–ö–ê–†–ù–Ø–ù–ò–ô –°–¨–û–ì–û–î–ù–Ü
async function processSickToday(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    const today = new Date().toISOString().split('T')[0];
    
    await doc.loadInfo();
    const sheet = doc.sheetsByTitle['SickDays'];
    if (sheet) {
      await sheet.addRow({
        EntryID: `S_${Date.now()}`,
        TelegramID: telegramId,
        FullName: user?.fullName,
        Department: user?.department,
        Team: user?.team,
        Date: today,
        CreatedAt: new Date().toISOString()
      });
    }
    
    await sendMessage(chatId, '‚úÖ –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –∑–∞—Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π!');
    
    // –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ HR —Ç–∞ PM
    const hrMessage = `üè• <b>–õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π</b>\n\nüë§ ${user?.fullName}\nüè¢ ${user?.department}\nüìÖ ${today}`;
    await sendMessage(HR_CHAT_ID, hrMessage);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processSickToday:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ—ñ–∫—Å–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–≥–æ.');
  }
}

// üö® –ï–ö–°–¢–†–ï–ù–ê –í–Ü–î–ü–£–°–¢–ö–ê
async function processEmergencyVacation(chatId, telegramId) {
  try {
    const user = await getUserInfo(telegramId);
    
    const text = `üö® <b>–ï–∫—Å—Ç—Ä–µ–Ω–∞ –≤—ñ–¥–ø—É—Å—Ç–∫–∞</b>

üë§ ${user?.fullName}
üè¢ ${user?.department}${user?.team ? ' / ' + user.team : ''}

–û–ø–∏—à—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –µ–∫—Å—Ç—Ä–µ–Ω–æ—ó –≤—ñ–¥–ø—É—Å—Ç–∫–∏:

<i>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ –æ–¥—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–Ω–∞ HR –¥–ª—è —Ä–æ–∑–≥–ª—è–¥—É.</i>`;

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'vacation_menu' }]
      ]
    };

    await sendMessage(chatId, text, keyboard);
    registrationCache.set(telegramId, { 
      step: 'emergency_vacation',
      timestamp: Date.now()
    });
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processEmergencyVacation:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –µ–∫—Å—Ç—Ä–µ–Ω–æ—ó –∑–∞—è–≤–∫–∏.');
  }
}

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
async function startServer() {
  try {
    await initGoogleSheets();
    
    if (WEBHOOK_URL) {
      await bot.setWebHook(`${WEBHOOK_URL}/webhook`);
      console.log('‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', `${WEBHOOK_URL}/webhook`);
    }
    
    app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ HR Bot –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìç Health check: http://localhost:${PORT}/`);
      console.log(`üì® Webhook: ${WEBHOOK_URL}/webhook`);
    });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É:', error);
    process.exit(1);
  }
}

process.on('unhandledRejection', (reason) => console.error('Unhandled Rejection:', reason));
process.on('uncaughtException', (error) => { console.error('Uncaught Exception:', error); process.exit(1); });

startServer();
