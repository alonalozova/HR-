/**
 * üè¢ HR –ë–û–¢ - RAILWAY DEPLOYMENT VERSION
 * ‚ö° –®–≤–∏–¥–∫–æ, –Ω–∞–¥—ñ–π–Ω–æ, –∑ —É—Å—ñ–º–∞ –¥–µ—Ç–∞–ª—è–º–∏ –±—ñ–∑–Ω–µ—Å-–ª–æ–≥—ñ–∫–∏
 * üéØ 100% –∫–Ω–æ–ø–∫–æ–≤–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å + –ø–æ–≤–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
 * üîê –ü–æ–≤–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
 * üìä –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –≤—Å—ñ—Ö HR-–ø—Ä–æ—Ü–µ—Å—ñ–≤ –¥–ª—è –õ—é–¥–∏.Digital
 */

require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const { GoogleSpreadsheet } = require('google-spreadsheet');

// ‚öôÔ∏è –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ó ENVIRONMENT VARIABLES
const BOT_TOKEN = process.env.BOT_TOKEN;
const SPREADSHEET_ID = process.env.SPREADSHEET_ID;
const HR_CHAT_ID = process.env.HR_CHAT_ID;
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = process.env.WEBHOOK_URL;

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
if (!BOT_TOKEN || !SPREADSHEET_ID || !HR_CHAT_ID) {
  console.error('‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤\'—è–∑–∫–æ–≤—ñ environment variables!');
  process.exit(1);
}

// ü§ñ –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê
const bot = new TelegramBot(BOT_TOKEN);
const app = express();

// üìä –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø GOOGLE SHEETS
let doc;
async function initGoogleSheets() {
  try {
    doc = new GoogleSpreadsheet(SPREADSHEET_ID);
    
    // –ê—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è —á–µ—Ä–µ–∑ service account
    await doc.useServiceAccountAuth({
      client_email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
      private_key: process.env.GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    });
    
    await doc.loadInfo();
    console.log('‚úÖ Google Sheets –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ:', doc.title);
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    await ensureAllSheets();
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets:', error);
    process.exit(1);
  }
}

// üõ°Ô∏è –ó–ê–•–ò–°–¢ –í–Ü–î –î–£–ë–õ–Æ–í–ê–ù–ù–Ø
const processedUpdates = new Set();
const CACHE_CLEANUP_INTERVAL = 5 * 60 * 1000; // 5 —Ö–≤–∏–ª–∏–Ω

// –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω
setInterval(() => {
  processedUpdates.clear();
  console.log('üßπ –ö–µ—à –æ—á–∏—â–µ–Ω–æ');
}, CACHE_CLEANUP_INTERVAL);

// üöÄ EXPRESS MIDDLEWARE
app.use(express.json());

// üìç HEALTH CHECK ENDPOINT
app.get('/', (req, res) => {
  res.json({
    status: 'OK',
    message: 'HR Bot is running',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// üì® WEBHOOK ENDPOINT
app.post('/webhook', async (req, res) => {
  try {
    const update = req.body;
    const updateId = update.update_id;
    
    // –®–≤–∏–¥–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å Telegram
    res.status(200).send('OK');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤
    if (processedUpdates.has(updateId)) {
      console.log(`‚ö†Ô∏è –î—É–±–ª—ñ–∫–∞—Ç update ${updateId} –ø—Ä–æ—ñ–≥–Ω–æ—Ä–æ–≤–∞–Ω–æ`);
      return;
    }
    
    processedUpdates.add(updateId);
    
    // –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (update.message) {
      await processMessage(update.message);
    } else if (update.callback_query) {
      await processCallback(update.callback_query);
    }
    
  } catch (error) {
    console.error('üí• –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ webhook:', error);
    res.status(500).send('Error');
  }
});

// üì® –û–ë–†–û–ë–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–¨
async function processMessage(message) {
  try {
    const chatId = message.chat.id;
    const text = message.text || '';
    const telegramId = message.from.id;
    const username = message.from.username || '';
    const firstName = message.from.first_name || '';
    const lastName = message.from.last_name || '';
    
    console.log(`üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${telegramId}: ${text}`);
    
    if (text === '/start') {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
      const user = await getUserInfo(telegramId);
      if (!user) {
        await startRegistration(chatId, telegramId, username, firstName, lastName);
      } else {
        await showMainMenu(chatId, telegramId);
      }
      return;
    }
    
    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
    await handleRegistrationInput(chatId, telegramId, text);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processMessage:', error);
    await sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// üéõÔ∏è –û–ë–†–û–ë–ö–ê CALLBACK –ó–ê–ü–ò–¢–Ü–í
async function processCallback(callback) {
  try {
    const chatId = callback.message.chat.id;
    const data = callback.data;
    const telegramId = callback.from.id;
    
    console.log(`üéõÔ∏è Callback –≤—ñ–¥ ${telegramId}: ${data}`);
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
    await bot.answerCallbackQuery(callback.id);
    
    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è
    switch (data) {
      case 'vacation_menu':
        await showVacationMenu(chatId, telegramId);
        break;
      case 'remote_menu':
        await showRemoteMenu(chatId, telegramId);
        break;
      case 'late_menu':
        await showLateMenu(chatId, telegramId);
        break;
      case 'sick_menu':
        await showSickMenu(chatId, telegramId);
        break;
      case 'onboarding_menu':
        await showOnboardingMenu(chatId, telegramId);
        break;
      case 'my_stats':
        await showMyStats(chatId, telegramId);
        break;
      case 'faq_menu':
        await showFAQMenu(chatId, telegramId);
        break;
      case 'back_main':
      case 'main_menu':
      case 'start_command':
        await showMainMenu(chatId, telegramId);
        break;
      case 'start_registration':
        await showRegistrationForm(chatId, telegramId);
        break;
      case 'suggestions_menu':
        await showSuggestionsMenu(chatId, telegramId);
        break;
      case 'asap_request':
        await showASAPForm(chatId, telegramId);
        break;
      case 'ai_assistant':
        await showAIAssistant(chatId, telegramId);
        break;
      case 'analytics_menu':
        await showAnalyticsMenu(chatId, telegramId);
        break;
      case 'hr_panel':
        await showHRPanel(chatId, telegramId);
        break;
      case 'ceo_panel':
        await showCEOPanel(chatId, telegramId);
        break;
      case 'ai_vacation_help':
        await showAIVacationHelp(chatId, telegramId);
        break;
      case 'ai_remote_help':
        await showAIRemoteHelp(chatId, telegramId);
        break;
      case 'ai_late_help':
        await showAILateHelp(chatId, telegramId);
        break;
      case 'ai_sick_help':
        await showAISickHelp(chatId, telegramId);
        break;
      case 'ai_personal_tips':
        await showAIPersonalTips(chatId, telegramId);
        break;
      default:
        await handleSpecificAction(chatId, telegramId, data);
        break;
    }
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ processCallback:', error);
    await sendMessage(chatId, '‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}

// üì§ –í–Ü–î–ü–†–ê–í–ö–ê –ü–û–í–Ü–î–û–ú–õ–ï–ù–ù–Ø
async function sendMessage(chatId, text, keyboard = null) {
  try {
    const options = {
      parse_mode: 'HTML'
    };
    
    if (keyboard) {
      options.reply_markup = keyboard;
    }
    
    await bot.sendMessage(chatId, text, options);
    
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ sendMessage:', error);
  }
}

// üéØ –ü–û–ß–ê–¢–û–ö –†–ï–Ñ–°–¢–†–ê–¶–Ü–á
async function startRegistration(chatId, telegramId, username, firstName, lastName) {
  const welcomeText = `üëã <b>–ü—Ä–∏–≤—ñ—Ç –∑—ñ—Ä–æ—á–∫–∞!</b> üåü

ü§ñ –Ø –±–æ—Ç-–ø–æ–º—ñ—á–Ω–∏–∫ —Ä–æ–∑—Ä–æ–±–ª–µ–Ω–∏–π —Ç–≤–æ—ó–º HR. –í–æ–Ω–∞ —Å—Ç–≤–æ—Ä–∏–ª–∞ –º–µ–Ω–µ, —â–æ–± –ø–æ–ª–µ–≥—à–∏—Ç–∏ —ñ –∞–≤—Ç–æ–º–∞—Ç–∏–∑—É–≤–∞—Ç–∏ –ø—Ä–æ—Ü–µ—Å–∏. –Ø —Ç–æ—á–Ω–æ —Å—Ç–∞–Ω—É —Ç–æ–±—ñ –≤ –Ω–∞–≥–æ–¥—ñ.

üìù –ü–æ—á–Ω—É –∑ —Ç–æ–≥–æ, —â–æ –ø—Ä–æ—à—É —Ç–µ–±–µ –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è. –¶–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –∞–±–∏ –Ω–∞–¥–∞–ª—ñ —è –º—ñ–≥ –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ —Ç–æ–±—ñ.

–ù–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ—á–∞—Ç–∏:`;

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –ü–æ—á–∞—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é', callback_data: 'start_registration' }]
    ]
  };

  await sendMessage(chatId, welcomeText, keyboard);
}

// üìã –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –ó –ì–†–£–ü–û–í–ò–ú–ò –ö–ù–û–ü–ö–ê–ú–ò
async function showMainMenu(chatId, telegramId) {
  try {
    const role = await getUserRole(telegramId);
    const user = await getUserInfo(telegramId);
    
    let welcomeText = `üëã <b>–ü—Ä–∏–≤—ñ—Ç, ${user?.fullName || '–∫–æ–ª–µ–≥–∞'}!</b>

üåü –Ø —Ç–≤—ñ–π HR –ø–æ–º—ñ—á–Ω–∏–∫. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:`;

    // üé® –ì–†–£–ü–û–í–Ü –ö–ù–û–ü–ö–ò –î–õ–Ø –ö–†–ê–©–û–ì–û UX
    const baseKeyboard = [
      // –ì—Ä—É–ø–∞ 1: –û—Å–Ω–æ–≤–Ω—ñ HR –ø—Ä–æ—Ü–µ—Å–∏
      [
        { text: 'üèñÔ∏è –í—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'vacation_menu' },
        { text: 'üè† Remote', callback_data: 'remote_menu' }
      ],
      [
        { text: '‚è∞ –°–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'late_menu' },
        { text: 'üè• –õ—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'sick_menu' }
      ],
      // –ì—Ä—É–ø–∞ 2: –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —Ç–∞ –¥–æ–ø–æ–º–æ–≥–∞
      [
        { text: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'my_stats' },
        { text: 'üéØ –û–Ω–±–æ—Ä–¥–∏–Ω–≥', callback_data: 'onboarding_menu' }
      ],
      [
        { text: 'üí¨ –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó', callback_data: 'suggestions_menu' },
        { text: 'üö® ASAP –∑–∞–ø–∏—Ç', callback_data: 'asap_request' }
      ],
      [
        { text: '‚ùì FAQ', callback_data: 'faq_menu' },
        { text: 'ü§ñ –®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫', callback_data: 'ai_assistant' }
      ]
    ];

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∫–Ω–æ–ø–∫–∏ –¥–ª—è PM/HR/CEO
    if (role === 'PM' || role === 'HR' || role === 'CEO') {
      baseKeyboard.push([
        { text: 'üìã –ó–∞—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è', callback_data: 'approvals_menu' },
        { text: 'üìà –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞', callback_data: 'analytics_menu' }
      ]);
    }

    if (role === 'HR') {
      baseKeyboard.push([
        { text: 'üë• HR –ü–∞–Ω–µ–ª—å', callback_data: 'hr_panel' },
        { text: 'üì¢ –†–æ–∑—Å–∏–ª–∫–∏', callback_data: 'hr_broadcasts' }
      ]);
    }

    if (role === 'CEO') {
      baseKeyboard.push([
        { text: 'üè¢ CEO –ü–∞–Ω–µ–ª—å', callback_data: 'ceo_panel' }
      ]);
    }

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    baseKeyboard.push([
      { text: 'üè† /start', callback_data: 'start_command' },
      { text: 'üîÑ –û–Ω–æ–≤–∏—Ç–∏ –º–µ–Ω—é', callback_data: 'main_menu' }
    ]);

    const keyboard = { inline_keyboard: baseKeyboard };
    await sendMessage(chatId, welcomeText, keyboard);

  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ showMainMenu:', error);
    await sendMessage(chatId, '‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–Ω—é. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ HR.');
  }
}

// ü§ñ –®–Ü-–ü–û–ú–Ü–ß–ù–ò–ö
async function showAIAssistant(chatId, telegramId) {
  const text = `ü§ñ <b>–®–Ü-–ü–æ–º—ñ—á–Ω–∏–∫</b>

–Ø –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑:

üîç <b>–®–≤–∏–¥–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:</b>
‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ –≤—ñ–¥–ø—É—Å—Ç–æ–∫
‚Ä¢ –ü—Ä–æ—Ü–µ–¥—É—Ä–∏ remote —Ä–æ–±–æ—Ç–∏
‚Ä¢ –ü–æ–ª—ñ—Ç–∏–∫–∞ —Å–ø—ñ–∑–Ω–µ–Ω—å
‚Ä¢ –õ—ñ–∫–∞—Ä–Ω—è–Ω—ñ –ø—Ä–æ—Ü–µ–¥—É—Ä–∏

üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</b>
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ –≤—ñ–¥–ø—É—Å—Ç–∫–∏
‚Ä¢ –ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫—É
‚Ä¢ –ü–æ—Ä–∞–¥–∏ –ø–æ –∫–∞—Ä'—î—Ä—ñ

‚ùì –ó–∞–¥–∞–π—Ç–µ –º–µ–Ω—ñ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è!`;

  const keyboard = {
    inline_keyboard: [
      [
        { text: '‚ùì –ü—Ä–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∏', callback_data: 'ai_vacation_help' },
        { text: 'üè† –ü—Ä–æ remote', callback_data: 'ai_remote_help' }
      ],
      [
        { text: '‚è∞ –ü—Ä–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è', callback_data: 'ai_late_help' },
        { text: 'üè• –ü—Ä–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–∏–π', callback_data: 'ai_sick_help' }
      ],
      [
        { text: 'üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏', callback_data: 'ai_personal_tips' }
      ],
      [
        { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };

  await sendMessage(chatId, text, keyboard);
}

// üìä –î–û–ü–û–ú–Ü–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É)
async function getUserInfo(telegramId) {
  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –∑ Google Sheets
  return null;
}

async function getUserRole(telegramId) {
  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–ª—ñ –∑ Google Sheets
  return 'EMP';
}

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó-–∑–∞–≥–ª—É—à–∫–∏
async function showVacationMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üèñÔ∏è –ú–µ–Ω—é –≤—ñ–¥–ø—É—Å—Ç–æ–∫ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showRemoteMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üè† –ú–µ–Ω—é remote —Ä–æ–±–æ—Ç–∏ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showLateMenu(chatId, telegramId) {
  await sendMessage(chatId, '‚è∞ –ú–µ–Ω—é —Å–ø—ñ–∑–Ω–µ–Ω—å (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showSickMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üè• –ú–µ–Ω—é –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–≥–æ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showOnboardingMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üéØ –ú–µ–Ω—é –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showMyStats(chatId, telegramId) {
  await sendMessage(chatId, 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showFAQMenu(chatId, telegramId) {
  await sendMessage(chatId, '‚ùì FAQ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showRegistrationForm(chatId, telegramId) {
  await sendMessage(chatId, 'üìù –§–æ—Ä–º–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showSuggestionsMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üí¨ –ú–µ–Ω—é –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showASAPForm(chatId, telegramId) {
  await sendMessage(chatId, 'üö® ASAP —Ñ–æ—Ä–º–∞ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showAnalyticsMenu(chatId, telegramId) {
  await sendMessage(chatId, 'üìà –ú–µ–Ω—é –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showHRPanel(chatId, telegramId) {
  await sendMessage(chatId, 'üë• HR –ø–∞–Ω–µ–ª—å (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showCEOPanel(chatId, telegramId) {
  await sendMessage(chatId, 'üè¢ CEO –ø–∞–Ω–µ–ª—å (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showAIVacationHelp(chatId, telegramId) {
  await sendMessage(chatId, 'üèñÔ∏è –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ –≤—ñ–¥–ø—É—Å—Ç–∫–∞—Ö (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showAIRemoteHelp(chatId, telegramId) {
  await sendMessage(chatId, 'üè† –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ remote (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showAILateHelp(chatId, telegramId) {
  await sendMessage(chatId, '‚è∞ –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ —Å–ø—ñ–∑–Ω–µ–Ω–Ω—è–º (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showAISickHelp(chatId, telegramId) {
  await sendMessage(chatId, 'üè• –®–Ü –¥–æ–ø–æ–º–æ–≥–∞ –ø–æ –ª—ñ–∫–∞—Ä–Ω—è–Ω–æ–º—É (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function showAIPersonalTips(chatId, telegramId) {
  await sendMessage(chatId, 'üí° –®–Ü –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ –ø–æ—Ä–∞–¥–∏ (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)');
}

async function handleRegistrationInput(chatId, telegramId, text) {
  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
}

async function handleSpecificAction(chatId, telegramId, action) {
  await sendMessage(chatId, `–î—ñ—è "${action}" –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ`);
}

async function ensureAllSheets() {
  // TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—Å—ñ—Ö –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—å
  console.log('üìä –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...');
}

// üöÄ –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
async function startServer() {
  try {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Google Sheets
    await initGoogleSheets();
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ webhook
    if (WEBHOOK_URL) {
      await bot.setWebHook(`${WEBHOOK_URL}/webhook`);
      console.log('‚úÖ Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', `${WEBHOOK_URL}/webhook`);
    }
    
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`üöÄ HR Bot –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
      console.log(`üìç Health check: http://localhost:${PORT}/`);
      console.log(`üì® Webhook: ${WEBHOOK_URL}/webhook`);
    });
    
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('Uncaught Exception:', error);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫
startServer();
