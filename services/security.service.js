/**
 * üõ°Ô∏è SECURITY SERVICE
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É, DDoS —Ç–∞ –∑–ª–æ–≤–∂–∏–≤–∞–Ω—å
 */

const rateLimit = require('express-rate-limit');
const { logger } = require('../utils/errors');

class SecurityService {
  constructor() {
    this.blockedIPs = new Map();
    this.suspiciousActivity = new Map();
    this.rateLimitConfigs = this.initializeRateLimits();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—ñ–≤ rate limiting
   */
  initializeRateLimits() {
    return {
      // üöÄ Webhook - –æ—Å–Ω–æ–≤–Ω–∏–π endpoint
      webhook: rateLimit({
        windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
        max: 100, // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø–∏—Ç—ñ–≤
        message: {
          error: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ webhook. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
          retryAfter: '15 —Ö–≤–∏–ª–∏–Ω'
        },
        standardHeaders: true,
        legacyHeaders: false,
        handler: (req, res) => {
          logger.warn('Webhook rate limit exceeded', {
            ip: req.ip,
            userAgent: req.get('User-Agent'),
            url: req.url
          });
          
          res.status(429).json({
            error: '–ó–∞–±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤ –¥–æ webhook. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω–∏—à–µ.',
            retryAfter: '15 —Ö–≤–∏–ª–∏–Ω',
            timestamp: new Date().toISOString()
          });
        }
      }),

      // üìä API endpoints - –±—ñ–ª—å—à —Å—Ç—Ä–æ–≥–∏–π –ª—ñ–º—ñ—Ç
      api: rateLimit({
        windowMs: 15 * 60 * 1000, // 15 —Ö–≤–∏–ª–∏–Ω
        max: 50, // –º–∞–∫—Å–∏–º—É–º 50 –∑–∞–ø–∏—Ç—ñ–≤
        message: {
          error: '–ó–∞–±–∞–≥–∞—Ç–æ API –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
          retryAfter: '15 —Ö–≤–∏–ª–∏–Ω'
        },
        standardHeaders: true,
        legacyHeaders: false,
        handler: (req, res) => {
          logger.warn('API rate limit exceeded', {
            ip: req.ip,
            endpoint: req.path,
            method: req.method
          });
          
          res.status(429).json({
            error: '–ó–∞–±–∞–≥–∞—Ç–æ API –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
            retryAfter: '15 —Ö–≤–∏–ª–∏–Ω',
            timestamp: new Date().toISOString()
          });
        }
      }),

      // üîí –ö—Ä–∏—Ç–∏—á–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó - –¥—É–∂–µ —Å—Ç—Ä–æ–≥–∏–π –ª—ñ–º—ñ—Ç
      critical: rateLimit({
        windowMs: 5 * 60 * 1000, // 5 —Ö–≤–∏–ª–∏–Ω
        max: 10, // –º–∞–∫—Å–∏–º—É–º 10 –∑–∞–ø–∏—Ç—ñ–≤
        message: {
          error: '–ó–∞–±–∞–≥–∞—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
          retryAfter: '5 —Ö–≤–∏–ª–∏–Ω'
        },
        standardHeaders: true,
        legacyHeaders: false,
        handler: (req, res) => {
          logger.error('Critical operation rate limit exceeded', {
            ip: req.ip,
            endpoint: req.path,
            method: req.method
          });
          
          // –î–æ–¥–∞—î–º–æ IP –¥–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö
          this.markSuspiciousActivity(req.ip);
          
          res.status(429).json({
            error: '–ó–∞–±–∞–≥–∞—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π. –í–∞—à IP —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.',
            retryAfter: '5 —Ö–≤–∏–ª–∏–Ω',
            timestamp: new Date().toISOString()
          });
        }
      }),

      // üè• Health check - –ª—ñ–±–µ—Ä–∞–ª—å–Ω–∏–π –ª—ñ–º—ñ—Ç
      health: rateLimit({
        windowMs: 1 * 60 * 1000, // 1 —Ö–≤–∏–ª–∏–Ω–∞
        max: 60, // –º–∞–∫—Å–∏–º—É–º 60 –∑–∞–ø–∏—Ç—ñ–≤
        message: {
          error: '–ó–∞–±–∞–≥–∞—Ç–æ health check –∑–∞–ø–∏—Ç—ñ–≤.',
          retryAfter: '1 —Ö–≤–∏–ª–∏–Ω–∞'
        },
        standardHeaders: true,
        legacyHeaders: false,
        skip: (req) => {
          // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ Railway health checks
          return req.get('User-Agent')?.includes('Railway') || false;
        }
      }),

      // üì± Telegram updates - —Å–µ—Ä–µ–¥–Ω—ñ–π –ª—ñ–º—ñ—Ç
      telegram: rateLimit({
        windowMs: 10 * 60 * 1000, // 10 —Ö–≤–∏–ª–∏–Ω
        max: 200, // –º–∞–∫—Å–∏–º—É–º 200 –∑–∞–ø–∏—Ç—ñ–≤
        message: {
          error: '–ó–∞–±–∞–≥–∞—Ç–æ Telegram –∑–∞–ø–∏—Ç—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.',
          retryAfter: '10 —Ö–≤–∏–ª–∏–Ω'
        },
        standardHeaders: true,
        legacyHeaders: false,
        keyGenerator: (req) => {
          // –ì—Ä—É–ø—É—î–º–æ –ø–æ Telegram chat ID —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
          const update = req.body;
          if (update?.message?.chat?.id) {
            return `telegram_${update.message.chat.id}`;
          }
          if (update?.callback_query?.from?.id) {
            return `telegram_${update.callback_query.from.id}`;
          }
          return req.ip;
        }
      })
    };
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è rate limiter –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É
   */
  getRateLimiter(type) {
    const limiter = this.rateLimitConfigs[type];
    if (!limiter) {
      logger.error('Unknown rate limiter type', { type });
      return this.rateLimitConfigs.webhook; // fallback
    }
    return limiter;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   */
  isSuspiciousActivity(ip) {
    const activity = this.suspiciousActivity.get(ip);
    if (!activity) return false;
    
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏
    if (Date.now() - activity.timestamp > 60 * 60 * 1000) { // 1 –≥–æ–¥–∏–Ω–∞
      this.suspiciousActivity.delete(ip);
      return false;
    }
    
    return activity.count > 5; // –±—ñ–ª—å—à–µ 5 –ø–æ—Ä—É—à–µ–Ω—å –∑–∞ –≥–æ–¥–∏–Ω—É
  }

  /**
   * –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   */
  markSuspiciousActivity(ip) {
    const existing = this.suspiciousActivity.get(ip);
    if (existing) {
      existing.count++;
      existing.lastSeen = Date.now();
    } else {
      this.suspiciousActivity.set(ip, {
        count: 1,
        timestamp: Date.now(),
        lastSeen: Date.now()
      });
    }
    
    logger.warn('Suspicious activity detected', {
      ip,
      count: this.suspiciousActivity.get(ip).count
    });
  }

  /**
   * –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è IP –∞–¥—Ä–µ—Å–∏
   */
  blockIP(ip, reason = 'Suspicious activity') {
    this.blockedIPs.set(ip, {
      reason,
      timestamp: Date.now(),
      expires: Date.now() + 24 * 60 * 60 * 1000 // 24 –≥–æ–¥–∏–Ω–∏
    });
    
    logger.error('IP blocked', { ip, reason });
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ IP –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π
   */
  isIPBlocked(ip) {
    const blockInfo = this.blockedIPs.get(ip);
    if (!blockInfo) return false;
    
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
    if (Date.now() > blockInfo.expires) {
      this.blockedIPs.delete(ip);
      return false;
    }
    
    return true;
  }

  /**
   * Middleware –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏—Ö IP
   */
  checkBlockedIP(req, res, next) {
    const ip = req.ip;
    
    if (this.isIPBlocked(ip)) {
      const blockInfo = this.blockedIPs.get(ip);
      logger.warn('Blocked IP attempted access', { ip, reason: blockInfo.reason });
      
      return res.status(403).json({
        error: '–í–∞—à IP —Ç–∏–º—á–∞—Å–æ–≤–æ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π',
        reason: blockInfo.reason,
        timestamp: new Date().toISOString()
      });
    }
    
    next();
  }

  /**
   * Middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø—ñ–¥–æ–∑—Ä—ñ–ª–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
   */
  logSuspiciousActivity(req, res, next) {
    const ip = req.ip;
    const userAgent = req.get('User-Agent');
    const url = req.url;
    const method = req.method;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –ø–∞—Ç—Ç–µ—Ä–Ω–∏
    const suspiciousPatterns = [
      /bot/i,
      /crawler/i,
      /spider/i,
      /scraper/i,
      /\.exe$/i,
      /\.bat$/i,
      /\.cmd$/i,
      /eval\(/i,
      /script/i,
      /javascript:/i
    ];
    
    const isSuspicious = suspiciousPatterns.some(pattern => 
      pattern.test(userAgent) || pattern.test(url)
    );
    
    if (isSuspicious) {
      logger.warn('Suspicious request detected', {
        ip,
        userAgent,
        url,
        method,
        timestamp: new Date().toISOString()
      });
      
      this.markSuspiciousActivity(ip);
    }
    
    next();
  }

  /**
   * Middleware –¥–ª—è –∑–∞—Ö–∏—Å—Ç—É –≤—ñ–¥ brute force
   */
  bruteForceProtection(req, res, next) {
    const ip = req.ip;
    const key = `brute_force_${ip}`;
    
    // –ü—Ä–æ—Å—Ç–∏–π –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Å–ø—Ä–æ–±
    const attempts = this.suspiciousActivity.get(key) || { count: 0, timestamp: Date.now() };
    
    // –ó–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∏ –ø—ñ–¥–æ–∑—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Ç–∞—Ö
    if (req.url.includes('admin') || req.url.includes('login') || req.url.includes('auth')) {
      attempts.count++;
      attempts.timestamp = Date.now();
      this.suspiciousActivity.set(key, attempts);
      
      if (attempts.count > 10) { // –±—ñ–ª—å—à–µ 10 —Å–ø—Ä–æ–±
        this.blockIP(ip, 'Brute force attempt');
        return res.status(403).json({
          error: '–ó–∞–±–∞–≥–∞—Ç–æ —Å–ø—Ä–æ–± –¥–æ—Å—Ç—É–ø—É. IP –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.',
          timestamp: new Date().toISOString()
        });
      }
    }
    
    next();
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–ø–µ–∫–∏
   */
  getSecurityStats() {
    const now = Date.now();
    
    // –û—á–∏—â–∞—î–º–æ –∑–∞—Å—Ç–∞—Ä—ñ–ª—ñ –∑–∞–ø–∏—Å–∏
    for (const [ip, info] of this.suspiciousActivity.entries()) {
      if (now - info.timestamp > 60 * 60 * 1000) { // 1 –≥–æ–¥–∏–Ω–∞
        this.suspiciousActivity.delete(ip);
      }
    }
    
    for (const [ip, info] of this.blockedIPs.entries()) {
      if (now > info.expires) {
        this.blockedIPs.delete(ip);
      }
    }
    
    return {
      blockedIPs: this.blockedIPs.size,
      suspiciousActivity: this.suspiciousActivity.size,
      timestamp: new Date().toISOString()
    };
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –≤—Å—ñ—Ö –±–ª–æ–∫—É–≤–∞–Ω—å (—Ç—ñ–ª—å–∫–∏ –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
   */
  clearAllBlocks() {
    this.blockedIPs.clear();
    this.suspiciousActivity.clear();
    logger.info('All security blocks cleared');
  }
}

module.exports = SecurityService;
