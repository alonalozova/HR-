/**
 * üîç –í–ê–õ–Ü–î–ê–¶–Ü–Ø –î–ê–ù–ò–•
 * –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
 */

const { ValidationError } = require('./errors');

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†
 */
function validateDate(dateString) {
  const dateRegex = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
  const match = dateString.match(dateRegex);
  
  if (!match) {
    throw new ValidationError('–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 11.11.2025)', 'date');
  }
  
  const day = parseInt(match[1]);
  const month = parseInt(match[2]);
  const year = parseInt(match[3]);
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞—Ç–∏
  const date = new Date(year, month - 1, day);
  if (date.getDate() !== day || date.getMonth() !== month - 1 || date.getFullYear() !== year) {
    throw new ValidationError('–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.', 'date');
  }
  
  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ –¥–∞—Ç–∞ –Ω–µ –≤ –º–∏–Ω—É–ª–æ–º—É
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  if (date < today) {
    throw new ValidationError('–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É.', 'date');
  }
  
  return date;
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –¥–Ω—ñ–≤ –≤—ñ–¥–ø—É—Å—Ç–∫–∏
 */
function validateVacationDays(days) {
  const numDays = parseInt(days);
  
  if (isNaN(numDays)) {
    throw new ValidationError('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º.', 'days');
  }
  
  if (numDays < 1 || numDays > 7) {
    throw new ValidationError('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 7.', 'days');
  }
  
  return numDays;
}

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è Telegram ID
 */
function validateTelegramId(telegramId) {
  if (!telegramId || typeof telegramId !== 'string' && typeof telegramId !== 'number') {
    throw new ValidationError('–ù–µ–≤—ñ—Ä–Ω–∏–π Telegram ID.', 'telegramId');
  }
  
  return telegramId.toString();
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
function formatDate(date) {
  if (!(date instanceof Date)) {
    return '–ù–µ–≤—ñ—Ä–Ω–∞ –¥–∞—Ç–∞';
  }
  
  return date.toLocaleDateString('uk-UA', {
    day: '2-digit',
    month: '2-digit',
    year: 'numeric'
  });
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–∞—Ç–∞ –≤ –º–∏–Ω—É–ª–æ–º—É
 */
function isDateInPast(date) {
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  return date < today;
}

module.exports = {
  validateDate,
  validateVacationDays,
  validateTelegramId,
  formatDate,
  isDateInPast
};
