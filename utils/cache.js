/**
 * üíæ –û–ü–¢–ò–ú–Ü–ó–û–í–ê–ù–ò–ô –ö–ï–® –ó TTL
 * –¶–µ–Ω—Ç—Ä–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –∫–µ—à –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
 */

class CacheWithTTL {
  constructor(maxSize = 1000, ttl = 5 * 60 * 1000) {
    this.cache = new Map();
    this.maxSize = maxSize;
    this.ttl = ttl;
  }
  
  set(key, value) {
    // –í–∏–¥–∞–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∏–π –µ–ª–µ–º–µ–Ω—Ç, —è–∫—â–æ –¥–æ—Å—è–≥–ª–∏ –ª—ñ–º—ñ—Ç—É
    if (this.cache.size >= this.maxSize) {
      const firstKey = this.cache.keys().next().value;
      this.cache.delete(firstKey);
    }
    this.cache.set(key, {
      data: value,
      timestamp: Date.now()
    });
  }
  
  get(key) {
    const item = this.cache.get(key);
    if (!item) return null;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTL
    if (Date.now() - item.timestamp > this.ttl) {
      this.cache.delete(key);
      return null;
    }
    return item.data;
  }
  
  has(key) {
    const item = this.cache.get(key);
    if (!item) return false;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ TTL
    if (Date.now() - item.timestamp > this.ttl) {
      this.cache.delete(key);
      return false;
    }
    return true;
  }
  
  delete(key) {
    return this.cache.delete(key);
  }
  
  clear() {
    this.cache.clear();
  }
  
  size() {
    return this.cache.size;
  }
}

// üíæ –ö–ï–®–Ü
const userCache = new CacheWithTTL(500, 10 * 60 * 1000); // 500 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, 10 —Ö–≤–∏–ª–∏–Ω
const registrationCache = new CacheWithTTL(100, 15 * 60 * 1000); // 100 —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π, 15 —Ö–≤–∏–ª–∏–Ω
const processedUpdates = new CacheWithTTL(1000, 2 * 60 * 1000); // 1000 –∑–∞–ø–∏—Ç—ñ–≤, 2 —Ö–≤–∏–ª–∏–Ω–∏

// üìä –ú–û–ù–Ü–¢–û–†–ò–ù–ì –ö–ï–®–£
setInterval(() => {
  console.log(`üìä –ö–µ—à —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: userCache=${userCache.size()}, registrationCache=${registrationCache.size()}, processedUpdates=${processedUpdates.size()}`);
}, 10 * 60 * 1000);

module.exports = {
  CacheWithTTL,
  userCache,
  registrationCache,
  processedUpdates
};
